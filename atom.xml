<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linux知识库</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-29T01:56:44.620Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>谢 佳</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Oracle中查看某个表的创建时间</title>
    <link href="http://yoursite.com/2019/03/16/Oracle%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA%E6%97%B6%E9%97%B4/"/>
    <id>http://yoursite.com/2019/03/16/Oracle中查看某个表的创建时间/</id>
    <published>2019-03-15T16:00:00.000Z</published>
    <updated>2019-10-29T01:56:44.620Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>&ensp;&ensp;&ensp;&ensp;select * from user_tables ; –查看当前用户下的表</p><p>&ensp;&ensp;&ensp;&ensp;select * from dba_tables; –查看数据库中所有的表</p><p>&ensp;&ensp;&ensp;&ensp;select created,last_ddl_time from user_objects where object_name=upper(‘表名’);</p><p>select * from  user_objects;</p><p>–表结构说明一下</p><p>Owner:object的属主。</p><p>object_name：ojbect的名字</p><p>Created :创建时间</p><p>subobject_name: 子孙object的名字，如：一个作了分区的表的各个分区名都会列出来。</p><p>Last_ddl_time：最后一次对其执行DDL操作的时间.</p><p>status:该Object的当前状态是否为可用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;select * from 
      
    
    </summary>
    
      <category term="Oracle" scheme="http://yoursite.com/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="http://yoursite.com/2019/01/19/nginx/"/>
    <id>http://yoursite.com/2019/01/19/nginx/</id>
    <published>2019-01-18T16:00:00.000Z</published>
    <updated>2019-01-26T02:37:10.074Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Nginx介绍"><a href="#Nginx介绍" class="headerlink" title="Nginx介绍"></a>Nginx介绍</h1><p>&ensp;&ensp;&ensp;&ensp;Nginx（发音同 engine x）是一款轻量级的Web 服务器／反向代理服务器及电子邮件（IMAP/POP3）代理服务器，并在一个BSD-like 协议下发行。由俄罗斯的程序设计师Igor Sysoev所开发，最初供俄国大型的入口网站及搜寻引擎Rambler（俄文：Рамблер）使用。 其特点是占有内存少，并发能力强，事实上nginx的并发能力确实在同类型的网页伺服器中表现较好.目前中国大陆使用nginx网站用户有：新浪、网易、 腾讯,另外知名的微网志Plurk也使用nginx。</p><h1 id="Nginx的优点"><a href="#Nginx的优点" class="headerlink" title="Nginx的优点"></a>Nginx的优点</h1><ol><li>高并发量：根据官方给出的数据，能够支持高达 50,000 个并发连接数的响应</li><li><p>内存消耗少：处理静态文件，同样起web 服务，比apache 占用更少的内存及资源，所有它是轻量级的</p></li><li><p>简单稳定：配置简单，基本在一个conf文件中配置，性能比较稳定，可以7*24小时长时间不间断运行</p></li><li><p>模块化程度高：Nginx是高度模块化的设计，编写模块相对简单，包括 gzipping, byte ranges, chunked responses,以及 SSI-filter 等 filter，支持 SSL 和 TLSSNI。</p></li><li><p>支持Rwrite重写规则：能够根据域名、URL的不同， 将HTTP请求分发到不同的后端服务器群组。</p></li><li><p>低成本：Nginx可以做高并发的负载均衡，且Nginx是开源免费的，如果使用F5等硬件来做负载均衡，硬件成本比较高。 </p></li><li><p>支持多系统：Nginx代码完全用C语言从头写成，已经移植到许多体系结构和操作系统，包括：Linux、FreeBSD、Solaris、Mac OS X、AIX以及Microsoft Windows，由于Nginx是免费开源的，可以在各系统上编译并使用。</p></li></ol><h1 id="nginx的程序架构"><a href="#nginx的程序架构" class="headerlink" title="nginx的程序架构"></a>nginx的程序架构</h1><h2 id="web服务相关的功能"><a href="#web服务相关的功能" class="headerlink" title="web服务相关的功能"></a>web服务相关的功能</h2><ol><li>虚拟主机（server）</li><li>支持 keep-alive 和管道连接</li><li>访问日志（支持基于日志缓冲提高其性能）</li><li>url rewirte</li><li>路径别名</li><li>基于IP及用户的访问控制</li><li>支持速率限制及并发数限制</li><li>重新配置和在线升级而无须中断客户的工作进程</li><li>Memcached 的 GET 接口 </li></ol><h2 id="master-worker结构"><a href="#master-worker结构" class="headerlink" title="master/worker结构"></a>master/worker结构</h2><ol><li><p>一个master进程：</p><p> ​    负载加载和分析配置文件、管理worker进程、平滑升级</p></li><li><p>一个或多个worker进程</p><p> ​    处理并响应用户请求</p></li><li><p>缓存相关的进程：</p></li></ol><p>​    cache loader：载入缓存对象<br>​    cache manager：管理缓存对象 </p><h1 id="nginx模块"><a href="#nginx模块" class="headerlink" title="nginx模块"></a>nginx模块</h1><p>&ensp;&ensp;&ensp;&ensp;nginx高度模块化，但其模块早期不支持DSO机制；1.9.11版本支持动态装载和卸载</p><h2 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h2><ol><li>核心模块：是 Nginx 服务器正常运行 必不可少 的模块，提供 错误日志记录 、配置文件解析 、 事件驱动机制 、 进程管理 等核心功能</li><li>标准HTTP模块：提供 HTTP 协议解析相关的功能，比如： 端口配置 、 网页编码设置 、 HTTP响应头设置 等等</li><li>可选HTTP模块：主要用于扩展标准的 HTTP 功能，让 Nginx 能处理一些特殊的服务，比如： Flash 多媒体传输 、解析 GeoIP 请求、 网络传输压缩 、 安全协议 SSL 支持等</li><li>邮件服务模块：主要用于支持 Nginx 的 邮件服务 ，包括对 POP3 协议、IMAP 协议和 SMTP协议的支持</li><li>第三方模块：是为了扩展 Nginx 服务器应用，完成开发者自定义功能，比如：Json 支持、 Lua 支持等</li></ol><h2 id="nginx的功用"><a href="#nginx的功用" class="headerlink" title="nginx的功用"></a>nginx的功用</h2><ol><li><p>静态的web资源服务器</p><p> ​    html，图片，js，css，txt等静态资源</p></li><li><p>结合FastCGI/uWSGI/SCGI等协议反向代理动态资源请求</p></li><li><p>http/https协议的反向代理</p></li><li><p>imap4/pop3协议的反向代理</p></li><li><p>tcp/udp协议的请求转发（反向代理） </p></li></ol><h1 id="配置文件的组成部分"><a href="#配置文件的组成部分" class="headerlink" title="配置文件的组成部分"></a>配置文件的组成部分</h1><ol><li><p>主配置文件：nginx.conf<br> 子配置文件 include conf.d/*.conf</p></li><li><p>fastcgi， uwsgi，scgi等协议相关的配置文件 </p></li><li><p>mime.types：支持的mime类型</p></li></ol><p>主程序文件：/usr/sbin/nginx<br>​            Unit File：nginx.service</p><h1 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h1><h2 id="主配置文件的配置指令"><a href="#主配置文件的配置指令" class="headerlink" title="主配置文件的配置指令"></a>主配置文件的配置指令</h2><p>​    directive value [value2 …];</p><p>注意：<br>(1) 指令必须以分号结尾<br>(2) 支持使用配置变量<br>​    内建变量：由Nginx模块引入，可直接引用<br>​    自定义变量：由用户使用set命令定义<br>​        set variable_name value;<br>​    引用变量：$variable_name</p><h2 id="主配置文件结构：四部"><a href="#主配置文件结构：四部" class="headerlink" title="主配置文件结构：四部"></a>主配置文件结构：四部</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">main block：主配置段，即全局配置段，对http,mail都有效</span><br><span class="line">event &#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="comment">#事件驱动相关的配置</span></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">#http/https 协议相关配置段 </span></span><br><span class="line">mail &#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="comment">#mail 协议相关配置段</span></span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="comment">#stream 服务器相关配置段</span></span><br></pre></td></tr></table></figure><h2 id="Main-全局配置段常见的配置指令分类"><a href="#Main-全局配置段常见的配置指令分类" class="headerlink" title="Main 全局配置段常见的配置指令分类"></a>Main 全局配置段常见的配置指令分类</h2><ol><li>正常运行必备的配置</li><li>优化性能相关的配置</li><li>用于调试及定位问题相关的配置</li><li>事件驱动相关的配置 </li></ol><h3 id="正常运行必备的配置"><a href="#正常运行必备的配置" class="headerlink" title="正常运行必备的配置"></a>正常运行必备的配置</h3><p>1、user</p><p>指定worker进程的运行身份，如组不指定，默认和用户名同名 </p><p>​    Syntax:    user user [group];<br>​    Default:    user nobody nobody;<br>​    Context:    main</p><p>2、pid /PATH/TO/PID_FILE;<br>指定存储nginx主进程进程号码的文件路径；</p><p>3、include file | mask;<br>指明包含进来的其它配置文件片断；</p><p>4、load_module file;<br>指明要装载的动态模块；</p><h3 id="性能优化相关的配置"><a href="#性能优化相关的配置" class="headerlink" title="性能优化相关的配置"></a>性能优化相关的配置</h3><p>1、worker_processes number | auto;<br>​    worker进程的数量；通常应该等于小于当前主机的cpu的物理核心数；<br>​    auto：当前主机物理CPU核心数；</p><p>2、worker_cpu_affinity cpumask …;<br>​    worker_cpu_affinity auto [cpumask];提高缓存命中率<br>​    CPU MASK：<br>​            00000000：<br>​            0000 0001：0号CPU<br>​            0000 0010：1号CPU<br>​            0000 0100：2号CPU<br>​            … …<br>​            0000 0011：0和1号CPU；<br>3、worker_priority number;<br>​    指定worker进程的nice值，设定worker进程优先级；[-20,20]</p><p>4、worker_rlimit_nofile number;<br>​    worker进程所能够打开的文件数量上限；</p><h3 id="调试、定位问题"><a href="#调试、定位问题" class="headerlink" title="调试、定位问题"></a>调试、定位问题</h3><p>1、daemon on|off;<br>​    是否以守护进程方式运行Nignx；</p><p>2、master_process on|off;<br>​    是否以master/worker模型运行nginx；默认为on；</p><p>3、error_log file [level];</p><h3 id="事件驱动相关的配置"><a href="#事件驱动相关的配置" class="headerlink" title="事件驱动相关的配置"></a>事件驱动相关的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<br>1、worker_connections number;<br>​    每个worker进程所能够打开的最大并发连接数数量；<br>​<br>​    worker_processes * worker_connections<br>​<br>2、use method;<br>​    指明并发连接请求的处理方法；<br>​<br>​    示例: use epoll;<br>​<br>3、accept_mutex on | off;<br>​    处理新的连接请求的方法；on意味着由各worker轮流处理新请求，Off意味着每个新请求的到达都会通知所有的worker进程；</p><h2 id="http协议相关的配置结构"><a href="#http协议相关的配置结构" class="headerlink" title="http协议相关的配置结构"></a>http协议相关的配置结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">...</span><br><span class="line">...<span class="comment">#各server的全局配置</span></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="comment">#每个server用于定义一个虚拟主机；</span></span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">listen</span><br><span class="line">server_name</span><br><span class="line">root</span><br><span class="line"><span class="built_in">alias</span></span><br><span class="line">location [OPERATOR] URL &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> CONDITION &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ngx-http-core-module"><a href="#ngx-http-core-module" class="headerlink" title="ngx_http_core_module"></a>ngx_http_core_module</h2><h3 id="与套接字相关的配置"><a href="#与套接字相关的配置" class="headerlink" title="与套接字相关的配置"></a>与套接字相关的配置</h3><p>1、server { … }<br>​    配置一个虚拟主机；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen address[:PORT]|PORT;</span><br><span class="line">server_name SERVER_NAME;</span><br><span class="line">root /PATH/TO/DOCUMENT_ROOT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、<code>listen PORT|address[:port]|unix:/PATH/TO/SOCKET_FILE</code><br>​        <code>listen address[:port][default_server] [ssl][http2 | spdy]  [backlog=number][rcvbuf=size] [sndbuf=size]</code></p><p>​    default_server：设定为默认虚拟主机；<br>​    ssl：限制仅能够通过ssl连接提供服务；<br>​    backlog=number：后援队列长度；<br>​    rcvbuf=size：接收缓冲区大小；<br>​    sndbuf=size：发送缓冲区大小；</p><p>3、server_name name …;<br>​    指明虚拟主机的主机名称；后可跟多个由空白字符分隔的字符串；<br>​    支持<em>通配任意长度的任意字符；server_name </em>.magedu.com  <a href="http://www.magedu." target="_blank" rel="noopener">www.magedu.</a>*<br>​    支持~起始的字符做正则表达式模式匹配；server_name ~^www\d+.magedu.com$</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">匹配机制：</span><br><span class="line">(1) 首先是字符串精确匹配;</span><br><span class="line">(2) 左侧*通配符；</span><br><span class="line">(3) 右侧*通配符；</span><br><span class="line">(4) 正则表达式；</span><br></pre></td></tr></table></figure><h3 id="定义路径相关的配置："><a href="#定义路径相关的配置：" class="headerlink" title="定义路径相关的配置："></a>定义路径相关的配置：</h3><p>1、root path;<br>设置web资源路径映射；用于指明用户请求的url所对应的本地文件系统上的文档所在目录路径；可用的位置：http, server, location, if in location；</p><p>2、location [ = | ~ | ~* | ^~ ] uri { … }</p><p>在一个server中location配置段可存在多个，用于实现从uri到文件系统的路径映射；ngnix会根据用户请求的URI来检查定义的所有location，并找出一个最佳匹配，而后应用其配置；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">=：对URI做精确匹配；</span><br><span class="line">location  =  / &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">例如, http://www.magedu.com/匹配</span><br><span class="line">http://www.magedu.com/index.html不匹配</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~：对URI做正则表达式模式匹配，区分字符大小写；</span><br><span class="line">~*：对URI做正则表达式模式匹配，不区分字符大小写；</span><br><span class="line">^~：对URI的左半部分做匹配检查，不区分字符大小写；</span><br><span class="line">不带符号：以URI为前缀的所有uri；</span><br></pre></td></tr></table></figure><p><strong>匹配优先级从高到低：=, ^~, ～/～*，不带符号；</strong></p><p><strong>例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment">#vim /etc/nginx/nginx.conf</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name node01;</span><br><span class="line">     <span class="comment">#   root "/ngx/html";                       </span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root <span class="string">"/web/nginx/html"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        location /images/ &#123;</span><br><span class="line">        root <span class="string">"/ngx/html"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">[root@node01 ~]<span class="comment">#mkdir /ngx/html -pv</span></span><br><span class="line">[root@node01 ~]<span class="comment">#vim /ngx/html/index.html</span></span><br><span class="line">&lt;h1&gt;node01&lt;/h1&gt; </span><br><span class="line">[root@node01 ~]<span class="comment">#mkdir /web/nginx/html -pv</span></span><br><span class="line">[root@node01 html]<span class="comment">#vim index.html</span></span><br><span class="line">&lt;h1&gt;This is new node01&lt;/h1&gt;</span><br><span class="line">[root@node01 ~]<span class="comment">#mkdir /ngx/html/images</span></span><br><span class="line">[root@node01 ~]<span class="comment">#vim /ngx/html/images/index.html</span></span><br><span class="line">/ngx/html/images/index.html </span><br><span class="line">[root@node01 ~]<span class="comment">#mkdir /web/nginx/html/images</span></span><br><span class="line">[root@node01 ~]<span class="comment">#vim /web/nginx/html/images/index.html</span></span><br><span class="line">/web/nginx/html/images/index.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@node01 ~]<span class="comment">#curl 192.168.183.148:8080</span></span><br><span class="line">&lt;h1&gt;This is new node01&lt;/h1&gt;</span><br><span class="line">如果把root <span class="string">"/web/nginx/html"</span>;注释掉</span><br><span class="line">[root@node01 ~]<span class="comment">#curl 192.168.183.148:8080</span></span><br><span class="line">&lt;h1&gt;node01&lt;/h1&gt; </span><br><span class="line">[root@node01 ~]<span class="comment">#curl 192.168.183.148:8080/images/</span></span><br><span class="line">/ngx/html/images/index.html</span><br></pre></td></tr></table></figure><p>3、alias path;<br>&ensp;&ensp;&ensp;&ensp;定义路径别名，文档映射的另一种机制；仅能用于location上下文；</p><p>注意：location中使用root指令和alias指令的意义不同；<br>​    (a) root，给定的路径对应于location中的/uri/左侧的/；<br>​    (b) alias，给定的路径对应于location中的/uri/右侧的/；</p><p><strong>例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment">#vim /etc/nginx/nginx.conf</span></span><br><span class="line">    <span class="comment"># for more information.</span></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name node01;</span><br><span class="line">     <span class="comment">#   root "/ngx/html";</span></span><br><span class="line">        location /images/ &#123;</span><br><span class="line">        <span class="built_in">alias</span> <span class="string">"/ngx/html/"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">[root@node01 ~]<span class="comment">#mkdir /ngx/html -pv</span></span><br><span class="line">[root@node01 ~]<span class="comment">#vim /ngx/html/index.html</span></span><br><span class="line">&lt;h1&gt;node01&lt;/h1&gt;</span><br><span class="line">[root@node01 ~]<span class="comment">#mkdir /ngx/html/images</span></span><br><span class="line">[root@node01 ~]<span class="comment">#vim /ngx/html/images/index.html</span></span><br><span class="line">/ngx/html/images/index.html</span><br><span class="line">结论：</span><br><span class="line">[root@node01 ~]<span class="comment">#curl 192.168.183.148:8080/images/</span></span><br><span class="line">&lt;h1&gt;node01&lt;/h1&gt;</span><br><span class="line">如果把<span class="built_in">alias</span> <span class="string">"/ngx/html/"</span>;换成root <span class="string">"/ngx/html/"</span>;</span><br><span class="line">[root@node01 ~]<span class="comment">#curl 192.168.183.148:8080/images/</span></span><br><span class="line">/ngx/html/images/index.html</span><br></pre></td></tr></table></figure><p>4、<code>index file ...;</code><br>​    默认资源；http, server, location；</p><p>5、<code>error_page code ... [=[response]] uri;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error_page 404 /404.html;</span><br><span class="line">location = /404.html &#123;</span><br><span class="line">root <span class="string">"/www/error_pages"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、<code>try_files file ... uri;</code></p><p>​     <code>try_files file ... =code;</code><br>按顺序检查文件是否存在，返回第一个找到的文件或文件夹（结尾加斜线表示为文件夹），如果所有文件或文件夹都找不到，会进行一个内部重定向到最后一个参数。只有最后一个参数可以引起一个内部重定向，之前的参数只设置内部URI的指向。最后一个参数是回退URI且必须存在，否则会出现内部500错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /images/ &#123;</span><br><span class="line">try_files <span class="variable">$uri</span> /images/default.gif;</span><br><span class="line">&#125; <span class="comment">#说明：/images/default.gif是URI</span></span><br><span class="line">location / &#123;</span><br><span class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/index.html <span class="variable">$uri</span>.html =404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义客户端请求的相关配置"><a href="#定义客户端请求的相关配置" class="headerlink" title="定义客户端请求的相关配置"></a>定义客户端请求的相关配置</h3><p>1、<code>keepalive_timeout timeout [header_timeout];</code><br>​    设定保持连接超时时长，0表示禁止长连接，<strong>默认为75s</strong><br>2、<code>keepalive_requests number;</code><br>​    在一次长连接上所允许请求的资源的最大数量，<strong>默认为100</strong><br>3、<code>keepalive_disable none | browser ...;</code><br>​    对哪种浏览器禁用长连接<br>4、<code>send_timeout time;</code><br>​    向客户端发送响应报文的超时时长，此处是指两次写操作之间的间隔时长，而非整个响应过程的传输时长 </p><p>5、<code>client_body_buffer_size size;</code><br>​    用于接收每个客户端请求报文的body部分的缓冲区大小；默认为16k；超出此大小时，其将被暂存到磁盘上的由下面client_body_temp_path指令所定义的位置<br>6、<code>client_body_temp_path path [level1 [level2 [level3]]];</code><br>​    设定存储客户端请求报文的body部分的临时存储路径及子目录结构和数量<br>目录名为16进制的数字；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">client_body_temp_path /var/tmp/client_body 1 2 2</span><br><span class="line">1 1级目录占1位16进制，即2^4=16个目录 0<span class="_">-f</span></span><br><span class="line">2 2级目录占2位16进制，即2^8=256个目录 00-ff</span><br><span class="line">2 3级目录占2位16进制，即2^8=256个目录 00-ff</span><br></pre></td></tr></table></figure><h3 id="对客户端进行限制的相关配置"><a href="#对客户端进行限制的相关配置" class="headerlink" title="对客户端进行限制的相关配置"></a>对客户端进行限制的相关配置</h3><p>1、 limit_rate rate;<br>​    限制响应给客户端的传输速率，单位是bytes/second,<strong>默认值0表示无限制</strong><br>2、limit_except method … { … }，仅用于location<br>限制客户端使用除了指定的请求方法之外的其它方法<br>method:GET, HEAD, POST, PUT, DELETE，MKCOL, COPY, MOVE,OPTIONS, PROPFIND, PROPPATCH, LOCK, UNLOCK, PATCH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">limit_except GET &#123;</span><br><span class="line">allow 192.168.1.0/24;</span><br><span class="line">deny all;</span><br><span class="line">&#125;<span class="comment">#除了GET之外其它方法仅允许192.168.1.0/24网段主机使用</span></span><br></pre></td></tr></table></figure><h3 id="文件操作优化的配置"><a href="#文件操作优化的配置" class="headerlink" title="文件操作优化的配置"></a>文件操作优化的配置</h3><p>1、 aio on | off | threads[=pool];<br>​    是否启用aio功能<br>2、 directio size | off;<br>​    当文件大于等于给定大小时，例如directio 4m，同步（直接）写磁盘，而非写缓存<br>3、 open_file_cache off;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open_file_cache max=N [inactive=time];</span><br></pre></td></tr></table></figure><p>nginx可以缓存以下三种信息：<br>​    文件元数据：文件的描述符、文件大小和最近一次的修改时间<br>​    打开的目录结构<br>​    没有找到的或者没有权限访问的文件的相关信息<br>​        max=N：可缓存的缓存项上限；达到上限后会使用LRU算法实现管理<br>​        inactive=time：缓存项的非活动时长，在此处指定的时长内未被命中的或命中的次数少于                                        open_file_cache_min_uses指令所指定的次数的缓存项即为非活动项，将被删除</p><p>4、 open_file_cache_errors on | off;<br>​    是否缓存查找时发生错误的文件一类的信息,<strong>默认值为off</strong><br>5、 open_file_cache_min_uses number;<br>open_file_cache指令的inactive参数指定的时长内，至少被命中此处指定的次数方可被归类为活动项,<strong>默认值为1</strong><br>6、 open_file_cache_valid time;<br>​    缓存项有效性的检查频率,<strong>默认值为60s</strong></p><h2 id="ngx-http-access-module"><a href="#ngx-http-access-module" class="headerlink" title="ngx_http_access_module"></a>ngx_http_access_module</h2><p>&ensp;&ensp;&ensp;&ensp;可实现基于ip的访问控制功能</p><p>1、 allow address | CIDR | unix: | all;<br>2、 deny address | CIDR | unix: | all;<br>​    http, server, location, limit_except<br>​    自上而下检查，一旦匹配，将生效，条件严格的置前<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">deny 192.168.1.1;</span><br><span class="line">allow 192.168.1.0/24;</span><br><span class="line">allow 10.1.1.0/16;</span><br><span class="line">allow 2001:0db8::/32;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ngx-http-auth-basic-module"><a href="#ngx-http-auth-basic-module" class="headerlink" title="ngx_http_auth_basic_module"></a>ngx_http_auth_basic_module</h2><p>&ensp;&ensp;&ensp;&ensp;实现基于用户的访问控制，使用basic机制进行用户认证<br>1、 auth_basic string | off;<br>2、 auth_basic_user_file file;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /admin/ &#123;</span><br><span class="line">auth_basic <span class="string">"Admin Area"</span>;</span><br><span class="line">auth_basic_user_file /etc/nginx/.ngxpasswd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户口令文件：<br>1、明文文本：格式name:password:comment<br>2、加密文本：由htpasswd命令实现<br>​    httpd-tools所提供</p><h2 id="ngx-http-stub-status-module"><a href="#ngx-http-stub-status-module" class="headerlink" title="ngx_http_stub_status_module"></a>ngx_http_stub_status_module</h2><p>&ensp;&ensp;&ensp;&ensp;用于输出nginx的基本状态信息<br>1、输出信息示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment">#curl -s  192.168.183.148:8080/nginx_status</span></span><br><span class="line">Active connections: 1 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 111 111 114 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0</span><br></pre></td></tr></table></figure><ul><li>Active connections:当前状态，活动状态的连接数</li><li>accepts：统计总值，已经接受的客户端请求的总数</li><li>handled：统计总值，已经处理完成的客户端请求的总数</li><li>requests：统计总值，客户端发来的总的请求数</li><li>Reading：当前状态，正在读取客户端请求报文首部的连接的连接数</li><li>Writing：当前状态，正在向客户端发送响应报文过程中的连接数</li><li>Waiting：当前状态，正在等待客户端发出请求的空闲连接数</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /nginx_status &#123;</span><br><span class="line">stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ngx-http-log-module"><a href="#ngx-http-log-module" class="headerlink" title="ngx_http_log_module"></a>ngx_http_log_module</h2><p>&ensp;&ensp;&ensp;&ensp;指定日志格式记录请求<br>1、 log_format name string …;<br>string可以使用nginx核心模块及其它模块内嵌的变量<br>2、 <code>access_log path [format [buffer=size] [gzip[=level]][flush=time][if=condition]];</code><br>​      <code>access_log off;</code><br>​    访问日志文件路径，格式及相关的缓冲的配置<br>​        buffer=size<br>​        flush=time<br>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">llog_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br></pre></td></tr></table></figure><p>3、<code>open_log_file_cache max=N [inactive=time][min_uses=N][valid=time];</code><br>   <code>open_log_file_cache off;</code><br>​    缓存各日志文件相关的元数据信息</p><ul><li>​        max：缓存的最大文件描述符数量</li><li>​        min_uses：在inactive指定的时长内访问大于等于此值方可被当作活动项</li><li>​        inactive：非活动时长</li><li>​        valid：验证缓存中各缓存项是否为活动项的时间间隔</li></ul><p>4、 <code>open_log_file_cache max=N [inactive=time][min_uses=N][valid=time];</code><br><code>open_log_file_cache off;</code></p><p>缓存各日志文件相关的元数据信息<br>​    max：缓存的最大文件描述符数量<br>​    min_uses：在inactive指定的时长内访问大于等于此值方可被当作活动项<br>​    inactive：非活动时长<br>​    valid：验证缓存中各缓存项是否为活动项的时间间隔</p><h2 id="ngx-http-gzip-module"><a href="#ngx-http-gzip-module" class="headerlink" title="ngx_http_gzip_module"></a>ngx_http_gzip_module</h2><p>1、ngx_http_gzip_module<br>​    用gzip方法压缩响应数据，节约带宽<br>2、 gzip on | off;<br>​    启用或禁用gzip压缩<br>3、 gzip_comp_level level;<br>​    压缩比由低到高：1 到 9,<strong>默认：1</strong><br>4、 gzip_disable regex …;<br>​    匹配到客户端浏览器不执行压缩<br>5、 gzip_min_length length;<br>​    启用压缩功能的响应报文大小阈值<br>6、 gzip_http_version 1.0 | 1.1;<br>​    设定启用压缩功能时，协议的最小版本,<strong>默认：1.1</strong><br>7、 gzip_buffers number size;<br>​    支持实现压缩功能时缓冲区数量及每个缓存区的大小,<strong>默认：32  4k 或 16  8k</strong><br>8、 gzip_types mime-type …;<br>​    指明仅对哪些类型的资源执行压缩操作；即压缩过滤器,<strong>默认包含有text/html，不用显示指定，否则出错</strong><br>9、 gzip_vary on | off;<br>​    如果启用压缩，是否在响应报文首部插入“Vary: Accept-Encoding”<br>10、 gzip_proxied off | expired | no-cache | no-store | private |no_last_modified | no_etag | auth | any …;<br>​    nginx充当代理服务器时，对于后端服务器的响应报文，在何种条件下启用压缩功能<br>​        off：不启用压缩<br>​        expired，no-cache, no-store，private：对后端服务器的响应报文首部<br>​        Cache-Control值任何一个，启用压缩功能<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gzip on;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_min_length 64;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_types text/xml text/css application/javascript;</span><br></pre></td></tr></table></figure><h2 id="ngx-http-ssl-module"><a href="#ngx-http-ssl-module" class="headerlink" title="ngx_http_ssl_module"></a>ngx_http_ssl_module</h2><p>1、 ssl on | off;<br>​    为指定虚拟机启用HTTPS protocol， 建议用listen指令代替<br>2、 ssl_certificate file;<br>​    当前虚拟主机使用PEM格式的证书文件<br>3、 ssl_certificate_key file;<br>​    当前虚拟主机上与其证书匹配的私钥文件<br>4、 ssl_protocols [SSLv2][SSLv3] [TLSv1][TLSv1.1] [TLSv1.2];支持ssl协议版本，<strong>默认为后三个</strong><br>5、 ssl_session_cache off | none | [builtin[:size]][shared:name:size];<br>​    none: 通知客户端支持ssl session cache，但实际不支持<br>​    builtin[:size]：使用OpenSSL内建缓存，为每worker进程私有<br>​    [shared:name:size]：在各worker之间使用一个共享的缓存<br>6、 ssl_session_timeout time;<br>​    客户端连接可以复用ssl session cache中缓存的有效时长，默认5m<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 443 ssl;</span><br><span class="line">server_name www.magedu.com;</span><br><span class="line">root /vhosts/ssl/htdocs;</span><br><span class="line">ssl on;</span><br><span class="line">ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">ssl_session_cache shared:sslcache:20m;</span><br><span class="line">ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ngx-http-rewrite-module"><a href="#ngx-http-rewrite-module" class="headerlink" title="ngx_http_rewrite_module"></a>ngx_http_rewrite_module</h2><p>&ensp;&ensp;&ensp;&ensp;将用户请求的URI基于PCRE regex所描述的模式进行检查，而后完成重定向替换</p><p>1、 rewrite regex replacement [flag]<br>将用户请求的URI基于regex所描述的模式进行检查，匹配到时将其替换为replacement指定的新的URI<br>注意：如果在同一级配置块中存在多个rewrite规则，那么会自下而下逐个检查；被某条件规则替换完成后，会重新一轮的替换检查<br>隐含有循环机制,但不超过10次；如果超过，提示500响应码，[flag]所表示<br>的标志位用于控制此循环机制<br>如果replacement是以http://或https://开头，则替换结果会直接以重向返回给客户端, 即永久重定向301</p><p>[flag]：</p><ul><li>last：重写完成后停止对当前URI在当前location中后续的其它重写操作，而后对新的URI启动新一轮重写检查；提前重启新一轮循环，不建议在location中使用</li><li>break：重写完成后停止对当前URI在当前location中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置；结束循环，建议在location中使用</li><li>redirect：临时重定向，重写完成后以临时重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求；使用相对路径,或者http://或https://开头，状态码：302</li><li>permanent:重写完成后以永久重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求，状态码：301</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">示例：把本地192.168.183.148:8080/以bbs或forum开头的都跳转到192.168.183.148:10080/forum下</span><br><span class="line">[root@node01 ~]<span class="comment">#vim /etc/nginx/nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name node01;</span><br><span class="line"><span class="comment">#       root "/ngx/html";</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root <span class="string">"/web/nginx/html"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        location ~* ^/(bbs|forum) &#123;</span><br><span class="line">                rewrite ^/(bbs|forum)/(.*)$ http://192.168.183.148:10080/<span class="variable">$2</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        server &#123;</span><br><span class="line">                server_name forum.magedu.com;</span><br><span class="line">                listen 10080;</span><br><span class="line">                root <span class="string">"/web/nginx/forum"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">[root@node01 html]<span class="comment">#ll /web/nginx/</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 2 root root 24 Jan 10 09:34 forum</span><br><span class="line">drwxr-xr-x 5 root root 62 Jan 10 09:46 html</span><br><span class="line">[root@node01 html]<span class="comment">#ll /web/nginx/html/</span></span><br><span class="line">total 2</span><br><span class="line">drwxr-xr-x 2 root root  6 Jan 10 09:46 bbs</span><br><span class="line">drwxr-xr-x 2 root root 24 Jan 10 09:22 forum</span><br></pre></td></tr></table></figure><p>2、 rewrite_log on | off;<br>是否开启重写日志, 发送至error_log（notice level） </p><h2 id="ngx-http-referer-module"><a href="#ngx-http-referer-module" class="headerlink" title="ngx_http_referer_module"></a>ngx_http_referer_module</h2><p>&ensp;&ensp;&ensp;&ensp;用来阻止Referer首部无有效值的请求访问，可防止盗链 </p><p>1、 valid_referers none|blocked|server_names|string …;<br>定义referer首部的合法可用值，不能匹配的将是非法值<br>​    none：请求报文首部没有referer首部<br>​    blocked：请求报文有referer首部，但无有效值<br>​    server_names：referer首部中包含本主机名<br>​    arbitrary_string：任意字符串，但可使用*作通配符<br>​    regular expression：被指定的正则表达式模式匹配到的字符串,要使用~开头</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">valid_referers none block server_names *.magedu.com;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line"><span class="built_in">return</span>  403 http://www.magedu.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ngx-http-proxy-module"><a href="#ngx-http-proxy-module" class="headerlink" title="ngx_http_proxy_module"></a>ngx_http_proxy_module</h2><p>&ensp;&ensp;&ensp;&ensp;转发请求至另一台主机</p><h3 id="1、proxy-pass-URL"><a href="#1、proxy-pass-URL" class="headerlink" title="1、proxy_pass URL;"></a>1、proxy_pass URL;</h3><p>​            Context:    location, if in location, limit_except<br>​    <strong>注意：proxy_pass后面的路径不带uri时，其会将location的uri传递给后端主机；</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name HOSTNAME;</span><br><span class="line">location /uri/ &#123;</span><br><span class="line">proxy_pass http://hos[:port];最后没有/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在客户端输入http://HOSTNAME/uri --&gt; http://host/uri </span><br><span class="line">proxy_pass后面的路径是一个uri时，其会将location的uri替换为proxy_pass的uri；</span><br></pre></td></tr></table></figure><p>​    <strong>proxy_pass后面的路径是一个uri时，其会将location的uri替换为proxy_pass的uri</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name HOSTNAME;</span><br><span class="line">location /uri/ &#123;</span><br><span class="line">proxy_pass http://host/new_uri/;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在客户端输入http://HOSTNAME/uri/ --&gt; http://host/new_uri/</span><br></pre></td></tr></table></figure><p>​    <strong>如果location定义其uri时使用了正则表达式的模式，或在if语句或limt_execept中使用proxy_pass指令，则proxy_pass之后必须不能使用uri; 用户请求时传递的uri将直接附加代理到的服务的之后；</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name HOSTNAME;</span><br><span class="line">location ~|~* /uri/ &#123;</span><br><span class="line">proxy http://host;不能加/</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http://HOSTNAME/uri/ --&gt; http://host/uri/；</span><br></pre></td></tr></table></figure><h3 id="2、proxy-set-header-field-value"><a href="#2、proxy-set-header-field-value" class="headerlink" title="2、proxy_set_header field value;"></a>2、proxy_set_header field value;</h3><p>​    设定发往后端主机的请求报文的请求首部的值；Context: http, server, location</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br></pre></td></tr></table></figure><h3 id="3、proxy-cache-path"><a href="#3、proxy-cache-path" class="headerlink" title="3、proxy_cache_path"></a>3、proxy_cache_path</h3><p>​    定义可用于proxy功能的缓存；Context:    http    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</span><br></pre></td></tr></table></figure><h3 id="4、-proxy-cache-zone-off-默认off"><a href="#4、-proxy-cache-zone-off-默认off" class="headerlink" title="4、 proxy_cache zone | off; 默认off"></a>4、 proxy_cache zone | off; 默认off</h3><p>&ensp;&ensp;&ensp;&ensp;指明调用的缓存，或关闭缓存机制；Context:http, server, location</p><h3 id="5、-proxy-cache-key-string"><a href="#5、-proxy-cache-key-string" class="headerlink" title="5、 proxy_cache_key string;"></a>5、 proxy_cache_key string;</h3><p>&ensp;&ensp;&ensp;&ensp;缓存中用于“键”的内容<br><strong>默认值：proxy_cache_key $scheme$proxy_host$request_uri;</strong></p><h3 id="6、-proxy-cache-valid-code-…-time"><a href="#6、-proxy-cache-valid-code-…-time" class="headerlink" title="6、 proxy_cache_valid [code …] time;"></a>6、 proxy_cache_valid [code …] time;</h3><p>&ensp;&ensp;&ensp;&ensp;定义对特定响应码的响应内容的缓存时长<br>定义在http{…}中<br>示例:<br>​    proxy_cache_valid 200 302 10m;<br>​    proxy_cache_valid 404 1m;<br>​    ngx_http_proxy_module<br>示例：在http配置定义缓存信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path /var/cache/nginx levels=1:1:1 keys_zone=proxycache:20m</span><br><span class="line">inactive=120s max_size=2G;</span><br><span class="line">说明：proxy_cache:20m 指内存中缓存的大小，主要用于存放key和metadata（如：使用次数）</span><br><span class="line">max_size=1g 指磁盘存入文件内容的缓存空间最大值</span><br><span class="line">调用缓存功能，需要定义在相应的配置段，如</span><br><span class="line">server&#123;</span><br><span class="line">proxy_cache proxycache;</span><br><span class="line">proxy_cache_key <span class="variable">$request_uri</span>;</span><br><span class="line">proxy_cache_valid 200 302 301 1h;</span><br><span class="line">proxy_cache_valid any 1m;</span><br><span class="line">proxy_cache_methods GET HEAD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、-proxy-cache-use-stale"><a href="#7、-proxy-cache-use-stale" class="headerlink" title="7、 proxy_cache_use_stale;"></a>7、 proxy_cache_use_stale;</h3><p><code>proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | off ...</code><br>在被代理的后端服务器出现哪种情况下，可直接使用过期的缓存响应客户端</p><h3 id="8、-proxy-cache-methods-GET-HEAD-POST-…"><a href="#8、-proxy-cache-methods-GET-HEAD-POST-…" class="headerlink" title="8、 proxy_cache_methods GET | HEAD | POST …;"></a>8、 proxy_cache_methods GET | HEAD | POST …;</h3><p>&ensp;&ensp;&ensp;&ensp;对哪些客户端请求方法对应的响应进行缓存，GET和HEAD方法总是被缓存 </p><h3 id="9、-proxy-hide-header-field"><a href="#9、-proxy-hide-header-field" class="headerlink" title="9、 proxy_hide_header field;"></a>9、 proxy_hide_header field;</h3><p>&ensp;&ensp;&ensp;&ensp;默认nginx在响应报文中不传递后端服务器的首部字段Date, Server, X-Pad,X-Accel-等，用于隐藏后端服务器特定的响应首部</p><h3 id="10、-proxy-connect-timeout-time"><a href="#10、-proxy-connect-timeout-time" class="headerlink" title="10、 proxy_connect_timeout time;"></a>10、 proxy_connect_timeout time;</h3><p>&ensp;&ensp;&ensp;&ensp;定义与后端服务器建立连接的超时时长，如超时会出现502错误，默认为60s，一般不建议超出75s</p><h3 id="11、-proxy-send-timeout-time"><a href="#11、-proxy-send-timeout-time" class="headerlink" title="11、 proxy_send_timeout time;"></a>11、 proxy_send_timeout time;</h3><p>&ensp;&ensp;&ensp;&ensp;将请求发送给后端服务器的超时时长；默认为60s</p><h3 id="12、-proxy-read-timeout-time"><a href="#12、-proxy-read-timeout-time" class="headerlink" title="12、 proxy_read_timeout time;"></a>12、 proxy_read_timeout time;</h3><p>&ensp;&ensp;&ensp;&ensp;等待后端服务器发送响应报文的超时时长，默认为60s </p><h2 id="ngx-http-headers-module"><a href="#ngx-http-headers-module" class="headerlink" title="ngx_http_headers_module"></a>ngx_http_headers_module</h2><p>&ensp;&ensp;&ensp;&ensp;向由代理服务器响应给客户端的响应报文添加自定义首部，或修改指定首部的值 </p><p>1、 add_header name value [always];<br>添加自定义首部</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_header X-Via <span class="variable">$server_addr</span>;</span><br><span class="line">add_header X-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">add_header X-Accel <span class="variable">$server_name</span>;</span><br></pre></td></tr></table></figure><p>2、 add_trailer name value [always];<br>添加自定义响应信息的尾部 </p><h2 id="ngx-http-fastcgi-module"><a href="#ngx-http-fastcgi-module" class="headerlink" title="ngx_http_fastcgi_module"></a>ngx_http_fastcgi_module</h2><p>&ensp;&ensp;&ensp;&ensp;转发请求到FastCGI服务器，不支持php模块方式 </p><h3 id="1、-fastcgi-pass-address"><a href="#1、-fastcgi-pass-address" class="headerlink" title="1、 fastcgi_pass address;"></a>1、 fastcgi_pass address;</h3><p>address为后端的fastcgi server的地址<br>可用位置：location, if in location</p><h3 id="2、-fastcgi-index-name"><a href="#2、-fastcgi-index-name" class="headerlink" title="2、 fastcgi_index name;"></a>2、 fastcgi_index name;</h3><p>fastcgi默认的主页资源<br>示例：fastcgi_index index.php;</p><h3 id="3、-fastcgi-param-parameter-value-if-not-empty"><a href="#3、-fastcgi-param-parameter-value-if-not-empty" class="headerlink" title="3、 fastcgi_param parameter value [if_not_empty];"></a>3、 fastcgi_param parameter value [if_not_empty];</h3><p>设置传递给 FastCGI服务器的参数值，可以是文本，变量或组合<br>例1：<br>1）在后端服务器先配置fpm server和mariadb-server<br>2）在前端nginx服务上做以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.php$ &#123;</span><br><span class="line">fastcgi_pass 172.17.0.3:9000<span class="comment">#后端fpm服务器IP:9000;</span></span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME /app/php<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">fastcgi_cache fcgicache;</span><br><span class="line">       fastcgi_cache_key <span class="variable">$request_uri</span>;</span><br><span class="line">       fastcgi_cache_valid 200 302 10m;</span><br><span class="line">       fastcgi_cache_valid 301      1h;</span><br><span class="line">fastcgi_cache_valid any      1m;</span><br><span class="line">       fastcgi_cache_methods GET HEAD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2：通过/pm_status和/ping来获取fpm server状态信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">       location ~* ^/(pm_status|ping)$ &#123;</span><br><span class="line">                fastcgi_pass 后端fpm服务器IP:9000;(如：172.17.0.3:9000;)</span><br><span class="line">                fastcgi_param SCRIPT_FILENAME <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">                include       fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line">在浏览器端输入http://192.168.83.148/ping</span><br></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_cache_path path [levels=levels][use_temp_path=on|off] keys_zone=name:size</span><br><span class="line">[inactive=time][max_size=size] [manager_files=number][manager_sleep=time]</span><br><span class="line">[manager_threshold=time][loader_files=number] [loader_sleep=time][loader_threshold=time] [purger=on|off][purger_files=number] [purger_sleep=time][purger_threshold=time];</span><br></pre></td></tr></table></figure><p>定义fastcgi的缓存；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path<span class="comment">#缓存位置为磁盘上的文件系统</span></span><br><span class="line">max_size=size</span><br><span class="line"><span class="comment">#磁盘path路径中用于缓存数据的缓存空间上限</span></span><br><span class="line">levels=levels：缓存目录的层级数量，以及每一级的目录数量</span><br><span class="line">示例：</span><br><span class="line">levels=1:2:2</span><br><span class="line">keys_zone=name:size</span><br><span class="line"><span class="comment">#k/v映射的内存空间的名称及大小</span></span><br><span class="line">inactive=time<span class="comment">#非活动时长</span></span><br></pre></td></tr></table></figure><h3 id="5、-fastcgi-cache-zone-off"><a href="#5、-fastcgi-cache-zone-off" class="headerlink" title="5、 fastcgi_cache zone | off;"></a>5、 fastcgi_cache zone | off;</h3><p>调用指定的缓存空间来缓存数据<br>可用位置：http, server, location</p><h3 id="6、-fastcgi-cache-key-string"><a href="#6、-fastcgi-cache-key-string" class="headerlink" title="6、 fastcgi_cache_key string;"></a>6、 fastcgi_cache_key string;</h3><p>定义用作缓存项的key的字符串<br>示例：fastcgi_cache_key $request_rui;</p><h3 id="7、-fastcgi-cache-methods-GET-HEAD-POST-…"><a href="#7、-fastcgi-cache-methods-GET-HEAD-POST-…" class="headerlink" title="7、 fastcgi_cache_methods GET | HEAD | POST …;"></a>7、 fastcgi_cache_methods GET | HEAD | POST …;</h3><p>为哪些请求方法使用缓存</p><h3 id="8、-fastcgi-cache-min-uses-number"><a href="#8、-fastcgi-cache-min-uses-number" class="headerlink" title="8、 fastcgi_cache_min_uses number;"></a>8、 fastcgi_cache_min_uses number;</h3><p>缓存空间中的缓存项在inactive定义的非活动时间内至少要被访问到此处所指定的次数方<br>可被认作活动项</p><h3 id="9、-fastcgi-keep-conn-on-off"><a href="#9、-fastcgi-keep-conn-on-off" class="headerlink" title="9、 fastcgi_keep_conn on | off;"></a>9、 fastcgi_keep_conn on | off;</h3><p>收到后端服务器响应后，fastcgi服务器是否关闭连接，建议启用长连接</p><h3 id="10、-fastcgi-cache-valid-code-…-time"><a href="#10、-fastcgi-cache-valid-code-…-time" class="headerlink" title="10、 fastcgi_cache_valid [code …] time;"></a>10、 fastcgi_cache_valid [code …] time;</h3><p>不同的响应码各自的缓存时长</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">fastcgi_cache_path /var/cache/fcgi levels=1:2 keys_zone=fcgicache:20m inactive=120s max_size=2G;</span><br><span class="line">...</span><br><span class="line">server &#123;</span><br><span class="line">...</span><br><span class="line">location ~* \.php$ &#123;</span><br><span class="line">fastcgi_pass 172.17.0.3:9000;</span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME /appdata<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        include       fastcgi_params;</span><br><span class="line">fastcgi_cache fcgicache;</span><br><span class="line">fastcgi_cache_key <span class="variable">$request_uri</span>;</span><br><span class="line">fastcgi_cache_valid 200 302 10m;</span><br><span class="line">fastcgi_cache_valid 301 1h;</span><br><span class="line">fastcgi_cache_valid any 1m;</span><br><span class="line">fastcgi_cache_methods GET HEAD;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ngx-http-upstream-module"><a href="#ngx-http-upstream-module" class="headerlink" title="ngx_http_upstream_module"></a>ngx_http_upstream_module</h2><p>&ensp;&ensp;&ensp;&ensp;用于将多个服务器定义成服务器组，而由proxy_pass, fastcgi_pass等指令进行引用 </p><p>1、 upstream name { … }<br>&ensp;&ensp;&ensp;&ensp;定义后端服务器组，会引入一个新的上下文<br>默认调度算法是wrr<br>Context: http</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream httpdsrvs &#123;</span><br><span class="line">server ...<span class="comment">#172.17.0.4 [weight=2]</span></span><br><span class="line">server ...<span class="comment">#172.17.0.10</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 server address [parameters];<br>&ensp;&ensp;&ensp;&ensp;在upstream上下文中server成员，以及相关的参数；Context:upstream<br>address的表示格式：<br>​    unix:/PATH/TO/SOME_SOCK_FILE<br>​    IP[:PORT]</p><p>​    HOSTNAME[:PORT]</p><p>parameters:</p><p>​    weight=number   权重，<strong>默认为1</strong></p><p>​    max_conns   连接后端报务器最大并发活动连接数，1.11.5后支持  max_fails=number   失败尝试最大次数；超出此处指定的次数时，server将被标  记为不可用,<strong>默认为1</strong></p><p>​    fail_timeout=time   后端服务器标记为不可用状态的连接超时时长，<strong>默认10s</strong></p><p>​    backup   将服务器标记为“备用”，即所有服务器均不可用时才启用</p><p>​    down   标记为“不可用”，实现灰度发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.magedu.com;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://httpdsrvs;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>3、 ip_hash   源地址hash调度方法  </p><p>4、 least_conn   最少连接调度算法，当server拥有不同的权重时其为wlc，</p><p>​    当所有后端主机连接数相同时，则使用wrr，适用于长连接</p><p>5、 hash key [consistent] 基于指定的key的hash表来实现对请求的调度，此处的key可以直接文本、变量或二者组合<br>​    作用：将请求分类，同一类请求将发往同一个upstream server，使用consistent参数，将使用ketama一致性hash算法，适用于后端是Cache服务器（如varnish）时使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span> <span class="variable">$request_uri</span> consistent;<span class="comment">#适用于缓存层</span></span><br><span class="line"><span class="built_in">hash</span> <span class="variable">$remote_addr</span>;</span><br></pre></td></tr></table></figure><p>6、 keepalive 连接数N;<br>​    为每个worker进程保留的空闲的长连接数量，可节约nginx端口，并减少连接管理的消耗一致性hash算法</p><p>7、 health_check [parameters];<br>​    健康状态检测机制；只能用于location上下文<br>常用参数：<br>​    interval=time检测的频率，<strong>默认为5秒</strong><br>​    fails=number：判定服务器不可用的失败检测次数；<strong>默认为1次</strong><br>​    passes=number：判定服务器可用的失败检测次数；<strong>默认为1次</strong><br>​    uri=uri：做健康状态检测测试的目标uri；<strong>默认为/</strong><br>​    match=NAME：健康状态检测的结果评估调用此处指定的match配置块</p><p><strong>注意：仅对nginx plus有效</strong></p><p>8、 match name { … }<br>​    对backend server做健康状态检测时，定义其结果判断机制；只能用于http上下文</p><p>常用的参数：<br>​    status code[ code …]: 期望的响应状态码<br>​    header HEADER[operator value]：期望存在响应首部，也可对期望的响应首部的值基于比较操作符和值进行比较<br>​    body：期望响应报文的主体部分应该有的内容</p><p><strong>注意：仅对nginx plus有效</strong></p><h2 id="ngx-stream-core-module"><a href="#ngx-stream-core-module" class="headerlink" title="ngx_stream_core_module"></a>ngx_stream_core_module</h2><p>&ensp;&ensp;&ensp;&ensp;模拟反代基于tcp或udp的服务连接，即工作于传输层的反代或调度</p><p>1、 stream { … }<br>​    定义stream相关的服务；Context:main</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">upstream mysqlsrvs &#123;</span><br><span class="line">server 192.168.22.2:3306;</span><br><span class="line">server 192.168.22.3:3306;</span><br><span class="line">least_conn;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 10.1.0.6:3306;</span><br><span class="line">proxy_pass mysqlsrvs;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 listen</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listen address:port [ssl] [udp] [proxy_protocol] [backlog=number] [<span class="built_in">bind</span>]</span><br><span class="line">[ipv6only=on|off] [reuseport]</span><br><span class="line">[so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];listen address:port [ssl][udp] [proxy_protocol][backlog=number] [<span class="built_in">bind</span>][ipv6only=on|off] [reuseport]</span><br><span class="line"></span><br><span class="line">[so_keepalive=on|off|[keepidle]: keepintvl:keepcnt;</span><br></pre></td></tr></table></figure><h2 id="ngx-stream-proxy-module"><a href="#ngx-stream-proxy-module" class="headerlink" title="ngx_stream_proxy_module"></a>ngx_stream_proxy_module</h2><p>可实现代理基于TCP，UDP (1.9.13), UNIX-domain sockets的数据流<br>1、 proxy_pass address;<br>​    指定后端服务器地址<br>2、 proxy_timeout timeout;<br>​    无数据传输时，保持连接状态的超时时长,<strong>默认为10m</strong><br>3、 proxy_connect_timeout time;<br>​    设置nginx与被代理的服务器尝试建立连接的超时时长,<strong>默认为60s</strong><br>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">upstream mysqlsrvs &#123;</span><br><span class="line">server 172.17.0.6:3306;</span><br><span class="line">server 172.17.0.7:3306;</span><br><span class="line"><span class="built_in">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 3306;</span><br><span class="line">proxy_pass mysqlsrvs;</span><br><span class="line">proxy_timeout 60s;</span><br><span class="line">proxy_connect_timeout 10s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现Nginx高并发Linux内核优化"><a href="#实现Nginx高并发Linux内核优化" class="headerlink" title="实现Nginx高并发Linux内核优化"></a>实现Nginx高并发Linux内核优化</h1><p>&ensp;&ensp;&ensp;&ensp;由于默认的Linux内核参数考虑的是最通用场景，这明显不符合用于支持高并发访问的Web服务器的定义，所以需要修改Linux内核参数，是的Nginx可以拥有更高的性能,根据业务特点来进行调整，当Nginx作为静态web内容服务器、反向代理或者提供压缩服务器的服务器时，期内核参数的调整都是不同的，这里针对最通用的、使Nginx支持更多并发请求的TCP网络参数做简单的配置,修改/etc/sysctl.conf来更改内核参数</p><ol><li><p>fs.file-max = 999999</p><p>​    表示单个进程较大可以打开的句柄数</p></li><li><p>net.ipv4.tcp_tw_reuse = 1<br> ​    参数设置为 1 ，表示允许将TIME_WAIT状态的socket重新用于新的TCP链接，这对于服务器来说意义重大，因为总有大量TIME_WAIT状态的链接存在</p></li><li><p>net.ipv4.tcp_keepalive_time = 600<br> ​    当keepalive启动时，TCP发送keepalive消息的频度；默认是2小时，将其设置为10分钟，可更快的清理无效链接</p></li><li><p>net.ipv4.tcp_fin_timeout = 30<br> ​    当服务器主动关闭链接时，socket保持在FIN_WAIT_2状态的较大时间</p></li><li><p>net.ipv4.tcp_max_tw_buckets = 5000<br> ​    这个参数表示操作系统允许TIME_WAIT套接字数量的较大值，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息,默认为8000，过多的TIME_WAIT套接字会使Web服务器变慢</p></li><li><p>net.ipv4.ip_local_port_range = 1024 65000<br> ​    定义UDP和TCP链接的本地端口的取值范围</p></li><li><p>net.ipv4.tcp_rmem = 10240 87380 12582912<br> ​    定义了TCP接受缓存的最小值、默认值、较大值</p></li><li><p>net.ipv4.tcp_wmem = 10240 87380 12582912<br> ​    定义TCP发送缓存的最小值、默认值、较大值</p></li><li><p>net.core.netdev_max_backlog = 8096<br> ​    当网卡接收数据包的速度大于内核处理速度时，会有一个列队保存这些数据包。这个参数表示该列队的较大值</p></li></ol><ol start="10"><li><p>net.core.rmem_default = 6291456<br>​    表示内核套接字接受缓存区默认大小</p></li><li><p>net.core.wmem_default = 6291456<br>​    表示内核套接字发送缓存区默认大小</p></li><li><p>net.core.rmem_max = 12582912<br>​    表示内核套接字接受缓存区较大大小</p></li><li><p>net.core.wmem_max = 12582912<br>​    表示内核套接字发送缓存区较大大小<br><strong>注意：以上的四个参数，需要根据业务逻辑和实际的硬件成本来综合考虑</strong></p></li><li><p>net.ipv4.tcp_syncookies = 1<br>​    与性能无关。用于解决TCP的SYN攻击</p></li><li><p>net.ipv4.tcp_max_syn_backlog = 8192<br>​    这个参数表示TCP三次握手建立阶段接受SYN请求列队的较大长度，默认1024，将其设置的大一些可使出现Nginx繁忙来不及accept新连接时，Linux不至于丢失客户端发起的链接请求</p></li><li><p>net.ipv4.tcp_tw_recycle = 1<br>​    这个参数用于设置启用timewait快速回收</p></li><li><p>net.core.somaxconn=262114<br>​    选项默认值是128，这个参数用于调节系统同时发起的TCP连接数，在高并发的请求中，默认的值可能会导致链接超时或者重传，因此需要结合高并发请求数来调节此值。</p></li><li><p>net.ipv4.tcp_max_orphans=262114<br>​    选项用于设定系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤立链接将立即被复位并输出警告信息。这个限制指示为了防止简单的DOS攻击，不用过分依靠这个限制甚至认为的减小这个值，更多的情况是增加这个值</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;Nginx介绍&quot;&gt;&lt;a href=&quot;#Nginx介绍&quot; class
      
    
    </summary>
    
      <category term="nginx" scheme="http://yoursite.com/categories/nginx/"/>
    
    
      <category term="模块" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>redis基础</title>
    <link href="http://yoursite.com/2019/01/14/redis%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/01/14/redis基础/</id>
    <published>2019-01-13T16:00:00.000Z</published>
    <updated>2019-01-26T02:29:38.079Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一：缓存概念"><a href="#一：缓存概念" class="headerlink" title="一：缓存概念"></a>一：缓存概念</h1><p>&ensp;&ensp;&ensp;&ensp;缓存是为了调节速度不一致的两个或多个不同的物质的速度，在中间对速度较快的一方起到一个加速访问速度较慢的一方的作用，比如CPU的一级、二级缓存是保存了CPU最近经常访问的数据，内存是保存CPU经常访问硬盘的数据，而且硬盘也有大小不一的缓存，甚至是物理服务器的raid 卡有也缓存，都是为了起到加速CPU 访问硬盘数据的目的，因为CPU的速度太快了，CPU需要的数据硬盘往往不能在短时间内满足CPU的需求，因此PCU缓存、内存、Raid 卡以及硬盘缓存就在一定程度上满足了CPU的数据需求，即CPU 从缓存读取数据可以大幅提高CPU的工作效率。</p><h2 id="1-1：系统缓存"><a href="#1-1：系统缓存" class="headerlink" title="1.1：系统缓存"></a>1.1：系统缓存</h2><h3 id="1-1-1：buffer与cache"><a href="#1-1-1：buffer与cache" class="headerlink" title="1.1.1：buffer与cache"></a>1.1.1：buffer与cache</h3><p>buffer：缓冲也叫写缓冲，一般用于写操作，可以将数据先写入内存在写入磁盘，buffer 一般用于写缓冲，用于解决不同介质的速度不一致的缓冲，先将数据临时写入到里自己最近的地方，以提高写入速度，CPU会把数据线写到内存的磁盘缓冲区，然后就认为数据已经写入完成看，然后内核的线程在后面的时间在写入磁盘，所以服务器突然断电会丢失内存中的部分数据。</p><p>cache：缓存也叫读缓存，一般用于读操作，CPU读文件从内存读，如果内存没有就先从硬盘读到内存再读到CPU，将需要频繁读取的数据放在里自己最近的缓存区域，下次读取的时候即可快速读取。</p><h3 id="1-1-2：cache的保存位置"><a href="#1-1-2：cache的保存位置" class="headerlink" title="1.1.2：cache的保存位置"></a>1.1.2：cache的保存位置</h3><p>客户端：浏览器</p><p>内存：本地服务器、远程服务器</p><p>硬盘：本机硬盘、远程服务器硬盘</p><p>速度对比：</p><p>客户端浏览器-内存-远程内存-硬盘-远程硬盘。</p><h2 id="1-2：CDN缓存"><a href="#1-2：CDN缓存" class="headerlink" title="1.2：CDN缓存"></a>1.2：CDN缓存</h2><h3 id="1-2-1：CDN概念"><a href="#1-2-1：CDN概念" class="headerlink" title="1.2.1：CDN概念"></a>1.2.1：CDN概念</h3><p>&ensp;&ensp;&ensp;&ensp;内容分发网络（Content Delivery Network），通过将服务内容分发至全网加速节点，利用全球调度系统使用户能够就近获取，有效降低访问延迟，提升服务可用性。</p><p>第一降低机房的使用带宽，因为很多资源通过CDN就直接返回用户了；</p><p>第二解决不同运营商之间的互联，因为可以让联通的网络访问联通，让电信的网络访问电信，起到加速用户访问的目的；</p><p>第三：解决用户访问的地域问题，就近返回用户资源。</p><p>百度CDN：<a href="https://cloud.baidu.com/product/cdn.html" target="_blank" rel="noopener">https://cloud.baidu.com/product/cdn.html</a> </p><p>阿里CDN：<a href="https://www.aliyun.com/product/cdn" target="_blank" rel="noopener">https://www.aliyun.com/product/cdn</a> </p><p>腾讯CDN：<a href="https://www.qcloud.com/product/cdn" target="_blank" rel="noopener">https://www.qcloud.com/product/cdn</a> </p><h3 id="1-2-2：CDN主要优势"><a href="#1-2-2：CDN主要优势" class="headerlink" title="1.2.2：CDN主要优势"></a>1.2.2：CDN主要优势</h3><p>&ensp;&ensp;&ensp;&ensp;提前对静态内容进行预缓存，避免大量的请求回源，导致主站网络带宽被打满而导致数据无法更新，另外CDN可以将数据根据访问的热度不通而进行不通级别的缓存，例如访问量最高的资源访问CDN 边缘节点的内存，其次的放在SSD或者SATA，再其次的放在云存储，这样兼顾了速度与成本。缓存-缓存到最快的地方如内存，缓存的数据准确命中率高，访问速度就快</p><p>调度准确-将用户调度到最近的边缘节点</p><p>性能优化-CDN 专门用于缓存响应速度快</p><p>安全相关-抵御攻击</p><p>节省带宽：由于用户请求由边缘节点响应，因此大幅降低到源站带宽。</p><h2 id="1-3：应用层缓存"><a href="#1-3：应用层缓存" class="headerlink" title="1.3：应用层缓存"></a>1.3：应用层缓存</h2><p>&ensp;&ensp;&ensp;&ensp;Nginx、PHP等web服务可以设置应用缓存以加速响应用户请求，另外有些解释性语言比如PHP/Python不能直接运行，需要先编译成字节码，但字节码需要解释器解释为机器码之后才能执行，因此字节码也是一种缓存，有时候会出现程序代码上线后字节码没有更新的现象。  </p><h2 id="1-4：其他层面缓存"><a href="#1-4：其他层面缓存" class="headerlink" title="1.4：其他层面缓存"></a>1.4：其他层面缓存</h2><p>CPU缓存(L1的数据缓存和L1的指令缓存)、二级缓存、三级缓存</p><p>磁盘缓存</p><p>RAID卡</p><p>分布式缓存：redis、memcache</p><h1 id="二：redis部署"><a href="#二：redis部署" class="headerlink" title="二：redis部署"></a>二：redis部署</h1><h3 id="2-1-1：redis简介："><a href="#2-1-1：redis简介：" class="headerlink" title="2.1.1：redis简介："></a>2.1.1：redis简介：</h3><p>&ensp;&ensp;&ensp;&ensp;Redis(Remote Dictionary Server)在2009年发布，开发者Salvatore Sanfilippo是意大利开发者，他本想为自己的公司开发一个用于替换MySQL的产品Redis，但是没有想到他把Redis开源后大受欢迎，短短几年，Redis就有了很大的用户群体，目前国内外使用的公司有知乎网、新浪微博、GitHub等</p><p>&ensp;&ensp;&ensp;&ensp;redis是一个开源的、遵循BSD协议的、基于内存的而且目前比较流行的键值数据库(key-value database)，是一个非关系型数据库，redis提供将内存通过网络远程共享的一种服务，提供类似功能的还有memcache，但相比memcache，redis还提供了易扩展、高性能、具备数据持久性等功能。Redis在高并发、低延迟环境要求比较高的环境使用量非常广泛  </p><h3 id="2-1-2：redis对比memcached"><a href="#2-1-2：redis对比memcached" class="headerlink" title="2.1.2：redis对比memcached"></a>2.1.2：redis对比memcached</h3><p>支持数据的持久化：可以将内存中的数据保持在磁盘中，重启redis服务或者服务器之后可以从备份文件中恢复数据到内存继续使用。</p><p>支持更多的数据类型：支持string(字符串)、hash(哈希数据)、list(列表)、set(集合)、zet(有序集合)</p><p>支持数据的备份：可以实现类似于数据的master-slave模式的数据备份，另外也支持使用快照+AOF。</p><p>支持更大的value数据：memcache单个key value最大只支持1MB，而redis最大支持512MB。</p><p>Redis 是单线程，而memcache是多线程，所以单机情况下没有memcache并发高，但redis 支持分布式集群以实现更高的并发，单Redis实例可以实现数万并发。</p><p>支持集群横向扩展：基于redis cluster的横向扩展，可以实现分布式集群，大幅提升性能和数据安全性。</p><p>都是基于C语言开发。</p><h3 id="2-1-3：redis-典型应用场景"><a href="#2-1-3：redis-典型应用场景" class="headerlink" title="2.1.3：redis 典型应用场景"></a>2.1.3：redis 典型应用场景</h3><p>Session 共享：常见于web集群中的Tomcat或者PHP中多web服务器session共享</p><p>消息队列：ELK的日志缓存、部分业务的订阅发布系统</p><p>计数器：访问排行榜、商品浏览数等和次数相关的场景</p><p>缓存：数据查询、电商网站商品信息、新闻内容</p><p>微博/微信社交场合：共同好友、点赞评论等</p><h2 id="2-2：Redis安装及使用"><a href="#2-2：Redis安装及使用" class="headerlink" title="2.2：Redis安装及使用"></a>2.2：Redis安装及使用</h2><p>官方下载地址：<a href="http://download.redis.io/releases/" target="_blank" rel="noopener">http://download.redis.io/releases/</a></p><h3 id="2-2-1：yum安装redis"><a href="#2-2-1：yum安装redis" class="headerlink" title="2.2.1：yum安装redis"></a>2.2.1：yum安装redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#yum -y install redis</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#systemctl  start redis  端口号6379</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#systemctl  enable redis</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; info</span><br></pre></td></tr></table></figure><h3 id="2-2-2：编译安装redis"><a href="#2-2-2：编译安装redis" class="headerlink" title="2.2.2：编译安装redis"></a>2.2.2：编译安装redis</h3><p>下载当前最新release版本redis 源码包：</p><h4 id="2-2-2-1：编译安装命令"><a href="#2-2-2-1：编译安装命令" class="headerlink" title="2.2.2.1：编译安装命令"></a>2.2.2.1：编译安装命令</h4><p>官方的安装命令：</p><p><a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 src]<span class="comment">#pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/src</span><br><span class="line">[root@centos7 src]<span class="comment">#tar xf redis-5.0.3.tar.gz</span></span><br><span class="line">[root@centos7 src]<span class="comment">#cd redis-5.0.3</span></span><br><span class="line">[root@centos7 src]<span class="comment">#pwd</span></span><br><span class="line">/usr/<span class="built_in">local</span>/src/redis-5.0.3</span><br><span class="line">[root@centos7 redis-5.0.3]<span class="comment">#make PREFIX=/usr/local/redis [MALLOC=libc] install</span></span><br><span class="line">[root@centos7 redis-5.0.3]<span class="comment">#ll /usr/local/redis/</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 2 root root 134 Dec 27 11:28 bin</span><br><span class="line">[root@centos7 redis-5.0.3]<span class="comment">#mkdir  /usr/local/redis/etc</span></span><br><span class="line">[root@centos7 redis-5.0.3]<span class="comment">#cp redis.conf  /usr/local/redis/etc/</span></span><br></pre></td></tr></table></figure></p><h4 id="2-2-2-2：前台启动redis"><a href="#2-2-2-2：前台启动redis" class="headerlink" title="2.2.2.2：前台启动redis"></a>2.2.2.2：前台启动redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 redis-5.0.3]<span class="comment">#/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-3：解决当前的警告提示"><a href="#2-2-2-3：解决当前的警告提示" class="headerlink" title="2.2.2.3：解决当前的警告提示"></a>2.2.2.3：解决当前的警告提示</h4><h5 id="2-2-2-3-1：tcp-backlog"><a href="#2-2-2-3-1：tcp-backlog" class="headerlink" title="2.2.2.3.1：tcp-backlog"></a>2.2.2.3.1：tcp-backlog</h5><p>The backlog argument defines the maximum length to which the queue of pending connections for sockfd may grow. If a connection request arrives when the queue is full, the client may receive an error with an indication of ECONNREFUSED or, if the underlying protocol supports retransmission, the request may be ignored so that a later reattempt at connection succeeds.</p><p>backlog参数控制的是三次握手的时候server端收到client ack确认号之后的队列值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">  net.core.somaxconn = 512</span><br></pre></td></tr></table></figure></p><h5 id="2-2-2-3-2：vm-overcommit-memory"><a href="#2-2-2-3-2：vm-overcommit-memory" class="headerlink" title="2.2.2.3.2：vm.overcommit_memory"></a>2.2.2.3.2：vm.overcommit_memory</h5><p>​    0、表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。</p><p>​    1、表示内核允许分配所有的物理内存，而不管当前的内存状态如何。</p><p>​    2、表示内核允许分配超过所有物理内存和交换空间总和的内存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">  vm.overcommit_memory = 1</span><br></pre></td></tr></table></figure></p><h5 id="2-2-2-3-3：transparent-hugepage"><a href="#2-2-2-3-3：transparent-hugepage" class="headerlink" title="2.2.2.3.3：transparent hugepage"></a>2.2.2.3.3：transparent hugepage</h5><p>开启大页内存动态分配，需要关闭让redis 负责内存管理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br></pre></td></tr></table></figure></p><h4 id="2-2-2-4：编辑redis服务启动脚本"><a href="#2-2-2-4：编辑redis服务启动脚本" class="headerlink" title="2.2.2.4：编辑redis服务启动脚本"></a>2.2.2.4：编辑redis服务启动脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#vim /usr/lib/systemd/system/redis.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis persistent key-value database</span><br><span class="line">After=network.target</span><br><span class="line">After=network-online.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/etc/redis.conf  --supervised systemd</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span> </span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h4 id="2-2-2-5：创建redis-用户和数据目录"><a href="#2-2-2-5：创建redis-用户和数据目录" class="headerlink" title="2.2.2.5：创建redis 用户和数据目录"></a>2.2.2.5：创建redis 用户和数据目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#groupadd  -g 1000 redis &amp;&amp; useradd   -u 1000 -g 1000 redis -s /sbin/nologin</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#mkdir -pv /usr/local/redis/&#123;logs,data,run&#125;</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#chown redis.redis -R  /usr/local/redis/</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-6：创建命令软连接"><a href="#2-2-2-6：创建命令软连接" class="headerlink" title="2.2.2.6：创建命令软连接"></a>2.2.2.6：创建命令软连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ln -sv /usr/local/redis/bin/redis-* /usr/bin/</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-7：重启redis服务"><a href="#2-2-2-7：重启redis服务" class="headerlink" title="2.2.2.7：重启redis服务"></a>2.2.2.7：重启redis服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#systemctl restart redis</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-8：使用客户端连接redis"><a href="#2-2-2-8：使用客户端连接redis" class="headerlink" title="2.2.2.8：使用客户端连接redis"></a>2.2.2.8：使用客户端连接redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#/usr/local/redis/bin/redis-cli -h IP</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-9：编译安装后的命令"><a href="#2-2-2-9：编译安装后的命令" class="headerlink" title="2.2.2.9：编译安装后的命令"></a>2.2.2.9：编译安装后的命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@redis-s1 ~]<span class="comment"># ll /usr/local/redis/bin/</span></span><br><span class="line">total 32656</span><br><span class="line">-rwxr-xr-x 1 redis redis 4365488 Dec 13 09:21 redis-benchmark <span class="comment">#redis性能测试工具</span></span><br><span class="line">-rwxr-xr-x 1 redis redis 8088920 Dec 13 09:21 redis-check-aof <span class="comment">#AOF文件检查工具</span></span><br><span class="line">-rwxr-xr-x 1 redis redis 8088920 Dec 13 09:21 redis-check-rdb <span class="comment">#RDB文件检查工具</span></span><br><span class="line">-rwxr-xr-x 1 redis redis 4800752 Dec 13 09:21 redis-cli <span class="comment">#redis #客户端工具</span></span><br><span class="line">lrwxrwxrwx 1 redis redis   12 Dec 13 09:21 redis-sentinel -&gt; redis-server <span class="comment">#哨兵，软连接到server</span></span><br><span class="line">-rwxr-xr-x 1 redis redis 8088920 Dec 13 09:21  <span class="comment">#redis-server #redis 服务端</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3：连接到Redis"><a href="#2-2-3：连接到Redis" class="headerlink" title="2.2.3：连接到Redis"></a>2.2.3：连接到Redis</h3><p>主要分为运维人员的连接和程序的连接  </p><h4 id="2-2-3-1：本机非密码连接"><a href="#2-2-3-1：本机非密码连接" class="headerlink" title="2.2.3.1：本机非密码连接"></a>2.2.3.1：本机非密码连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><h4 id="2-2-3-2：跨主机非密码连接"><a href="#2-2-3-2：跨主机非密码连接" class="headerlink" title="2.2.3.2：跨主机非密码连接"></a>2.2.3.2：跨主机非密码连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli  -h HOSTNAME/IP  -p PORT</span><br></pre></td></tr></table></figure><h4 id="2-2-3-3：跨主机密码连接"><a href="#2-2-3-3：跨主机密码连接" class="headerlink" title="2.2.3.3：跨主机密码连接"></a>2.2.3.3：跨主机密码连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli  -h HOSTNAME/IP  -p PORT  -a  PASSWORD</span><br></pre></td></tr></table></figure><h4 id="2-2-3-4：python连接方式"><a href="#2-2-3-4：python连接方式" class="headerlink" title="2.2.3.4：python连接方式"></a>2.2.3.4：python连接方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env  python</span></span><br><span class="line"><span class="comment">#Author: ZhangJie</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">"192.168.7.101"</span>, port=<span class="number">6379</span>,password=<span class="string">""</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    r.set(<span class="string">"k%d"</span> % i,<span class="string">"v%d"</span> % i)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    data=r.get(<span class="string">"k%d"</span> % i)</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><h1 id="三：redis配置文件"><a href="#三：redis配置文件" class="headerlink" title="三：redis配置文件"></a>三：redis配置文件</h1><ul><li>基本配置项</li><li>网络配置项</li><li>持久化相关配置</li><li>复制相关的配置</li><li>安全相关配置</li><li>Limit相关的配置</li><li>SlowLog相关的配置</li><li>INCLUDES</li><li>Advanced配置</li></ul><h2 id="3-1：网络配置项"><a href="#3-1：网络配置项" class="headerlink" title="3.1：网络配置项"></a>3.1：网络配置项</h2><p><strong>bind 0.0.0.0</strong>        #监听地址，可以用空格隔开后多个监听IP</p><p><strong>protected-mode yes</strong>      #redis3.2 之后加入的新特性，在没有设置bind IP和密码的时候只允许访问127.0.0.1:6379</p><p><strong>port 6379</strong>     #监听端口</p><p><strong>tcp-backlog 511</strong>     #三次握手的时候server端收到client ack确认号之后的队列值。</p><p><strong>timeout 0</strong>     #客户端和Redis服务端的连接超时时间，默认是0，表示永不超时。 </p><p><strong>tcp-keepalive 300</strong>     #tcp 会话保持时间</p><h2 id="3-2：通用配置项"><a href="#3-2：通用配置项" class="headerlink" title="3.2：通用配置项"></a>3.2：通用配置项</h2><p><strong>daemonize no</strong>     #认情况下 redis 不是作为守护进程运行的，如果你想让它在后台运行，你就把它改成 yes,当redis作为守护进程运行的时候，它会写一个 pid 到 /var/run/redis.pid 文件里面</p><p><strong>supervised no</strong>     #和操作系统相关参数，可以设置通过upstart和systemd管理Redis守护进程，centos 7以后都使用systemd</p><p><strong>pidfile /var/run/redis_6379.pid</strong>        #pid文件路径</p><p><strong>loglevel notice</strong>     #日志级别</p><p><strong>logfile “”</strong>     #日志路径</p><p><strong>databases 16</strong>      #设置db 库数量，默认16个库</p><p><strong>always-show-logo yes</strong>     #在启动redis 时是否显示log</p><h2 id="3-3：快照配置项"><a href="#3-3：快照配置项" class="headerlink" title="3.3：快照配置项"></a>3.3：快照配置项</h2><p><strong>save 900 1</strong>     #在900秒内有一个键内容发生更改就出就快照机制</p><p><strong>save 300 10</strong></p><p><strong>save 60 10000</strong></p><p><strong>stop-writes-on-bgsave-error yes</strong>      #快照出错时是否禁止redis 写入操作</p><p><strong>rdbcompression yes</strong>     #持久化到RDB文件时，是否压缩，”yes”为压缩，”no”则反之</p><p><strong>rdbchecksum yes</strong>      #是否开启RC64校验，默认是开启</p><p><strong>dbfilename dump.rdb</strong>     #快照文件名</p><p><strong>dir ./</strong>     #快照文件保存路径​                                              </p><h2 id="3-4：复制相关的配置"><a href="#3-4：复制相关的配置" class="headerlink" title="3.4：复制相关的配置"></a>3.4：复制相关的配置</h2><p><strong>slave-serve-stale-data yes</strong>    #当从库同主库失去连接或者复制正在进行，从机库有两种运行方式：</p><ul><li>如果slave-serve-stale-data设置为yes(默认设置)，从库会继续响应客户端的请求;</li><li>如果slave-serve-stale-data设置为no，除去指定的命令之外的任何请求都会返回一个错误”SYNC with master in progress”。</li></ul><p><strong>slave-read-only yes</strong>    #是否设置从库只读</p><p><strong>repl-diskless-sync no</strong>    #是否使用socket方式复制数据，目前redis复制提供两种方式，disk和socket，如果新的slave连上来或者重连的slave无法部分同步，就会执行全量同步，master会生成rdb文件，有2种方式：</p><ol><li>disk方式是master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给slave </li><li><p>socket是master创建一个新的进程，直接把rdb文件以socket的方式发给slave，</p></li><li><p>disk方式的时候，当一个rdb保存的过程中，多个slave都能共享这个rdb文件，</p></li><li>socket的方式就是一个个slave顺序复制，只有在磁盘速度缓慢但是网络相对较快的情况下才使用socket方式，否则使用默认的disk方式</li></ol><p><strong>repl-diskless-sync-delay 5</strong>    #diskless复制的延迟时间，设置0为关闭，一旦复制开始还没有结束之前，master节点不会再接收新slave的复制请求，直到下一次开始</p><p><strong>repl-ping-slave-period 10</strong>        #slave根据master指定的时间进行周期性的PING 监测</p><p><strong>repl-timeout 60</strong>    #复制链接超时时间，需要大于repl-ping-slave-period，否则会经常报超时</p><p><strong>repl-disable-tcp-nodelay no</strong>     #在socket模式下是否在slave套接字发送SYNC之后禁用 TCP_NODELAY，</p><ul><li>如果你选择“yes”Redis将使用更少的TCP包和带宽来向slaves发送数据。但是这将使数据传输到slave上有延迟，Linux内核的默认配置会达到40毫秒;</li><li>如果你选择了 “no” 数据传输到salve的延迟将会减少但要使用更多的带宽</li></ul><p><strong>repl-backlog-size 1mb</strong>     #复制缓冲区大小，只有在slave连接之后才分配内存。 </p><p><strong>repl-backlog-ttl 3600</strong>        #多次时间master没有slave连接，就清空backlog缓冲区。</p><p><strong>slave-priority 100</strong>     #当master不可用，Sentinel会根据slave的优先级选举一个master。最低的优先级的slave，当选master。而配置成0，永远不会被选举。</p><h2 id="3-5：安全相关配置"><a href="#3-5：安全相关配置" class="headerlink" title="3.5：安全相关配置"></a>3.5：安全相关配置</h2><p><strong>requirepass foobared</strong>     #设置redis 连接密码</p><p><strong>rename-command</strong>     #重命名一些高危命令</p><h2 id="3-6：Limit相关的配置"><a href="#3-6：Limit相关的配置" class="headerlink" title="3.6：Limit相关的配置"></a>3.6：Limit相关的配置</h2><p><strong>maxclients 10000</strong>     #最大连接客户端</p><p><strong>maxmemory</strong>     #最大内存，单位为bytes字节，8G内存的计算方式<br>$$<br>8(G)<em>1024(MB)</em>1024(KB)*1024(Kbyte)<br>$$<br>需要注意的是slave的输出缓冲区是不计算在maxmemory内。</p><h2 id="3-7：APPEND-ONLY-MODE"><a href="#3-7：APPEND-ONLY-MODE" class="headerlink" title="3.7：APPEND ONLY MODE"></a>3.7：APPEND ONLY MODE</h2><p><strong>appendonly no</strong>     #是否开启AOF日志记录，默认 redis 使用的是 rdb 方式持久化，这种方式在许多应用中已经足够用了。但是 redis 如果中途宕机，会导致可能有几分钟的数据丢失，根据 save 来策略进行持久化，Append Only File 是另一种持久化方式，可以提供更好的持久化特性。Redis 会把每次写入的数据在接收后都写入 appendonly.aof  文件，每次启动时 Redis 都会先把这个文件的数据读入内存里，先忽略 RDB 文件。</p><p><strong>appendfilename “appendonly.aof”</strong>     #AOF文件名</p><p><strong>appendfsync everysec</strong>    #aof 持久化策略的配置；</p><ol><li>no 表示不执行fsync,由操作系统保证数据同步到磁盘；</li><li>always表示每次写入都执行fsync，以保证数据同步到磁盘；</li><li>everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</li></ol><p><strong>no-appendfsync-on-rewrite no</strong>         #在aof rewrite期间,是否对aof新记录的append暂缓使用文件同步策略,主要考虑磁盘IO开支和请求阻塞时间。默认为no,表示”不暂缓”,新的aof记录仍然会被立即同步，Linux的默认fsync策略是30秒，如果为yes 可能丢失30秒数据，但由于yes性能较好而且会避免出现阻塞因此比较推荐。</p><p><strong>auto-aof-rewrite-percentage 100</strong>     # 当Aof log增长超过指定比例时，重写log file， 设置为0表示不自动重写Aof 日志，重写是为了使aof体积保持最小，而确保保存最完整的数据。</p><p><strong>auto-aof-rewrite-min-size 64mb</strong>     #触发aof rewrite的最小文件尺寸</p><p><strong>aof-load-truncated yes</strong>     #是否加载由于其他原因导致的末尾异常的AOF文件(主进程被kill/断电等)</p><p><strong>aof-use-rdb-preamble yes</strong>    #redis4.0新增RDB-AOF混合持久化格式，在开启了这个功能之后，AOF重写产生的文件将同时包含RDB格式的内容和AOF格式的内容，其中RDB格式的内容用于记录已有的数据，而AOF格式的内存则用于记录最近发生了变化的数据，这样Redis就可以同时兼有RDB持久化和AOF持久化的优点（既能够快速地生成重写文件，也能够在出现问题时，快速地载入数据）。</p><h2 id="3-8：-LUA-SCRIPTING"><a href="#3-8：-LUA-SCRIPTING" class="headerlink" title="3.8： LUA SCRIPTING"></a>3.8： LUA SCRIPTING</h2><p><strong>lua-time-limit 5000</strong>     #lua脚本的最大执行时间，单位为毫秒</p><h2 id="3-9：-REDIS-CLUSTER"><a href="#3-9：-REDIS-CLUSTER" class="headerlink" title="3.9： REDIS CLUSTER"></a>3.9： REDIS CLUSTER</h2><p><strong>cluster-enabled yes</strong>     #是否开启集群模式，默认是单机模式</p><p><strong>cluster-config-file nodes-6379.conf</strong>        #由node节点自动生成和的集群配置文件</p><p><strong>cluster-node-timeout 15000</strong>     #集群中node节点连接超时时间</p><p><strong>cluster-replica-validity-factor 10</strong>     #在执行故障转移的时候可能有些节点和master断开一段时间数据比较旧，这些节点就不适用于选举为master，超过这个时间的就不会被进行故障转移</p><p><strong>cluster-migration-barrier 1</strong>      #一个主节点拥有的至少正常工作的从节点，即如果主节点的slave节点故障后会将多余的从节点分配到当前主节点成为其新的从节点。</p><p><strong>cluster-require-full-coverage yes</strong>     #集群槽位覆盖，如果一个主库宕机且没有备库就会出现集群槽位不全，那么yes情况下redis集群槽位验证不全就不再对外提供服务，而no则可以继续使用但是会出现查询数据查不到的情况(因为有数据丢失)。</p><p><strong>cluster-replica-no-failover no</strong></p><h2 id="3-10：-SLOW-LOG"><a href="#3-10：-SLOW-LOG" class="headerlink" title="3.10： SLOW LOG"></a>3.10： SLOW LOG</h2><p>&ensp;&ensp;&ensp;&ensp;Slow log 是 Redis 用来记录查询执行时间的日志系统，slow log 保存在内存里面，读写速度非常快，因此你可以放心地使用它，不必担心因为开启 slow log 而损害 Redis 的速度。</p><p><strong>slowlog-log-slower-than 10000</strong>     #以微秒为单位的慢日志记录，为负数会禁用慢日志，为0会记录每个命令操作。</p><p><strong>slowlog-max-len 128</strong>        #记录多少条慢日志保存在队列，超出后会删除最早的，以此滚动删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; slowlog len</span><br><span class="line"></span><br><span class="line">(integer) 14</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; slowlog get</span><br><span class="line"></span><br><span class="line">(integer) 14</span><br><span class="line"></span><br><span class="line">(integer) 1544690617</span><br><span class="line"></span><br><span class="line">(integer) 4</span><br><span class="line"></span><br><span class="line">&quot;slowlog&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SLOWLOG reset</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="3-2：redis持久化"><a href="#3-2：redis持久化" class="headerlink" title="3.2：redis持久化"></a>3.2：redis持久化</h2><p>&ensp;&ensp;&ensp;&ensp;redis 虽然是一个内存级别的缓存程序，即redis 是使用内存进行数据的缓存的，但是其可以将内存的数据按照一定的策略保存到硬盘上，从而实现数据持久保存的目的，redis支持两种不同方式的数据持久化保存机制，分别是RDB和AOF</p><h3 id="3-2-1：RDB模式"><a href="#3-2-1：RDB模式" class="headerlink" title="3.2.1：RDB模式"></a>3.2.1：RDB模式</h3><p>RDB：基于时间的快照，只保留当前最新的一次快照，特点是执行速度比较快，缺点是可能会丢失从上次快照到当前快照未完成之间的数据。</p><p>&ensp;&ensp;&ensp;&ensp;RDB实现的具体过程Redis从主进程先fork出一个子进程，使用写时复制机制，子进程将内存的数据保存为一个临时文件，比如dump.rdb.temp，当数据保存完成之后再将上一次保存的RDB文件替换掉，然后关闭子进程，这样可以保存每一次做RDB快照的时候保存的数据都是完整的，因为直接替换RDB文件的时候可能会出现突然断电等问题而导致RDB文件还没有保存完整就突然关机停止保存而导致数据丢失的情况，可以手动将每次生成的RDB文件进程备份，这样可以最大化保存历史数据。  </p><h3 id="3-2-2：RDB模式的优缺点"><a href="#3-2-2：RDB模式的优缺点" class="headerlink" title="3.2.2：RDB模式的优缺点"></a>3.2.2：RDB模式的优缺点</h3><p>优点：</p><ol><li>RDB快照保存了某个时间点的数据，可以通过脚本执行bgsave(非阻塞)或者save(阻塞)命令自定义时间点北备份，可以保留多个备份，当出现问题可以恢复到不同时间点的版本。  </li><li>可以最大化o的性能，因为父进程在保存RDB 文件的时候唯一要做的是fork出一个子进程，然后的-操作都会有这个子进程操作，父进程无需任何的IO操作  </li><li>RDB在大量数据比如几个G的数据，恢复的速度比AOF的快  </li></ol><p>缺点：</p><ol><li>不能时时的保存数据，会丢失自上一次执行RDB备份到当前的内存数据  </li><li>数据量非常大的时候，从父进程fork的时候需要一点时间，可能是毫秒或者秒  </li></ol><h3 id="3-2-3：AOF模式"><a href="#3-2-3：AOF模式" class="headerlink" title="3.2.3：AOF模式"></a>3.2.3：AOF模式</h3><p>AOF:按照操作顺序依次将操作添加到指定的日志文件当中，特点是数据安全性相对较高，缺点是即使有些操作是重复的也会全部记录。</p><p>&ensp;&ensp;&ensp;&ensp;AOF和RDB一样使用了写时复制机制，AOF默认为每秒钟fsync一次，即将执行的命令保存到AOF文件当中，这样即使redis服务器发生故障的话顶多也就丢失1秒钟之内的数据，也可以设置不同的fsync策略，或者设置每次执行命令的时候执行fsync，fsync会在后台执行线程，所以主线程可以继续处理用户的正常请求而不受到写入AOF文件的IO影响</p><h3 id="3-2-4：AOF模式优缺点"><a href="#3-2-4：AOF模式优缺点" class="headerlink" title="3.2.4：AOF模式优缺点"></a>3.2.4：AOF模式优缺点</h3><ol><li>AOF的文件大小要大于RDB格式的文件  </li><li>根据所使用的fsync策略(fsync是同步内存中redis所有已经修改的文件到存储设备)，默认是appendfsync everysec即每秒执行一次fsync</li></ol><h1 id="四：redis-数据类型"><a href="#四：redis-数据类型" class="headerlink" title="四：redis 数据类型"></a>四：redis 数据类型</h1><h2 id="4-1：字符串-string"><a href="#4-1：字符串-string" class="headerlink" title="4.1：字符串(string)"></a>4.1：字符串(string)</h2><p>&ensp;&ensp;&ensp;&ensp;字符串是所有编程语言中最常见的和最常用的数据类型，而且也是redis最基本的数据类型之一，而且redis中所有的key的类型都是字符串。  </p><h3 id="4-1-1：添加一个key"><a href="#4-1-1：添加一个key" class="headerlink" title="4.1.1：添加一个key"></a>4.1.1：添加一个key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 value1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> key1</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h3 id="4-1-2：获取一个key的内容"><a href="#4-1-2：获取一个key的内容" class="headerlink" title="4.1.2：获取一个key的内容"></a>4.1.2：获取一个key的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">"value1"</span></span><br></pre></td></tr></table></figure><h3 id="4-1-3：删除一个key"><a href="#4-1-3：删除一个key" class="headerlink" title="4.1.3：删除一个key"></a>4.1.3：删除一个key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; del key1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h3 id="4-1-4：批量设置多个key"><a href="#4-1-4：批量设置多个key" class="headerlink" title="4.1.4：批量设置多个key"></a>4.1.4：批量设置多个key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET key1 value1 key2 value2</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="4-1-5：批量获取多个key"><a href="#4-1-5：批量获取多个key" class="headerlink" title="4.1.5：批量获取多个key"></a>4.1.5：批量获取多个key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MSET key1 value1 key2 value2</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="4-1-6：追加数据"><a href="#4-1-6：追加数据" class="headerlink" title="4.1.6：追加数据"></a>4.1.6：追加数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; APPEND key1 append</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">"value1append"</span></span><br></pre></td></tr></table></figure><h3 id="4-1-7：数值递增"><a href="#4-1-7：数值递增" class="headerlink" title="4.1.7：数值递增"></a>4.1.7：数值递增</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> num 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; INCR num</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="string">"11"</span></span><br></pre></td></tr></table></figure><h3 id="4-1-8：数值递减"><a href="#4-1-8：数值递减" class="headerlink" title="4.1.8：数值递减"></a>4.1.8：数值递减</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> num 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decr num</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"><span class="string">"9"</span></span><br></pre></td></tr></table></figure><h3 id="4-1-9：返回字符串key长度"><a href="#4-1-9：返回字符串key长度" class="headerlink" title="4.1.9：返回字符串key长度"></a>4.1.9：返回字符串key长度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; strlen key1</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br></pre></td></tr></table></figure><h2 id="4-2：列表-list"><a href="#4-2：列表-list" class="headerlink" title="4.2：列表(list)"></a>4.2：列表(list)</h2><p>&ensp;&ensp;&ensp;&ensp;列表是一个双向可读写的管道，其头部是左侧尾部是右侧，一个列表最多可以包含2^32-1个元素即4294967295个元素。</p><h3 id="4-2-1：生成列表并插入数据"><a href="#4-2-1：生成列表并插入数据" class="headerlink" title="4.2.1：生成列表并插入数据"></a>4.2.1：生成列表并插入数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH list1 jack</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; TYPE list1</span><br><span class="line">list</span><br></pre></td></tr></table></figure><h3 id="4-2-2：向列表追加数据"><a href="#4-2-2：向列表追加数据" class="headerlink" title="4.2.2：向列表追加数据"></a>4.2.2：向列表追加数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH list1 tom</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; RPUSH list1 jack</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><h3 id="4-2-3：获取列表长度"><a href="#4-2-3：获取列表长度" class="headerlink" title="4.2.3：获取列表长度"></a>4.2.3：获取列表长度</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LLEN list1</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><h3 id="4-2-4：移除列表数据"><a href="#4-2-4：移除列表数据" class="headerlink" title="4.2.4：移除列表数据"></a>4.2.4：移除列表数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPOP list1 <span class="comment">#最后一个</span></span><br><span class="line"><span class="string">"jack"</span></span><br><span class="line">127.0.0.1:6379&gt; LPOP list1 <span class="comment">#第一个</span></span><br><span class="line"><span class="string">"tom"</span></span><br></pre></td></tr></table></figure><h2 id="4-3：集合-set"><a href="#4-3：集合-set" class="headerlink" title="4.3：集合(set)"></a>4.3：集合(set)</h2><p>&ensp;&ensp;&ensp;&ensp;Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><h3 id="4-3-1：生成集合key"><a href="#4-3-1：生成集合key" class="headerlink" title="4.3.1：生成集合key"></a>4.3.1：生成集合key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD set1 v1 </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SADD set2 v2 v4</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; TYPE set1</span><br><span class="line"><span class="built_in">set</span></span><br><span class="line">127.0.0.1:6379&gt; TYPE set2</span><br><span class="line"><span class="built_in">set</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2：追加数值"><a href="#4-3-2：追加数值" class="headerlink" title="4.3.2：追加数值"></a>4.3.2：追加数值</h3><p>追加的时候不能追加已经存在的数值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD set1 v2 v3 v4</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; SADD set1 v2 <span class="comment">#没有追加成功</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; TYPE set1</span><br><span class="line"><span class="built_in">set</span></span><br><span class="line">127.0.0.1:6379&gt; TYPE set2</span><br><span class="line"><span class="built_in">set</span></span><br></pre></td></tr></table></figure></p><h3 id="4-3-3：查看集合的所有数据"><a href="#4-3-3：查看集合的所有数据" class="headerlink" title="4.3.3：查看集合的所有数据"></a>4.3.3：查看集合的所有数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SMEMBERS set1</span><br><span class="line">1) <span class="string">"v4"</span></span><br><span class="line">2) <span class="string">"v1"</span></span><br><span class="line">3) <span class="string">"v3"</span></span><br><span class="line">4) <span class="string">"v2"</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS set2</span><br><span class="line">1) <span class="string">"v4"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br></pre></td></tr></table></figure><h3 id="4-2-4：获取集合的差集"><a href="#4-2-4：获取集合的差集" class="headerlink" title="4.2.4：获取集合的差集"></a>4.2.4：获取集合的差集</h3><p>差集：已属于A而不属于B的元素称为A与B的差（集）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SDIFF set1 set2</span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v3"</span></span><br></pre></td></tr></table></figure></p><h3 id="4-3-5：获取集合的交集"><a href="#4-3-5：获取集合的交集" class="headerlink" title="4.3.5：获取集合的交集"></a>4.3.5：获取集合的交集</h3><p>交集：已属于A且属于B的元素称为A与B的交（集）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SINTER set1 set2</span><br><span class="line">1) <span class="string">"v4"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br></pre></td></tr></table></figure></p><h3 id="4-3-6：获取集合的并集"><a href="#4-3-6：获取集合的并集" class="headerlink" title="4.3.6：获取集合的并集"></a>4.3.6：获取集合的并集</h3><p>并集：已属于A或属于B的元素为称为A与B的并（集）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUNION  set1 set2</span><br><span class="line">1) <span class="string">"v2"</span></span><br><span class="line">2) <span class="string">"v4"</span></span><br><span class="line">3) <span class="string">"v1"</span></span><br><span class="line">4) <span class="string">"v3"</span></span><br></pre></td></tr></table></figure></p><h2 id="4-4：sorted-set-有序集合"><a href="#4-4：sorted-set-有序集合" class="headerlink" title="4.4：sorted set(有序集合)"></a>4.4：sorted set(有序集合)</h2><p>&ensp;&ensp;&ensp;&ensp;Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员，不同的是每个元素都会关联一个double(双精度浮点型)类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序，序集合的成员是唯一的,但分数(score)却可以重复，集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)， 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p><h3 id="4-4-1：生成有序集合"><a href="#4-4-1：生成有序集合" class="headerlink" title="4.4.1：生成有序集合"></a>4.4.1：生成有序集合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD zset1 1 v1 </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD zset1 2 v2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD zset1 2 v3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZADD zset1 3 v4</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; TYPE zset1</span><br><span class="line">zset</span><br><span class="line">127.0.0.1:6379&gt; TYPE zset2</span><br><span class="line">none</span><br></pre></td></tr></table></figure><p>排行案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">192.168.7.104:6379&gt; ZADD paihangbang 10 key1 20 key2 30 key3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">192.168.7.104:6379&gt; ZREVRANGE paihangbang 0 -1 withscores</span><br><span class="line">1) <span class="string">"key3"</span></span><br><span class="line">2) <span class="string">"30"</span></span><br><span class="line">3) <span class="string">"key2"</span></span><br><span class="line">4) <span class="string">"20"</span></span><br><span class="line">5) <span class="string">"key1"</span></span><br><span class="line">6) <span class="string">"10"</span></span><br></pre></td></tr></table></figure><h3 id="4-4-2：批量添加多个数值"><a href="#4-4-2：批量添加多个数值" class="headerlink" title="4.4.2：批量添加多个数值"></a>4.4.2：批量添加多个数值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZADD zset2 1 v1 2 v2 4 v3 5 v5</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><h3 id="4-4-3：获取集合的长度数"><a href="#4-4-3：获取集合的长度数" class="headerlink" title="4.4.3：获取集合的长度数"></a>4.4.3：获取集合的长度数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZCARD zset1 </span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; ZCARD zset2</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure><h3 id="4-4-4：基于索引返回数值"><a href="#4-4-4：基于索引返回数值" class="headerlink" title="4.4.4：基于索引返回数值"></a>4.4.4：基于索引返回数值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 1 3</span><br><span class="line">1) <span class="string">"v2"</span></span><br><span class="line">2) <span class="string">"v3"</span></span><br><span class="line">3) <span class="string">"v4"</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGE zset1 0 2</span><br><span class="line">1) <span class="string">"v1"</span></span><br><span class="line">2) <span class="string">"v2"</span></span><br><span class="line">3) <span class="string">"v3"</span></span><br></pre></td></tr></table></figure><h3 id="4-4-5：返回某个数值的索引"><a href="#4-4-5：返回某个数值的索引" class="headerlink" title="4.4.5：返回某个数值的索引"></a>4.4.5：返回某个数值的索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; ZRANK zset1 v2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ZRANK zset1 v3</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure><h2 id="4-5：哈希-hash"><a href="#4-5：哈希-hash" class="headerlink" title="4.5：哈希(hash)"></a>4.5：哈希(hash)</h2><p>&ensp;&ensp;&ensp;&ensp;hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象,Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。</p><h3 id="4-5-1：生成hash-key"><a href="#4-5-1：生成hash-key" class="headerlink" title="4.5.1：生成hash key"></a>4.5.1：生成hash key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET hset1 name tom </span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET hset1 age 18</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">或者127.0.0.1:6379&gt; HMSET hset1 name tom age 18</span><br><span class="line">127.0.0.1:6379&gt; TYPE hset1</span><br><span class="line"><span class="built_in">hash</span></span><br></pre></td></tr></table></figure><h3 id="4-5-2：获取hash-key字段值"><a href="#4-5-2：获取hash-key字段值" class="headerlink" title="4.5.2：获取hash key字段值"></a>4.5.2：获取hash key字段值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGET hset1 name</span><br><span class="line"><span class="string">"tom"</span></span><br><span class="line">127.0.0.1:6379&gt; HGET hset1  age</span><br><span class="line"><span class="string">"18"</span></span><br></pre></td></tr></table></figure><h3 id="4-5-3：删除一个hash-key的字段"><a href="#4-5-3：删除一个hash-key的字段" class="headerlink" title="4.5.3：删除一个hash key的字段"></a>4.5.3：删除一个hash key的字段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HDEL hset1 age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h3 id="4-5-4：获取所有hash表中的字段"><a href="#4-5-4：获取所有hash表中的字段" class="headerlink" title="4.5.4：获取所有hash表中的字段"></a>4.5.4：获取所有hash表中的字段</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET hset1 name tom age 19</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HKEYS hset1</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"age"</span></span><br></pre></td></tr></table></figure><h1 id="五：消息队列"><a href="#五：消息队列" class="headerlink" title="五：消息队列"></a>五：消息队列</h1><p>&ensp;&ensp;&ensp;&ensp;消息队列主要分为两种，分别是生产者消费者模式和发布者订阅者模式，这两种模式Redis都支持。</p><h2 id="5-1：生产者消费者模式"><a href="#5-1：生产者消费者模式" class="headerlink" title="5.1：生产者消费者模式"></a>5.1：生产者消费者模式</h2><p>&ensp;&ensp;&ensp;&ensp;在生产者消费者(Producer/Consumer)模式下，上层应用接收到的外部请求后开始处理其当前步骤的操作，在执行完成后将已经完成的操作发送至指定的频道(channel)当中，并由其下层的应用监听该频道并继续下一步的操作，如果其处理完成后没有下一步的操作就直接返回数据给外部请求，如果还有下一步的操作就再将任务发布到另外一个频道，由另外一个消费者继续监听和处理。</p><h3 id="5-1-1：模式介绍"><a href="#5-1-1：模式介绍" class="headerlink" title="5.1.1：模式介绍"></a>5.1.1：模式介绍</h3><p>&ensp;&ensp;&ensp;&ensp;生产者消费者模式下，多个消费者同时监听一个队里，但是一个消息只能被最先抢到消息的消费者消费，即消息任务是一次性读取和处理，此模式在分布式业务架构中非常常用，比较常用的软件还有RabbitMQ、Kafka、RocketMQ、ActiveMQ等  </p><h3 id="5-1-2：队列介绍"><a href="#5-1-2：队列介绍" class="headerlink" title="5.1.2：队列介绍"></a>5.1.2：队列介绍</h3><p>&ensp;&ensp;&ensp;&ensp;队列当中的 消息由不同的生产者写入也会有不同的消费者取出进行消费处理，但是买一个消息一定是只能被取出一次也就是被消费一次。  </p><h3 id="5-1-3：生产者发布消息"><a href="#5-1-3：生产者发布消息" class="headerlink" title="5.1.3：生产者发布消息"></a>5.1.3：生产者发布消息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; AUTH 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LPUSH channel1 msg1 <span class="comment">#从管道的左侧写入</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH channel1 msg2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH channel1 msg3</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LPUSH channel1 msg4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LPUSH channel1 msg5</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure><h3 id="5-1-4：查看队列所有消息"><a href="#5-1-4：查看队列所有消息" class="headerlink" title="5.1.4：查看队列所有消息"></a>5.1.4：查看队列所有消息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE channel1  0  -1</span><br><span class="line">1) <span class="string">"msg5"</span></span><br><span class="line">2) <span class="string">"msg4"</span></span><br><span class="line">3) <span class="string">"msg3"</span></span><br><span class="line">4) <span class="string">"msg2"</span></span><br><span class="line">5) <span class="string">"msg1"</span></span><br></pre></td></tr></table></figure><h3 id="5-1-5：消费者消费消息"><a href="#5-1-5：消费者消费消息" class="headerlink" title="5.1.5：消费者消费消息"></a>5.1.5：消费者消费消息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; RPOP channel1 <span class="comment">#从管道的右侧消费</span></span><br><span class="line"><span class="string">"msg1"</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP channel1</span><br><span class="line"><span class="string">"msg2"</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP channel1</span><br><span class="line"><span class="string">"msg3"</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP channel1</span><br><span class="line"><span class="string">"msg4"</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP channel1</span><br><span class="line"><span class="string">"msg5"</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP channel1</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure><h3 id="5-1-6：再次验证队列消息"><a href="#5-1-6：再次验证队列消息" class="headerlink" title="5.1.6：再次验证队列消息"></a>5.1.6：再次验证队列消息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;  LRANGE channel1  0  -1 </span><br><span class="line">(empty list or <span class="built_in">set</span>)  <span class="comment">#队列中的消息已经被已全部消费完毕</span></span><br></pre></td></tr></table></figure><h2 id="5-2：发布者订阅模式"><a href="#5-2：发布者订阅模式" class="headerlink" title="5.2：发布者订阅模式"></a>5.2：发布者订阅模式</h2><h3 id="5-2-1：模式简介"><a href="#5-2-1：模式简介" class="headerlink" title="5.2.1：模式简介"></a>5.2.1：模式简介</h3><p>&ensp;&ensp;&ensp;&ensp;在发布者订阅者模式下，发布者将消息发布到指定的channel里面，凡是监听该channel的消费者都会收到同样的一份消息，这种模式类似于是收音机模式，即凡是收听某个频道的听众都会收到主持人发布的相同的消息内容。</p><p>此模式常用语群聊天、群通知、群公告等场景。</p><p>Subscriber：订阅者</p><p>Publisher：发布者</p><p>Channel：频道</p><h3 id="5-2-2：订阅者监听频道"><a href="#5-2-2：订阅者监听频道" class="headerlink" title="5.2.2：订阅者监听频道"></a>5.2.2：订阅者监听频道</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment"># redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; AUTH 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE channel1  <span class="comment">#订阅者订阅指定的频道</span></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">"subscribe"</span></span><br><span class="line">2) <span class="string">"channel1"</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h3 id="5-2-3：发布者发布消息"><a href="#5-2-3：发布者发布消息" class="headerlink" title="5.2.3：发布者发布消息"></a>5.2.3：发布者发布消息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH channel1 test1 <span class="comment">#发布者发布消息</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH channel1 test2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2-4：订阅多个频道"><a href="#5-2-4：订阅多个频道" class="headerlink" title="5.2.4：订阅多个频道"></a>5.2.4：订阅多个频道</h3><p>订阅指定的多个频道</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSCRIBE channel1 channel2</span><br></pre></td></tr></table></figure><h3 id="5-2-5：订阅所有频道"><a href="#5-2-5：订阅所有频道" class="headerlink" title="5.2.5：订阅所有频道"></a>5.2.5：订阅所有频道</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE *</span><br></pre></td></tr></table></figure><h3 id="5-2-6：订阅匹配的频道"><a href="#5-2-6：订阅匹配的频道" class="headerlink" title="5.2.6：订阅匹配的频道"></a>5.2.6：订阅匹配的频道</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PSUBSCRIBE chann* <span class="comment">#匹配订阅多个频道</span></span><br></pre></td></tr></table></figure><h1 id="六：redis其他命令"><a href="#六：redis其他命令" class="headerlink" title="六：redis其他命令"></a>六：redis其他命令</h1><h2 id="6-1：查看当前redis配置、以及不重启更改redis配置等"><a href="#6-1：查看当前redis配置、以及不重启更改redis配置等" class="headerlink" title="6.1：查看当前redis配置、以及不重启更改redis配置等"></a>6.1：查看当前redis配置、以及不重启更改redis配置等</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG GET *</span><br></pre></td></tr></table></figure><h3 id="6-1-1：更改最大内存"><a href="#6-1-1：更改最大内存" class="headerlink" title="6.1.1：更改最大内存"></a>6.1.1：更改最大内存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CONFIG <span class="built_in">set</span> maxmemory 8589934592</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CONFIG get maxmemory </span><br><span class="line">1) <span class="string">"maxmemory"</span></span><br><span class="line">2) <span class="string">"8589934592"</span></span><br></pre></td></tr></table></figure><h3 id="6-1-2：设置连接密码（临时有效）"><a href="#6-1-2：设置连接密码（临时有效）" class="headerlink" title="6.1.2：设置连接密码（临时有效）"></a>6.1.2：设置连接密码（临时有效）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; [root@centos7 ~]<span class="comment">#redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; CONFIG SET requirepass 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CONFIG GET requirepass</span><br><span class="line">(error) NOAUTH Authentication requirepass.</span><br><span class="line">127.0.0.1:6379&gt; AUTH 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CONFIG GET requirepass</span><br><span class="line">1) <span class="string">"requirepass"</span></span><br><span class="line">2) <span class="string">"123456"</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="6-2：显示当前节点redis运行状态信息"><a href="#6-2：显示当前节点redis运行状态信息" class="headerlink" title="6.2：显示当前节点redis运行状态信息"></a>6.2：显示当前节点redis运行状态信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info</span><br></pre></td></tr></table></figure><h2 id="6-3：切换数据库"><a href="#6-3：切换数据库" class="headerlink" title="6.3：切换数据库"></a>6.3：切换数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SELECT 1</span><br><span class="line">ok</span><br><span class="line">127.0.0.1:6379[1]&gt;</span><br></pre></td></tr></table></figure><h2 id="6-4：查看当前库下的所有key"><a href="#6-4：查看当前库下的所有key" class="headerlink" title="6.4：查看当前库下的所有key"></a>6.4：查看当前库下的所有key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br></pre></td></tr></table></figure><h2 id="6-5：手动在后台执行RDB持久化操作"><a href="#6-5：手动在后台执行RDB持久化操作" class="headerlink" title="6.5：手动在后台执行RDB持久化操作"></a>6.5：手动在后台执行RDB持久化操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;BGSAVE</span><br></pre></td></tr></table></figure><h2 id="6-6：返回当前库下的所有key-数量"><a href="#6-6：返回当前库下的所有key-数量" class="headerlink" title="6.6：返回当前库下的所有key 数量"></a>6.6：返回当前库下的所有key 数量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;DBSIZE</span><br></pre></td></tr></table></figure><h2 id="6-7：清空当前数据库"><a href="#6-7：清空当前数据库" class="headerlink" title="6.7：清空当前数据库"></a>6.7：清空当前数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;FLUSHDB</span><br></pre></td></tr></table></figure><h2 id="6-8：清空所有数据库"><a href="#6-8：清空所有数据库" class="headerlink" title="6.8：清空所有数据库"></a>6.8：清空所有数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;FLUSHALL</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;一：缓存概念&quot;&gt;&lt;a href=&quot;#一：缓存概念&quot; class=&quot;
      
    
    </summary>
    
      <category term="nosql" scheme="http://yoursite.com/categories/nosql/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis高可用与集群</title>
    <link href="http://yoursite.com/2019/01/14/redis%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%8E%E9%9B%86%E7%BE%A4/"/>
    <id>http://yoursite.com/2019/01/14/redis高可用与集群/</id>
    <published>2019-01-13T16:00:00.000Z</published>
    <updated>2019-01-26T02:29:20.186Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一：redis-高可用与集群"><a href="#一：redis-高可用与集群" class="headerlink" title="一：redis 高可用与集群"></a>一：redis 高可用与集群</h1><p>&ensp;&ensp;&ensp;&ensp;虽然Redis可以实现单机的数据持久化，但无论是RDB也好或者AOF也好，都解决不了单点宕机问题，即一旦redis服务器本身出现系统故障、硬件故障等问题后，就会直接造成数据的丢失，因此需要使用另外的技术来解决单点问题。</p><h2 id="1：配置reids-主从"><a href="#1：配置reids-主从" class="headerlink" title="1：配置reids 主从"></a>1：配置reids 主从</h2><p>主备模式，可以实现Redis数据的跨主机备份。</p><p>&ensp;&ensp;&ensp;&ensp;程序端连接到高可用负载的VIP，然后连接到负载服务器设置的Redis后端real server，此模式不需要在程序里面配置Redis服务器的真实IP地址，当后期Redis服务器IP地址发生变更只需要更改redis 相应的后端real server即可，可避免更改程序中的IP地址设置。</p><h3 id="1-1：Slave主要配置"><a href="#1-1：Slave主要配置" class="headerlink" title="1.1：Slave主要配置"></a>1.1：Slave主要配置</h3><p>&ensp;&ensp;&ensp;&ensp;Redis Slave 也要开启持久化并设置和master同样的连接密码，因为后期slave会有提升为master的可能,Slave端切换master同步后会丢失之前的所有数据。</p><p>一旦某个Slave成为一个master的slave，Redis Slave服务会清空当前redis服务器上的所有数据并将master的数据导入到自己的内存，但是断开同步关系后不会删除当前已经同步过的数据。</p><h3 id="1-1-1：Slave的配置的两种方法"><a href="#1-1-1：Slave的配置的两种方法" class="headerlink" title="1.1.1：Slave的配置的两种方法"></a>1.1.1：Slave的配置的两种方法</h3><h4 id="1-1-1-1：修改配置文件"><a href="#1-1-1-1：修改配置文件" class="headerlink" title="1.1.1.1：修改配置文件"></a>1.1.1.1：修改配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@slave-redis ~]<span class="comment">#vim /etc/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">requirepass 123456<span class="comment">#可以给加上密码</span></span><br><span class="line">slaveof 192.168.183.155 6379</span><br><span class="line">masterauth 123456</span><br><span class="line"><span class="comment">#主要改上面四项</span></span><br><span class="line">slave-read-only yes</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">[root@slave-redis ~]<span class="comment">#systemctl restart redis</span></span><br></pre></td></tr></table></figure><h4 id="1-1-1-2：命令行配置"><a href="#1-1-1-2：命令行配置" class="headerlink" title="1.1.1.2：命令行配置"></a>1.1.1.2：命令行配置</h4><p>当前状态为master，需要转换为slave角色并指向master服务器的IP+PORT+Password<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@slave-redis ~]<span class="comment">#redic-cli</span></span><br><span class="line">127.0.0.1:6379&gt; SLAVEOF 192.168.183.155 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CONFIG SET masterauth 123456</span><br><span class="line">OK</span><br><span class="line"><span class="comment">#上面是临时生效</span></span><br></pre></td></tr></table></figure></p><h3 id="1-1-2：同步日志"><a href="#1-1-2：同步日志" class="headerlink" title="1.1.2：同步日志"></a>1.1.2：同步日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@slave-redis ~]<span class="comment">#tail /var/log/redis/redis.log </span></span><br><span class="line">4362:S 13 Jan 11:03:05.824 * Connecting to MASTER 192.168.183.155:6379</span><br><span class="line">4362:S 13 Jan 11:03:05.824 * MASTER &lt;-&gt; SLAVE sync started</span><br><span class="line">4362:S 13 Jan 11:03:05.825 * Non blocking connect <span class="keyword">for</span> SYNC fired the event.</span><br><span class="line">4362:S 13 Jan 11:03:05.826 * Master replied to PING, replication can <span class="built_in">continue</span>...</span><br><span class="line">4362:S 13 Jan 11:03:05.838 * Partial resynchronization not possible (no cached master)</span><br><span class="line">4362:S 13 Jan 11:03:05.965 * Full resync from master: 50d58c28d9314edbf815581709bbe1aca05347fe:1</span><br><span class="line">4362:S 13 Jan 11:03:05.965 * MASTER &lt;-&gt; SLAVE sync: receiving 102 bytes from master</span><br><span class="line">4362:S 13 Jan 11:03:05.965 * MASTER &lt;-&gt; SLAVE sync: Flushing old data</span><br><span class="line">4362:S 13 Jan 11:03:05.966 * MASTER &lt;-&gt; SLAVE sync: Loading DB <span class="keyword">in</span> memory</span><br><span class="line">4362:S 13 Jan 11:03:05.966 * MASTER &lt;-&gt; SLAVE sync: Finished with success</span><br></pre></td></tr></table></figure><h3 id="1-1-3：当前slave状态"><a href="#1-1-3：当前slave状态" class="headerlink" title="1.1.3：当前slave状态"></a>1.1.3：当前slave状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info Replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.183.155</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:8</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:715</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><h3 id="1-1-4：存配置到redis-conf："><a href="#1-1-4：存配置到redis-conf：" class="headerlink" title="1.1.4：存配置到redis.conf："></a>1.1.4：存配置到redis.conf：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config rewrite</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line">[root@slave-redis ~]<span class="comment">#tail /etc/redis.conf </span></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line"><span class="comment"># When a child rewrites the AOF file, if the following option is enabled</span></span><br><span class="line"><span class="comment"># the file will be fsync-ed every 32 MB of data generated. This is useful</span></span><br><span class="line"><span class="comment"># in order to commit the file to the disk more incrementally and avoid</span></span><br><span class="line"><span class="comment"># big latency spikes.</span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"><span class="comment"># Generated by CONFIG REWRITE</span></span><br><span class="line">slaveof 192.168.183.155 6379</span><br><span class="line">masterauth <span class="string">"123456"</span></span><br></pre></td></tr></table></figure><h4 id="1-1-5：重启slave验证"><a href="#1-1-5：重启slave验证" class="headerlink" title="1.1.5：重启slave验证"></a>1.1.5：重启slave验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@slave-redis ~]<span class="comment">#systemctl restart redis</span></span><br><span class="line">[root@slave-redis ~]<span class="comment">#redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.183.155</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:7</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:1989</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><h4 id="1-1-6：验证slave数据"><a href="#1-1-6：验证slave数据" class="headerlink" title="1.1.6：验证slave数据"></a>1.1.6：验证slave数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"key1"</span></span><br><span class="line">2) <span class="string">"key"</span></span><br></pre></td></tr></table></figure><h4 id="1-1-7：slave-状态只读无法写入数据"><a href="#1-1-7：slave-状态只读无法写入数据" class="headerlink" title="1.1.7：slave 状态只读无法写入数据"></a>1.1.7：slave 状态只读无法写入数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 value1</span><br><span class="line">(error) READONLY You can<span class="string">'t write against a read only slave.</span></span><br></pre></td></tr></table></figure><h4 id="1-1-8：Master日志"><a href="#1-1-8：Master日志" class="headerlink" title="1.1.8：Master日志"></a>1.1.8：Master日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#tail /var/log/redis/redis.log </span></span><br><span class="line">61981:M 13 Jan 11:03:05.913 * Synchronization with slave 192.168.183.154:6379 succeeded</span><br><span class="line">61981:M 13 Jan 11:20:32.391 <span class="comment"># Connection with slave 192.168.183.154:6379 lost.</span></span><br><span class="line">61981:M 13 Jan 11:20:32.406 * Slave 192.168.183.154:6379 asks <span class="keyword">for</span> synchronization</span><br><span class="line">61981:M 13 Jan 11:20:32.406 * Full resync requested by slave 192.168.183.154:6379</span><br><span class="line">61981:M 13 Jan 11:20:32.406 * Starting BGSAVE <span class="keyword">for</span> SYNC with target: disk</span><br><span class="line">61981:M 13 Jan 11:20:32.408 * Background saving started by pid 64640</span><br><span class="line">64640:C 13 Jan 11:20:32.410 * DB saved on disk</span><br><span class="line">64640:C 13 Jan 11:20:32.410 * RDB: 4 MB of memory used by copy-on-write</span><br><span class="line">61981:M 13 Jan 11:20:32.480 * Background saving terminated with success</span><br><span class="line">61981:M 13 Jan 11:20:32.480 * Synchronization with slave 192.168.183.154:6379 succeeded</span><br></pre></td></tr></table></figure><h4 id="1-1-9：主从复制过程"><a href="#1-1-9：主从复制过程" class="headerlink" title="1.1.9：主从复制过程"></a>1.1.9：主从复制过程</h4><p>&ensp;&ensp;&ensp;&ensp;Redis支持主从复制分为全量同步和增量同步，首次同步是全量同步，主从同步可以让从服务器从主服务器备份数据，而且从服务器还可与有从服务器，即另外一台redis服务器可以从一台从服务器进行数据同步，redis 的主从同步是非阻塞的，其收到从服务器的sync(2.8版本之前是PSYNC)命令会fork一个子进程在后台执行bgsave命令，并将新写入的数据写入到一个缓冲区里面，bgsave执行完成之后并生成的将RDB文件发送给客户端，客户端将收到后的RDB文件载入自己的内存，然后主redis将缓冲区的内容在全部发送给从redis，之后的同步从服务器会发送一个offset的位置(等同于MySQL的binlog的位置)给主服务器，主服务器检查后位置没有错误将此位置之后的数据包括写在缓冲区的积压数据发送给redis从服务器，从服务器将主服务器发送的挤压数据写入内存，这样一次完整的数据同步，再之后再同步的时候从服务器只要发送当前的offset位 置给主服务器，然后主服务器根据响应的位置将之后的数据发送给从服务器保存到其内存即可。</p><p>Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份。具体步骤如下： </p><p>1）从服务器连接主服务器，发送SYNC命令； </p><p>2）主服务器接收到SYNC命名后，开始执行BGSAVE命令生成RDB快照文件并使用缓冲区记录此后执行的所有写命令； </p><p>3）主服务器BGSAVE执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令； </p><p>4）从服务器收到快照文件后丢弃所有旧数据，载入收到的快照； </p><p>5）主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令； </p><p>6）从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</p><p>7）后期同步会先发送自己slave_repl_offset位置，只同步新增加的数据，不再全量同步。</p><h4 id="1-1-10：主从同步优化"><a href="#1-1-10：主从同步优化" class="headerlink" title="1.1.10：主从同步优化"></a>1.1.10：主从同步优化</h4><p>&ensp;&ensp;&ensp;&ensp;Redis在2.8版本之前没有提供增量部分复制的功能，当网络闪断或者slave Redis重启之后会导致主从之间的全量同步，即从2.8版本开始增加了部分复制的功能。</p><p><strong>repl-diskless-sync  no</strong>     #yes为支持disk，master将RDB文件先保存到磁盘在发送给slave，no为maste直接将RDB文件发送给slave，默认即为使用no，Master RDB文件不需要与磁盘交互。</p><p><strong>repl-diskless-sync-delay 5</strong>     #Master准备好RDB文件后等等待传输时间</p><p><strong>repl-ping-slave-period 10</strong>        #slave端向server端发送pings的时间区间设置，默认为10秒 </p><p><strong>repl-timeout 60</strong>        #设置超时时间</p><p><strong>repl-disable-tcp-nodelay no</strong> #是否启用TCP_NODELAY，如设置成yes，则redis会合并小的TCP包从而节省带宽，但会增加同步延迟（40ms），造成master与slave数据不一致，假如设置成no，则redis master会立即发送同步数据，没有延迟，前者关注性能，后者关注一致性</p><p><strong>repl-backlog-size 1mb</strong>      #master的写入数据缓冲区，用于记录自上一次同步后到下一次同步过程中间的写入命令，计算公式：b repl-backlog-size = 允许从节点最大中断时长 <em> 主实例offset每秒写入量，比如master每秒最大写入64mb，最大允许60秒，那么就要设置为64mb</em>60秒=3840mb(3.8G)=</p><p><strong>repl-backlog-ttl 3600</strong>     #如果一段时间后没有slave连接到master，则backlog size的内存将会被释放。如果值为0则表示永远不释放这部份内存。 </p><p><strong>slave-priority 100</strong>     #slave端的优先级设置，值是一个整数，数字越小表示优先级越高。当master故障时将会按照优先级来选择slave端进行恢复，如果值设置为0，则表示该slave永远不会被选择。 </p><p><strong>min-slaves-to-write 0</strong>     # </p><p><strong>min-slaves-max-lag 10</strong> #设置当一个master端的可用slave少于N个，延迟时间大于M秒时，不接收写操作。</p><p>Master的重启会导致master_replid发生变化，slave之前的master_replid就和master不一致从而会引发所有slave的全量同步。</p><h4 id="1-1-11：slave切换master"><a href="#1-1-11：slave切换master" class="headerlink" title="1.1.11：slave切换master"></a>1.1.11：slave切换master</h4><h5 id="当前状态："><a href="#当前状态：" class="headerlink" title="当前状态："></a>当前状态：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info Replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.183.155</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:7</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:4694</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:0</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><h5 id="停止slave同步并查看当前状态："><a href="#停止slave同步并查看当前状态：" class="headerlink" title="停止slave同步并查看当前状态："></a>停止slave同步并查看当前状态：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SLAVEOF no one<span class="comment">#临时生效</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_repl_offset:5184</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><h5 id="测试能否写入数据："><a href="#测试能否写入数据：" class="headerlink" title="测试能否写入数据："></a>测试能否写入数据：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key3 value3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>#### </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二：redis-集群"><a href="#二：redis-集群" class="headerlink" title="二：redis 集群"></a>二：redis 集群</h2><p>&ensp;&ensp;&ensp;&ensp;上一个步骤的主从架构无法实现master和slave角色的自动切换，即当master出现redis服务异常、主机断电、磁盘损坏等问题导致master无法使用，而redis高可用无法实现自故障转移(将slave提升为master)，需要手动改环境配置才能切换到slave redis服务器，另外也无法横向扩展Redis服务的并行写入性能，当单台Redis服务器性能无法满足业务写入需求的时候就必须需要一种方式解决以上的两个核心问题，即：</p><p>1.master和slave角色的无缝切换，让业务无感知从而不影响业务使用 ；</p><p>2.可以横向动态扩展Redis服务器，从而实现多台服务器并行写入以实现更高并发的目的。</p><p>Redis 集群实现方式：客户端分片  代理分片  Redis Cluster</p><h3 id="2-1：Sentinel-哨兵"><a href="#2-1：Sentinel-哨兵" class="headerlink" title="2.1：Sentinel(哨兵)"></a>2.1：Sentinel(哨兵)</h3><p>&ensp;&ensp;&ensp;&ensp;Sentinel 进程是用于监控redis集群中Master主服务器工作的状态，在Master主服务器发生故障的时候，可以实现Master和Slave服务器的切换，保证系统的高可用，其已经被集成在redis2.6+的版本中，Redis的哨兵模式到了2.8版本之后就稳定了下来。一般在生产环境也建议使用Redis的2.8版本的以后版本。哨兵(Sentinel) 是一个分布式系统，你可以在一个架构中运行多个哨兵(sentinel) 进程，这些进程使用流言协议(gossipprotocols)来接收关于Master主服务器是否下线的信息，并使用投票协议(Agreement Protocols)来决定是否执行自动故障迁移,以及选择哪个Slave作为新的Master。</p><p>&ensp;&ensp;&ensp;&ensp;每个哨兵(Sentinel)进程会向其它哨兵(Sentinel)、Master、Slave定时发送消息，以确认对方是否”活”着，如果发现对方在指定配置时间(可配置的)内未得到回应，则暂时认为对方已掉线，也就是所谓的”主观认为宕机” ，英文名称：Subjective Down，简称SDOWN。</p><p>&ensp;&ensp;&ensp;&ensp;当“哨兵群”中的多数Sentinel进程在对Master主服务器做出 SDOWN 的判断，并且通过 SENTINEL is-master-down-by-addr 命令互相交流之后，得出的Master Server下线判断，这种方式就是“客观宕机”，英文名称是：Objectively Down， 简称 ODOWN。</p><p>&ensp;&ensp;&ensp;&ensp;通过一定的vote算法，从剩下的slave从服务器节点中，选一台提升为Master服务器节点，然后自动修改相关配置，并开启故障转移（failover）。</p><p>  Sentinel 机制可以解决master和slave角色的切换问题。</p><h3 id="2-1-1：配置redis主从服务器"><a href="#2-1-1：配置redis主从服务器" class="headerlink" title="2.1.1：配置redis主从服务器"></a>2.1.1：配置redis主从服务器</h3><h4 id="2-1-1-1：手动配置master"><a href="#2-1-1-1：手动配置master" class="headerlink" title="2.1.1.1：手动配置master"></a>2.1.1.1：手动配置master</h4><p>需要手动先指定某一台Redis服务器为master，然后将其他slave服务器使用命令配置为master服务器的slave</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#vim /etc/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">requirepass 123456</span><br><span class="line">[root@master-redis ~]<span class="comment">#systemctl restart redis</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1-2：服务器A配置slave"><a href="#2-1-1-2：服务器A配置slave" class="headerlink" title="2.1.1.2：服务器A配置slave"></a>2.1.1.2：服务器A配置slave</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@slave-redis ~]<span class="comment">#vim /etc/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">requirepass 123456<span class="comment">#可以给加上密码</span></span><br><span class="line">slaveof 192.168.183.155 6379</span><br><span class="line">masterauth 123456</span><br><span class="line"><span class="comment">#主要改上面四项</span></span><br><span class="line">slave-read-only yes</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">[root@slave-redis ~]<span class="comment">#systemctl restart redis</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1-3：服务器B配置slave"><a href="#2-1-1-3：服务器B配置slave" class="headerlink" title="2.1.1.3：服务器B配置slave"></a>2.1.1.3：服务器B配置slave</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@slave1-redis ~]<span class="comment">#vim /etc/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">requirepass 123456</span><br><span class="line">slaveof 192.168.183.155 6379</span><br><span class="line">masterauth 123456</span><br><span class="line">slave-read-only yes</span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line">[root@slave-redis ~]<span class="comment">#systemctl restart redis</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1-4：当前master状态"><a href="#2-1-1-4：当前master状态" class="headerlink" title="2.1.1.4：当前master状态"></a>2.1.1.4：当前master状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#redis-cli -a 123456</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=192.168.183.154,port=6379,state=online,offset=50562,lag=1</span><br><span class="line">slave1:ip=192.168.183.153,port=6379,state=online,offset=50997,lag=0</span><br><span class="line">master_repl_offset:50997</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2</span><br><span class="line">repl_backlog_histlen:50996</span><br></pre></td></tr></table></figure><h3 id="2-1-2：编辑配置文件sentinel-conf"><a href="#2-1-2：编辑配置文件sentinel-conf" class="headerlink" title="2.1.2：编辑配置文件sentinel.conf"></a>2.1.2：编辑配置文件sentinel.conf</h3><h4 id="2-1-2-1：master-配置"><a href="#2-1-2-1：master-配置" class="headerlink" title="2.1.2.1：master 配置"></a>2.1.2.1：master 配置</h4><p>哨兵可以不和Redis服务器部署在一起,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#vim /etc/redis-sentinel.conf</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">port 26379</span><br><span class="line">sentinel monitor mymaster 192.168.183.155 6379 2</span><br><span class="line">sentinel auth-pass mymaster 123456</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000  <span class="comment">#(SDOWN)主观下线的时间</span></span><br><span class="line">sentinel parallel-syncs mymaster 1 <span class="comment">#发生故障转移时候同时向新master同步数据的slave数量，数字越小总同步时间越长</span></span><br><span class="line">sentinel failover-timeout mymaster 180000  <span class="comment">#所有slaves指向新的master所需的超时时间</span></span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br></pre></td></tr></table></figure><h4 id="2-1-2-2：Slave-配置"><a href="#2-1-2-2：Slave-配置" class="headerlink" title="2.1.2.2：Slave 配置"></a>2.1.2.2：Slave 配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@slave-redis ~]<span class="comment">#vim /etc/redis-sentinel.conf </span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">port 26379</span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br><span class="line">sentinel monitor mymaster 192.168.183.155 6379 2</span><br><span class="line">sentinel auth-pass mymaster 123456</span><br></pre></td></tr></table></figure><h4 id="2-1-2-3：Slave1配置"><a href="#2-1-2-3：Slave1配置" class="headerlink" title="2.1.2.3：Slave1配置"></a>2.1.2.3：Slave1配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@slave1-redis ~]<span class="comment">#vim /etc/redis-sentinel.conf </span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">port 26379</span><br><span class="line">sentinel deny-scripts-reconfig yes</span><br><span class="line">sentinel monitor mymaster 192.168.183.155 6379 2</span><br><span class="line">sentinel auth-pass mymaster 123456</span><br></pre></td></tr></table></figure><h4 id="2-1-2-4：启动哨兵"><a href="#2-1-2-4：启动哨兵" class="headerlink" title="2.1.2.4：启动哨兵"></a>2.1.2.4：启动哨兵</h4><p>三台哨兵都要启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#systemctl start redis-sentinel.service</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-3：验证端口"><a href="#2-1-2-3：验证端口" class="headerlink" title="2.1.2.3：验证端口"></a>2.1.2.3：验证端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#ss -ntl</span></span><br><span class="line">State      Recv-Q Send-Q    Local Address:Port                   Peer Address:Port     </span><br><span class="line">LISTEN     0      128                   *:26379                             *:*         </span><br><span class="line">LISTEN     0      128                   *:6379                              *:*</span><br></pre></td></tr></table></figure><h4 id="2-1-2-4：哨兵日志"><a href="#2-1-2-4：哨兵日志" class="headerlink" title="2.1.2.4：哨兵日志"></a>2.1.2.4：哨兵日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#tail /var/log/redis/sentinel.log</span></span><br><span class="line">70507:X 13 Jan 16:58:43.089 <span class="comment"># +sdown master mymaster 192.168.183.155 6379</span></span><br><span class="line">70507:X 13 Jan 16:58:43.140 <span class="comment"># +new-epoch 1</span></span><br><span class="line">70507:X 13 Jan 16:58:43.144 <span class="comment"># +vote-for-leader a1862470710ec770e8818de80d3a6b06f0fc9388 1</span></span><br><span class="line">70507:X 13 Jan 16:58:43.147 <span class="comment"># +odown master mymaster 192.168.183.155 6379 #quorum 3/2</span></span><br><span class="line">70507:X 13 Jan 16:58:43.147 <span class="comment"># Next failover delay: I will not start a failover before Sun Jan 13 17:04:43 2019</span></span><br><span class="line">70507:X 13 Jan 16:58:44.272 <span class="comment"># +config-update-from sentinel a1862470710ec770e8818de80d3a6b06f0fc9388 192.168.183.154 26379 @ mymaster 192.168.183.155 6379</span></span><br><span class="line">70507:X 13 Jan 16:58:44.277 <span class="comment"># +switch-master mymaster 192.168.183.155 6379 192.168.183.153 6379</span></span><br><span class="line">70507:X 13 Jan 16:58:44.283 * +slave slave 192.168.183.154:6379 192.168.183.154 6379 @ mymaster 192.168.183.153 6379</span><br><span class="line">70507:X 13 Jan 16:58:44.283 * +slave slave 192.168.183.155:6379 192.168.183.155 6379 @ mymaster 192.168.183.153 6379</span><br><span class="line">70507:X 13 Jan 16:58:49.288 <span class="comment"># +sdown slave 192.168.183.155:6379 192.168.183.155 6379 @ mymaster 192.168.183.153 6379</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-5：当前redis-状态"><a href="#2-1-2-5：当前redis-状态" class="headerlink" title="2.1.2.5：当前redis 状态"></a>2.1.2.5：当前redis 状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=192.168.183.154,port=6379,state=online,offset=717856,lag=0</span><br><span class="line">slave1:ip=192.168.183.153,port=6379,state=online,offset=717856,lag=0</span><br><span class="line">master_repl_offset:717856</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2</span><br><span class="line">repl_backlog_histlen:717855</span><br></pre></td></tr></table></figure><h4 id="2-1-2-6：当前sentinel状态"><a href="#2-1-2-6：当前sentinel状态" class="headerlink" title="2.1.2.6：当前sentinel状态"></a>2.1.2.6：当前sentinel状态</h4><p>尤其是最后一行，涉及到master IP是多少，有几个slave，有几个sentinels，必须是符合全部服务器数量的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#redis-cli -p 26379</span></span><br><span class="line">127.0.0.1:26379&gt; info Sentinel</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=192.168.183.155:6379,slaves=2,sentinels=3</span><br><span class="line">127.0.0.1:26379&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-7：停止Redis-Master测试故障转移"><a href="#2-1-2-7：停止Redis-Master测试故障转移" class="headerlink" title="2.1.2.7：停止Redis Master测试故障转移"></a>2.1.2.7：停止Redis Master测试故障转移</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#systemctl stop redis</span></span><br></pre></td></tr></table></figure><p>查看master信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=192.168.183.154,port=6379,state=online,offset=386953,lag=1</span><br><span class="line">master_repl_offset:387098</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2</span><br><span class="line">repl_backlog_histlen:387097</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>查看哨兵信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#redis-cli -p 26379          </span></span><br><span class="line">127.0.0.1:26379&gt; info sentinel</span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=192.168.183.153:6379,slaves=2,sentinels=3</span><br><span class="line">127.0.0.1:26379&gt;</span><br></pre></td></tr></table></figure><p>故障转移时sentinel 的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@master-redis ~]<span class="comment">#tail -n20 /var/log/redis/sentinel.log</span></span><br><span class="line">          `-._        _.-<span class="string">'                                           </span></span><br><span class="line"><span class="string">              `-.__.-'</span>                                               </span><br><span class="line"></span><br><span class="line">70507:X 13 Jan 16:54:22.693 <span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span></span><br><span class="line">70507:X 13 Jan 16:54:22.697 <span class="comment"># Sentinel ID is 3f42cd492af4ace415ec11659d0f63a6bd806a6b</span></span><br><span class="line">70507:X 13 Jan 16:54:22.697 <span class="comment"># +monitor master mymaster 192.168.183.155 6379 quorum 2</span></span><br><span class="line">70507:X 13 Jan 16:54:22.698 * +slave slave 192.168.183.153:6379 192.168.183.153 6379 @ mymaster 192.168.183.155 6379</span><br><span class="line">70507:X 13 Jan 16:54:22.699 * +slave slave 192.168.183.154:6379 192.168.183.154 6379 @ mymaster 192.168.183.155 6379</span><br><span class="line">70507:X 13 Jan 16:54:23.453 * +sentinel sentinel a1862470710ec770e8818de80d3a6b06f0fc9388 192.168.183.154 26379 @ mymaster 192.168.183.155 6379</span><br><span class="line">70507:X 13 Jan 16:54:33.026 * +sentinel sentinel 5f77dc65c6e8c44156418a64c4a8fa5da563a1cb 192.168.183.153 26379 @ mymaster 192.168.183.155 6379</span><br><span class="line">70507:X 13 Jan 16:58:43.089 <span class="comment"># +sdown master mymaster 192.168.183.155 6379</span></span><br><span class="line">70507:X 13 Jan 16:58:43.140 <span class="comment"># +new-epoch 1</span></span><br><span class="line">70507:X 13 Jan 16:58:43.144 <span class="comment"># +vote-for-leader a1862470710ec770e8818de80d3a6b06f0fc9388 1</span></span><br><span class="line">70507:X 13 Jan 16:58:43.147 <span class="comment"># +odown master mymaster 192.168.183.155 6379 #quorum 3/2</span></span><br><span class="line">70507:X 13 Jan 16:58:43.147 <span class="comment"># Next failover delay: I will not start a failover before Sun Jan 13 17:04:43 2019</span></span><br><span class="line">70507:X 13 Jan 16:58:44.272 <span class="comment"># +config-update-from sentinel a1862470710ec770e8818de80d3a6b06f0fc9388 192.168.183.154 26379 @ mymaster 192.168.183.155 6379</span></span><br><span class="line">70507:X 13 Jan 16:58:44.277 <span class="comment"># +switch-master mymaster 192.168.183.155 6379 192.168.183.153 6379</span></span><br><span class="line">70507:X 13 Jan 16:58:44.283 * +slave slave 192.168.183.154:6379 192.168.183.154 6379 @ mymaster 192.168.183.153 6379</span><br><span class="line">70507:X 13 Jan 16:58:44.283 * +slave slave 192.168.183.155:6379 192.168.183.155 6379 @ mymaster 192.168.183.153 6379</span><br><span class="line">70507:X 13 Jan 16:58:49.288 <span class="comment"># +sdown slave 192.168.183.155:6379 192.168.183.155 6379 @ mymaster 192.168.183.153 6379</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-8：故障转移后的redis配置文件"><a href="#2-1-2-8：故障转移后的redis配置文件" class="headerlink" title="2.1.2.8：故障转移后的redis配置文件"></a>2.1.2.8：故障转移后的redis配置文件</h4><p>故障转移后redis.conf中的replicaof行的master IP会被修改，sentinel.conf中的sentinel monitor IP会被修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@slave-redis ~]<span class="comment">#vim /etc/redis.conf</span></span><br><span class="line"><span class="comment">#    network partition slaves automatically try to reconnect to masters</span></span><br><span class="line"><span class="comment">#    and resynchronize with them.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line">slaveof 192.168.183.153 6379<span class="comment">#自动变成现在的masterip</span></span><br><span class="line"></span><br><span class="line">[root@slave-redis ~]<span class="comment">#vim /etc/redis-sentinel.conf</span></span><br><span class="line"><span class="comment"># Note that the master password is also used for slaves, so it is not</span></span><br><span class="line"><span class="comment"># possible to set a different password in masters and slaves instances</span></span><br><span class="line"><span class="comment"># if you want to be able to monitor these instances with Sentinel.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However you can have Redis instances without the authentication enabled</span></span><br><span class="line"><span class="comment"># mixed with Redis instances requiring the authentication (as long as the</span></span><br><span class="line"><span class="comment"># password set is the same for all the instances requiring the password) as</span></span><br><span class="line"><span class="comment"># the AUTH command will have no effect in Redis instances with authentication</span></span><br><span class="line"><span class="comment"># switched off.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">sentinel monitor mymaster 192.168.183.153 6379 2  <span class="comment">#这个也一样，自动变成新master ip</span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-9：当前reids状态"><a href="#2-1-2-9：当前reids状态" class="headerlink" title="2.1.2.9：当前reids状态"></a>2.1.2.9：当前reids状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@slave-redis ~]<span class="comment">#redis-cli -a 123456</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.183.153</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:216328</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=192.168.183.140,port=6379,state=online,offset=430638,lag=0</span><br><span class="line">master_repl_offset:431073</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:2</span><br><span class="line">repl_backlog_histlen:431072</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h2 id="2-2：Redis-Cluster部署"><a href="#2-2：Redis-Cluster部署" class="headerlink" title="2.2：Redis Cluster部署"></a>2.2：Redis Cluster部署</h2><p>Redis cluster之前的分布式方案：</p><p>1) 客户端分区：由客户端程序决定key写分配和写入的redis node，但是需要客户端自己处理写入分配、高可用管理和故障转移等</p><p>2)代理方案：基于三方软件实现redis proxy，客户端先连接之代理层，由代理层实现key的写入分配，对客户端来说是有比较简单，但是对于集群管节点增减相对比较麻烦，而且代理本身也是单点和性能瓶颈。</p><p>&ensp;&ensp;&ensp;&ensp;在哨兵sentinel机制中，可以解决redis高可用的问题，即当master故障后可以自动将slave提升为master从而可以保证redis服务的正常使用，但是无法解决redis单机写入的瓶颈问题，即单机的redis写入性能受限于单机的内存大小、并发数量、网卡速率等因素，因此redis官方在redis 3.0版本之后推出了无中心架构的redis cluster机制，在无中心的redis集群汇中，其每个节点保存当前节点数据和整个集群状态,每个节点都和其他所有节点连接，特点如下：</p><p>1：所有Redis节点使用(PING-PING机制)互联</p><p>2：集群中某个节点的实效是整个集群中超过半数的节点监测都实效才算真正的实效</p><p>3：客户端不需要proxy即可直接连接redis，且客户端不需要连接集群中的所有节点，只要连接集群中的任何一个节点即可。</p><p>4：redis cluster把所有的redisnode映射到 0-16383个槽位(slot)上，读写需要到指定的redis node上进行操作，因此有多少个reids node相当于redis 并发扩展了多少倍。</p><p>5：Redis集群预先分配16384个(slot)槽位，当需要在redis集群中写入一个key -value的时候，会使用CRC16(key)  mod 16384之后的值，决定将key写入值哪一个槽位从而决定写入哪一个Redis节点上，从而有效解决单机瓶颈。​          </p><h3 id="2-2-1：部署redis集群"><a href="#2-2-1：部署redis集群" class="headerlink" title="2.2.1：部署redis集群"></a>2.2.1：部署redis集群</h3><p>环境准备：</p><p>三台服务器，每台服务器启动6379端口，（192.168.183.155:6379  192.168.183.154:6379</p><p>192.168.183.153:6379  ）</p><h5 id="2-2-1-1：创建redis-cluster集群的前提："><a href="#2-2-1-1：创建redis-cluster集群的前提：" class="headerlink" title="2.2.1.1：创建redis cluster集群的前提："></a>2.2.1.1：创建redis cluster集群的前提：</h5><p>1.每个redis node节点采用相同的硬件配置、相同的密码</p><p>2.每个节点必须开启参数,设置配置文件，启用集群功能；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@redis1 ~]<span class="comment">#vim /etc/redis.conf</span></span><br><span class="line">cluster-enabled <span class="comment">#是否开启集群配置</span></span><br><span class="line">cluster-config-file <span class="comment">#集群节点集群信息配置文件,每个节点都有一个,由redis生成和更新,配置时避免名称冲突</span></span><br><span class="line">cluster-node-timeout <span class="comment">#集群节点互连超时的阈值，单位毫秒</span></span><br><span class="line">cluster-slave-validity-factor <span class="comment">#进行故障转移时,salve会申请成为master。有时slave会和master失联很久导致数据较旧，这样的slave不应该成为master。这个配置用来判断slave是否和master失联时间过长。</span></span><br><span class="line"><span class="comment">#以上四个参数都启用</span></span><br><span class="line">[root@redis1 ~]<span class="comment">#systemctl start redis</span></span><br></pre></td></tr></table></figure><p>2.2.1.2：启动redis后为每个节点分配slots；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[root@redis1 ~]<span class="comment">#redis-cli -a 123456</span></span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:0</span><br><span class="line">cluster_slots_ok:0</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:1</span><br><span class="line">cluster_size:0</span><br><span class="line">cluster_current_epoch:0</span><br><span class="line">cluster_my_epoch:0</span><br><span class="line">cluster_stats_messages_sent:0</span><br><span class="line">cluster_stats_messages_received:0</span><br><span class="line"></span><br><span class="line">[root@redis1 ~]<span class="comment">#redis-cli -c -h 192.168.183.155 -p 6379 -a 123456 cluster addslots &#123;0..5500&#125; </span></span><br><span class="line">OK</span><br><span class="line">[root@redis1 ~]<span class="comment">#redis-cli -c -h 192.168.183.154 -p 6379 -a 123456 cluster addslots &#123;5501..11000&#125;</span></span><br><span class="line">OK</span><br><span class="line">[root@redis1 ~]<span class="comment">#redis-cli -c -h 192.168.183.153 -p 6379 -a 123456 cluster addslots &#123;11001..16383&#125;</span></span><br><span class="line">OK</span><br><span class="line">[root@redis1 ~]<span class="comment">#redis-cli -a 123456</span></span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:5501</span><br><span class="line">cluster_slots_ok:5501</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:1</span><br><span class="line">cluster_size:1</span><br><span class="line">cluster_current_epoch:0</span><br><span class="line">cluster_my_epoch:0</span><br><span class="line">cluster_stats_messages_sent:0</span><br><span class="line">cluster_stats_messages_received:0</span><br><span class="line"></span><br><span class="line">[root@redis2 ~]<span class="comment">#redis-cli -a 123456</span></span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:5500</span><br><span class="line">cluster_slots_ok:5500</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:1</span><br><span class="line">cluster_size:1</span><br><span class="line">cluster_current_epoch:0</span><br><span class="line">cluster_my_epoch:0</span><br><span class="line">cluster_stats_messages_sent:0</span><br><span class="line">cluster_stats_messages_received:0</span><br><span class="line"></span><br><span class="line">[root@redis3 ~]<span class="comment">#redis-cli -a 123456</span></span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:5383</span><br><span class="line">cluster_slots_ok:5383</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:1</span><br><span class="line">cluster_size:1</span><br><span class="line">cluster_current_epoch:0</span><br><span class="line">cluster_my_epoch:0</span><br><span class="line">cluster_stats_messages_sent:0</span><br><span class="line">cluster_stats_messages_received:0</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>2.2.1.3：设定集群成员关系；(CLUSTE MEET)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; CLUSTER MEET 192.168.183.154 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; CLUSTER MEET 192.168.183.153 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:3</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:2</span><br><span class="line">cluster_my_epoch:2</span><br><span class="line">cluster_stats_messages_sent:57</span><br><span class="line">cluster_stats_messages_received:57</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name tom</span><br><span class="line">(error) MOVED 5798 192.168.183.154:6379</span><br><span class="line"><span class="comment">#在192.168.183.154上</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name tom</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="2-3：redis扩展集群方案："><a href="#2-3：redis扩展集群方案：" class="headerlink" title="2.3：redis扩展集群方案："></a>2.3：redis扩展集群方案：</h3><p>除了Redis 官方自带的Redis cluster集群之外，还有一写开源的集群解决方案可供参考使用。</p><h4 id="2-3-1：codis："><a href="#2-3-1：codis：" class="headerlink" title="2.3.1：codis："></a>2.3.1：codis：</h4><p>&ensp;&ensp;&ensp;&ensp;Codis 是一个分布式 Redis 解决方案, 对于上层的应用来说, 连接到 Codis Proxy 和连接原生的 Redis Server 没有显著区别 (<a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/unsupported_cmds.md" target="_blank" rel="noopener">不支持的命令列表)</a>, 上层应用可以像使用单机的 Redis 一样使用, Codis 底层会处理请求的转发, 不停机的数据迁移等工作, 所有后边的一切事情, 对于前面的客户端来说是透明的, 可以简单的认为后边连接的是一个内存无限大的 Redis 服务。</p><p>&ensp;&ensp;&ensp;&ensp;codis-proxy相当于redis，即连接codis-proxy和连接redis是没有任何区别的，codis-proxy无状态，不负责记录是否在哪保存，数据在zookeeper记录，即codis proxy向zookeeper查询key的记录位置，proxy 将请求转发到一个组进行处理，一个组里面有一个master和一个或者多个slave组成，默认有1024个槽位，redis cluster 默认有16384个槽位，其把不同的槽位的内容放在不同的group。</p><p>Github 地址：<a href="https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md" target="_blank" rel="noopener">https://github.com/CodisLabs/codis/blob/release3.2/doc/tutorial_zh.md</a> </p><h4 id="2-3-2：twemproxy："><a href="#2-3-2：twemproxy：" class="headerlink" title="2.3.2：twemproxy："></a>2.3.2：twemproxy：</h4><p>&ensp;&ensp;&ensp;&ensp;由Twemproxy代替客户端实现分片，即代替用户将数据分片并到不同的后端服务器进行读写，其还支持memcached，可以为proxy配置算法，缺点为twemproxy是瓶颈，不支持数据迁移，官方github地址<a href="https://github.com/twitter/twemproxy/" target="_blank" rel="noopener">https://github.com/twitter/twemproxy/</a> </p><p>Github 地址：<a href="https://github.com/twitter/twemproxy" target="_blank" rel="noopener">https://github.com/twitter/twemproxy</a> </p><h1 id="三：memcached"><a href="#三：memcached" class="headerlink" title="三：memcached"></a>三：memcached</h1><p>Memcache官网：<a href="http://memcached.org/" target="_blank" rel="noopener">http://memcached.org/</a> </p><p>&ensp;&ensp;&ensp;&ensp;memcache本身没有像redis所具备的数据持久化功能，比如RDB和AOF都没有，但是可以通过做集群同步的方式，让各memcache服务器的数据进行同步，从而实现数据的一致性，即保证各memcache的数据是一样的，即使有任何一台或多台memcache发生故障，只要集群种有一台memcache可用就不会出现数据丢失，当其他memcache重新加入到集群的时候可以自动从有数据的memcache当中自动获取数据并提供服务。</p><p>&ensp;&ensp;&ensp;&ensp;Memcache借助了操作系统的libevent工具做高效的读写。libevent是个程序库，它将Linux的epoll、BSD类操作系统的kqueue等事件处理功能封装成统一的接口。即使对服务器的连接数增加，也能发挥高性能。memcached使用这个libevent库，因此能在Linux、BSD、Solaris等操作系统上发挥其高性能。</p><p>&ensp;&ensp;&ensp;&ensp;Memcache支持最大的内存存储对象为1M，超过1M的数据可以使用客户端压缩或拆分报错到做个key中，比较大的数据在进行读取的时候需要消耗的时间比较长，memcache最适合报错用户的session实现session共享，Memcached存储数据时, Memcached会去申请1MB的内存, 把该块内存称为一个slab, 也称为一个page。</p><p>memcached具有多种语言的客户端开发包，包括：Perl/PHP/JAVA/C/Python/Ruby/C#/</p><h2 id="3-1：单机部署："><a href="#3-1：单机部署：" class="headerlink" title="3.1：单机部署："></a>3.1：单机部署：</h2><h3 id="3-1-1：yum安装与启动："><a href="#3-1-1：yum安装与启动：" class="headerlink" title="3.1.1：yum安装与启动："></a>3.1.1：yum安装与启动：</h3><p>通过yum 安装是相对简单的安装方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">yum  install  memcached –y</span><br><span class="line"></span><br><span class="line">vim /etc/sysconfig/memcached</span><br><span class="line"></span><br><span class="line">PORT=<span class="string">"11211"</span> <span class="comment">#监听端口</span></span><br><span class="line"></span><br><span class="line">USER=<span class="string">"memcached"</span> <span class="comment">#启动用户</span></span><br><span class="line"></span><br><span class="line">MAXCONN=<span class="string">"1024"</span> <span class="comment">#最大连接数</span></span><br><span class="line"></span><br><span class="line">CACHESIZE=<span class="string">"1024"</span> <span class="comment">#最大使用内存</span></span><br><span class="line"></span><br><span class="line">OPTIONS=<span class="string">""</span> <span class="comment">#其他选项</span></span><br></pre></td></tr></table></figure><h3 id="3-1-2：编译安装："><a href="#3-1-2：编译安装：" class="headerlink" title="3.1.2：编译安装："></a>3.1.2：编译安装：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">yum install libevent libevent-devel –y</span><br><span class="line"></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/src</span><br><span class="line"></span><br><span class="line">tar xvf  memcached-1.5.12.tar.gz</span><br><span class="line"></span><br><span class="line">./configure   --prefix=/usr/<span class="built_in">local</span>/memcache</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动memcached</span></span><br><span class="line"></span><br><span class="line">/usr/<span class="built_in">local</span>/memcache/bin/memcached -u memcached -p 11211 -m 2048 -c 65536 &amp;</span><br></pre></td></tr></table></figure><h2 id="3-2：memcached集群部署架构："><a href="#3-2：memcached集群部署架构：" class="headerlink" title="3.2：memcached集群部署架构："></a>3.2：memcached集群部署架构：</h2><h3 id="3-2-1：基于magent的部署架构："><a href="#3-2-1：基于magent的部署架构：" class="headerlink" title="3.2.1：基于magent的部署架构："></a>3.2.1：基于magent的部署架构：</h3><p>&ensp;&ensp;&ensp;&ensp;该部署方式依赖于magent实现高可用，应用端通过负载服务器连接到magent，然后再由magent代理用户应用请求到memcached处理，底层的memcached为双主结构会自动同步数据，本部署方式存在magent单点问题因此需要两个magent做高可用。</p><h3 id="3-2-2：简化后的部署架构："><a href="#3-2-2：简化后的部署架构：" class="headerlink" title="3.2.2：简化后的部署架构："></a>3.2.2：简化后的部署架构：</h3><p>&ensp;&ensp;&ensp;&ensp;但magent已经有很长时间没有更新，因此可以不再使用magent，直接通过负载均衡连接之memcached，任然有两台memcached做高可用，memcached会自动同步数据保持数据一致性，即使一台memcached故障也不影响业务正常运行，故障的memcached修复上线后再自动从另外一台同步数据即可保持数据一致性。</p><p>4.1.3：部署repcached</p><p><a href="http://repcached.sourceforge.net/" target="_blank" rel="noopener">http://repcached.sourceforge.net/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;一：redis-高可用与集群&quot;&gt;&lt;a href=&quot;#一：redis
      
    
    </summary>
    
      <category term="nosql" scheme="http://yoursite.com/categories/nosql/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>企业级调度器LVS</title>
    <link href="http://yoursite.com/2019/01/05/%E4%BC%81%E4%B8%9A%E7%BA%A7%E8%B0%83%E5%BA%A6%E5%99%A8LVS/"/>
    <id>http://yoursite.com/2019/01/05/企业级调度器LVS/</id>
    <published>2019-01-04T16:00:00.000Z</published>
    <updated>2019-01-14T00:59:51.999Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Cluster集群"><a href="#Cluster集群" class="headerlink" title="Cluster集群"></a>Cluster集群</h1><p>&ensp;&ensp;&ensp;&ensp; Cluster：集群,为解决某个特定问题将多台计算机组合起来形成的单个系统<br>•  Linux Cluster类型：<br>​    • LB：Load Balancing，负载均衡<br>​    •  HA：High Availiablity，高可用，SPOF（single Point Of failure）<br>• 分布式系统：<br>​    分布式存储：云盘<br>​    分布式计算：hadoop，Spark </p><p>• 系统扩展方式：<br>​        Scale UP：向上扩展(更换性能更好的设备)<br>​        Scale Out：向外扩展(Cluster)</p><h1 id="Cluster分类"><a href="#Cluster分类" class="headerlink" title="Cluster分类"></a>Cluster分类</h1><h2 id="LB-Cluster的实现"><a href="#LB-Cluster的实现" class="headerlink" title="LB Cluster的实现"></a>LB Cluster的实现</h2><ol><li>硬件<br> F5 Big-IP<br> Citrix Netscaler<br> A10 A10</li><li>软件<br> lvs：Linux Virtual Server,支持四层调度<br> nginx：支持七层调度，阿里七层SLB使用Tengine<br> haproxy：支持七层调度<br> ats：apache traffic server，yahoo捐助<br> perlbal：Perl 编写<br> pound</li></ol><h2 id="基于工作的协议层次划分"><a href="#基于工作的协议层次划分" class="headerlink" title="基于工作的协议层次划分"></a>基于工作的协议层次划分</h2><ol><li>传输层（通用）：DPORT 器<br> nginx：stream<br> haproxy：mode tcp</li><li>应用层（专用）：针对特定协议，自定义的请求模型分类<br> proxy server：<br> http：nginx, httpd, haproxy(mode http), …<br> fastcgi：nginx, httpd, …<br> mysql：mysql-proxy, </li></ol><h1 id="LVS"><a href="#LVS" class="headerlink" title="LVS"></a>LVS</h1><p>&ensp;&ensp;&ensp;&ensp;LVS(Linux Virtual Server)即Linux虚拟服务器，是由章文嵩博士主导的开源负载均衡项目，目前LVS已经被集成到Linux内核模块中。该项目在Linux内核中实现了基于IP的数据请求负载均衡调度方案。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>VS: Virtual Server，负责调度<br>RS: Real Server，负责真正提供服务<br>L4：四层路由器或交换机  </p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/lvs%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.jpg?raw=true" alt="lvs工作原理.jpg"></p><ol><li><p>当用户向负载均衡调度器（Director Server）发起请求，调度器将请求发往至内核空间</p></li><li><p>PREROUTING链首先会接收到用户请求，判断目标IP确定是本机IP，将数据包发往INPUT链</p></li><li><p>IPVS是工作在INPUT链上的，当用户请求到达INPUT时，IPVS会将用户请求和自己已定义好的集群服务进行比对，如果用户请求的就是定义的集群服务，那么此时IPVS会强行修改数据包里的目标IP地址及端口，并将新的数据包发往POSTROUTING链</p></li><li><p>POSTROUTING链接收数据包后发现目标IP地址刚好是自己的后端服务器，那么此时通过选路，将数据包最终发送给后端的服务器</p></li></ol><h2 id="LVS的组成"><a href="#LVS的组成" class="headerlink" title="LVS的组成"></a>LVS的组成</h2><p>LVS 由2部分程序组成，包括 ipvs 和 ipvsadm。<br>​            ipvsadm：用户空间的命令行工具，规则管理器，用于管理集群服务及相关的RealServer；<br>​            ipvs：工作于内核空间的netfilter的INPUT钩子之上的框架；</p><h2 id="lvs集群类型中的术语"><a href="#lvs集群类型中的术语" class="headerlink" title="lvs集群类型中的术语"></a>lvs集群类型中的术语</h2><ol><li>VS：Virtual Server，Director Server(DS) , Dispatcher(调度器)，Load Balancer.指的是前端负载均衡器节点。</li><li>RS：Real Server(lvs), upstream server(nginx) , backend server(haproxy).后端真实的工作服务器。</li><li>CIP：Client IP.访问客户端的IP地址。</li></ol><ol start="4"><li>VIP: Virtual serve IP.向外部直接面向用户请求，作为用户请求的目标的IP地址。</li><li>DIP: Director IP,主要用于和内部主机通讯的IP地址。</li><li>RIP: Real server IP.后端服务器的IP地址。</li></ol><p>• 访问流程：CIP <--> VIP == DIP <--> RIP </--></--></p><h2 id="LVS负载均衡调度算法"><a href="#LVS负载均衡调度算法" class="headerlink" title="LVS负载均衡调度算法"></a>LVS负载均衡调度算法</h2><h3 id="静态算法：仅根据算法本身和请求报文特征惊醒调度"><a href="#静态算法：仅根据算法本身和请求报文特征惊醒调度" class="headerlink" title="静态算法：仅根据算法本身和请求报文特征惊醒调度"></a>静态算法：仅根据算法本身和请求报文特征惊醒调度</h3><ol><li>轮询调度(RR)</li></ol><p>&ensp;&ensp;&ensp;&ensp;轮询调度（Round Robin 简称’RR’）算法就是按依次循环的方式将请求调度到不同的服务器上，该算法最大的特点就是实现简单。轮询算法假设所有的服务器处理请求的能力都一样的，调度器会将所有的请求平均分配给每个真实服务器，不管后端 RS 配置和处理能力，非常均衡地分发下去。</p><ol start="2"><li>加权轮询(WRR)</li></ol><p>&ensp;&ensp;&ensp;&ensp;加权轮询（Weight Round Robin 简称’WRR’）算法主要是对轮询算法的一种优化与补充，LVS会考虑每台服务器的性能，并给每台服务器添加一个权值，如果服务器A的权值为1，服务器B的权值为2，则调度器调度到服务器B的请求会是服务器A的两倍。权值越高的服务器，处理的请求越多。</p><ol start="3"><li>源地址散列调度(SH)</li></ol><p>&ensp;&ensp;&ensp;&ensp;源地址散列调度（Source Hashing  简称’SH’）算法先根据请求的源IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且并未超载，将请求发送到该服务器，否则返回空。它采用的散列函数与目标地址散列调度算法的相同，它的算法流程与目标地址散列调度算法的基本相似。</p><ol start="4"><li>目标地址散列调度(DH)</li></ol><p>&ensp;&ensp;&ensp;&ensp;目标地址散列调度（Destination Hashing 简称’DH’）算法先根据请求的目标IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且并未超载，将请求发送到该服务器，否则返回空。</p><h3 id="动态算法：额外考虑后端各RS的当前的负载状态"><a href="#动态算法：额外考虑后端各RS的当前的负载状态" class="headerlink" title="动态算法：额外考虑后端各RS的当前的负载状态"></a>动态算法：额外考虑后端各RS的当前的负载状态</h3><ol><li>最少连接(lc)</li></ol><p>&ensp;&ensp;&ensp;&ensp;最少连接（ Least Connections 简称’LC’）算法会根据后端 RS 的连接数来决定把请求分发给谁，比如 RS1 连接数比 RS2 连接数少，那么请求就优先发给 RS1</p><ol start="2"><li>加权最小连接调度(WLC)</li></ol><p>&ensp;&ensp;&ensp;&ensp;加权最少连接（Weight Least Connections 简称’WLC’）算法是最小连接调度的超集，各个服务器相应的权值表示其处理性能。服务器的缺省权值为1，系统管理员可以动态地设置服务器的权值。加权最小连接调度在调度新连接时尽可能使服务器的已建立连接数和其权值成比例。调度器可以自动问询真实服务器的负载情况，并动态地调整其权值。</p><ol start="3"><li>最短的期望的延迟(SED)</li></ol><p>&ensp;&ensp;&ensp;&ensp;最短的期望的延迟调度（Shortest Expected Delay 简称’SED’）算法基于WLC算法。举个例子吧，ABC三台服务器的权重分别为1、2、3 。那么如果使用WLC算法的话一个新请求进入时它可能会分给ABC中的任意一个。使用SED算法后会进行一个运算</p><p>A：（1+1）/1=2   B：（1+2）/2=3/2   C：（1+3）/3=4/3   就把请求交给得出运算结果最小的服务器。</p><ol start="4"><li>永不排队(NQ)</li></ol><p>&ensp;&ensp;&ensp;&ensp;永不排队（Never Queue 简称’NQ’）算法，无需队列。如果有realserver的连接数等于0就直接分配过去，不需要在进行SED运算。</p><ol start="5"><li>基于局部的最少连接(LBLC)</li></ol><p>&ensp;&ensp;&ensp;&ensp;基于局部的最少连接调度（Locality-Based Least Connections 简称’LBLC’）算法是针对请求报文的目标IP地址的 负载均衡调度，目前主要用于Cache集群系统，因为在Cache集群客户请求报文的目标IP地址是变化的。这里假设任何后端服务器都可以处理任一请求，算法的设计目标是在服务器的负载基本平衡情况下，将相同目标IP地址的请求调度到同一台服务器，来提高各台服务器的访问局部性和Cache命中率，从而提升整个集群系统的处理能力。LBLC调度算法先根据请求的目标IP地址找出该目标IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于一半的工作负载，则使用’最少连接’的原则选出一个可用的服务器，将请求发送到服务器。</p><p>6.带复制的基于局部性的最少连接</p><p>&ensp;&ensp;&ensp;&ensp;带复制的基于局部性的最少连接（Locality-Based Least Connections with Replication  简称’LBLCR’）算法也是针对目标IP地址的负载均衡，目前主要用于Cache集群系统，它与LBLC算法不同之处是它要维护从一个目标IP地址到一组服务器的映射，而LBLC算法维护从一个目标IP地址到一台服务器的映射。按’最小连接’原则从该服务器组中选出一一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按’最小连接’原则从整个集群中选出一台服务器，将该服务器加入到这个服务器组中，将请求发送到该服务器。同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。</p><h1 id="lvs集群的类型"><a href="#lvs集群的类型" class="headerlink" title="lvs集群的类型"></a>lvs集群的类型</h1><p>lvs-nat：修改请求报文的目标IP,多目标IP的DNAT<br>lvs-dr：操纵封装新的MAC地址<br>lvs-tun：在原请求IP报文之外新加一个IP首部<br>lvs-fullnat：修改请求报文的源和目标IP</p><h2 id="lvs-nat模式"><a href="#lvs-nat模式" class="headerlink" title="lvs-nat模式"></a>lvs-nat模式</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/lvs-nat.jpg?raw=true" alt="lvs-nat.jpg"></p><p>lvs-nat：<br>本质是多目标IP的DNAT，通过将请求报文中的目标地址和目标端口修改为某挑出的RS的RIP和PORT实现转发<br>（1）RIP和DIP应在同一个IP网络，且应使用私网地址；RS的网关要指向DIP<br>（2）请求报文和响应报文都必须经由Director转发，Director易于成为系统瓶颈<br>（3）支持端口映射，可修改请求报文的目标PORT<br>（4）VS必须是Linux系统，RS可以是任意OS系统 </p><h2 id="LVS-DR模式"><a href="#LVS-DR模式" class="headerlink" title="LVS-DR模式"></a>LVS-DR模式</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/lvs-dr.jpg?raw=true" alt="lvs-dr.jpg"></p><h2 id="DR模式IP包调度过程"><a href="#DR模式IP包调度过程" class="headerlink" title="DR模式IP包调度过程"></a>DR模式IP包调度过程</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/lvs-DR%E6%A8%A1%E5%BC%8FIP%E5%8C%85%E8%B0%83%E5%BA%A6%E8%BF%87%E7%A8%8B.png?raw=true" alt="lvs-DR模式IP包调度过程.png"></p><p>LVS-DR：</p><p>Direct Routing，直接路由，LVS默认模式,应用最广泛,通过为请求报文重新封装一个MAC首部进行转发，源MAC是DIP所在的接口的MAC，目标MAC是某挑选出的RS的RIP所在接口的MAC地址；源IP/PORT，以及目标IP/PORT均保持不变</p><ol><li>Director和各RS都配置有VIP</li><li>确保前端路由器将目标IP为VIP的请求报文发往Director<br> （1） 在前端网关做静态绑定VIP和Director的MAC地址<br> （2） 在RS上使用arptables工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arptables -A IN -d <span class="variable">$VIP</span> -j DROP</span><br><span class="line">arptables -A OUT -s <span class="variable">$VIP</span> -j mangle --mangle-ip<span class="_">-s</span> <span class="variable">$RIP</span></span><br></pre></td></tr></table></figure><p>​    （3） 在RS上修改内核参数以限制arp通告及应答级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">/proc/sys/net/ipv4/conf/all/arp_announce</span><br></pre></td></tr></table></figure><p>​    限制响应级别：arp_ignore</p><ul><li>​    0：默认值，表示可使用本地任意接口上配置的任意地址进行响应</li><li>​    1: 仅在请求的目标IP配置在本地主机的接收到请求报文的接口上时，才给予响应</li></ul><p>​    限制通告级别：arp_announce</p><ul><li>​    0：默认值，把本机所有接口的所有信息向每个接口的网络进行通告</li><li>​    1：尽量避免将接口信息向非直接连接网络进行通告</li><li>​    2：必须避免将接口信息向非本网络进行通告 </li></ul><ol start="3"><li>RS的RIP可以使用私网地址，也可以是公网地址；RIP与DIP在同一IP网络；RIP的网关不能指向DIP，以确保响应报文不会经由Director</li><li>RS和Director要在同一个物理网络</li><li>请求报文要经由Director，但响应报文不经由Director，而由RS直接发往Client</li><li>不支持端口映射（端口不能修败）</li><li>RS可使用大多数OS系统 </li></ol><h2 id="lvs-tun模式"><a href="#lvs-tun模式" class="headerlink" title="lvs-tun模式"></a>lvs-tun模式</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/lvs-tun.jpg?raw=true" alt="lvs-tun.jpg"></p><p>lvs-tun： </p><p>转发方式：不修改请求报文的IP首部（源IP为CIP，目标IP为VIP），而在原IP报文之外再封装一个IP首部（源IP是DIP，目标IP是RIP），将报文发往挑选出的目标RS；RS直接响应给客户端（源IP是VIP，目标IP是CIP）<br>(1) DIP, VIP, RIP都应该是公网地址<br>(2) RS的网关一般不能指向DIP<br>(3) 请求报文要经由Director，但响应不经由Director<br>(4) 不支持端口映射<br>(5) RS的OS须支持隧道功能 </p><h2 id="lvs-fullnat模式"><a href="#lvs-fullnat模式" class="headerlink" title="lvs-fullnat模式"></a>lvs-fullnat模式</h2><p>lvs-fullnat：通过同时修改请求报文的源IP地址和目标IP地址进行转发<br>CIP –&gt; DIP<br>VIP –&gt; RIP<br>(1) VIP是公网地址，RIP和DIP是私网地址，且通常不在同一IP网络；因此，RIP的网关一般不会指向DIP<br>(2) RS收到的请求报文源地址是DIP，因此，只需响应给DIP；但Director还要将其发往Client<br>(3) 请求和响应报文都经由Director<br>(4) 支持端口映射<br>注意：此类型kernel默认不支持 </p><h1 id="ipvsadm"><a href="#ipvsadm" class="headerlink" title="ipvsadm"></a>ipvsadm</h1><h2 id="ipvsadm包构成"><a href="#ipvsadm包构成" class="headerlink" title="ipvsadm包构成"></a>ipvsadm包构成</h2><p>程序包：ipvsadm<br>Unit File: ipvsadm.service<br>主程序：/usr/sbin/ipvsadm<br>规则保存工具：/usr/sbin/ipvsadm-save<br>规则重载工具：/usr/sbin/ipvsadm-restore<br>配置文件：/etc/sysconfig/ipvsadm-config</p><h2 id="ipvsadm命令"><a href="#ipvsadm命令" class="headerlink" title="ipvsadm命令"></a>ipvsadm命令</h2><h3 id="管理集群服务"><a href="#管理集群服务" class="headerlink" title="管理集群服务"></a>管理集群服务</h3><p>​增、改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -A|E -t|u|f service-address [-s scheduler][-p [timeout]]</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -D -t|u|f service-address</span><br></pre></td></tr></table></figure><p>service-address：<br>-t|u|f：<br>​    -t: TCP协议的端口，VIP:TCP_PORT<br>​    -u: UDP协议的端口，VIP:UDP_PORT<br>​    -f：firewall MARK，标记，一个数字<br>[-s scheduler]：指定集群的调度算法，默认为wlc</p><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -A|E -t|u|f service-address [-s scheduler][-p [timeout]] [-M netmask][--pe persistence_engine] [-b <span class="built_in">sched</span>-flags]</span><br></pre></td></tr></table></figure><p>清空定义的所有内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm –C</span><br></pre></td></tr></table></figure><p>清空计数器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -Z [-t|u|f service-address]</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -L|l [options]</span><br></pre></td></tr></table></figure><p>–numeric, -n：以数字形式输出地址和端口号（和 -L|l 连起来使用只能写在后面）<br>–exact：扩展信息，精确值<br>–connection，-c：当前IPVS连接输出<br>–stats：统计信息<br>–rate ：输出速率信息</p><p>ipvs规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/net/ip_vs</span><br></pre></td></tr></table></figure><p>ipvs连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/net/ip_vs_conn</span><br></pre></td></tr></table></figure></p><p>保存：建议保存至/etc/sysconfig/ipvsadm<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm-save &gt; /PATH/TO/IPVSADM_FILE</span><br><span class="line">ipvsadm -S &gt; /PATH/TO/IPVSADM_FILE</span><br><span class="line">systemctl stop ipvsadm.service</span><br></pre></td></tr></table></figure></p><p>重载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm-restore &lt; /PATH/FROM/IPVSADM_FILE</span><br><span class="line">ipvsadm -R &lt; /PATH/FROM/IPVSADM_FILE</span><br><span class="line">systemctl restart ipvsadm.service</span><br></pre></td></tr></table></figure></p><p>管理集群上的RS：增、改、删<br>增、改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -a|e -t|u|f service-address -r server-address [-g|i|m][-w weight]</span><br></pre></td></tr></table></figure><p>删：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -d -t|u|f service-address -r server-address</span><br></pre></td></tr></table></figure><p>server-address：<br>rip[:port] 如省略port，不作端口映射<br>选项：<br>lvs类型：<br>-g: gateway, dr类型，默认<br>-i: ipip, tun类型<br>-m: masquerade, nat类型<br>-w weight：权重</p><h1 id="实现lvs-nat实验"><a href="#实现lvs-nat实验" class="headerlink" title="实现lvs-nat实验"></a>实现lvs-nat实验</h1><p>用宿主机模拟Director Server，容器模拟两个Real Server。</p><p>在宿一台主机先用docker pull镜像，做宿主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#docker image pull busybox</span></span><br></pre></td></tr></table></figure><p>配置两个容器并启动httpd服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">另开一个终端</span><br><span class="line">[root@centos7 ~]<span class="comment">#docker run --name rs1 -it --network bridge -v /vols/rsl:/data/web/html busybox</span></span><br><span class="line">/ <span class="comment"># httpd -h /data/web/html/</span></span><br><span class="line">/ <span class="comment"># netstat -ntl</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class="line">tcp        0      0 :::80                   :::*                    LISTEN      </span><br><span class="line">宿主机</span><br><span class="line">[root@centos7 rsl]<span class="comment">#vim /vols/rsl/index.html</span></span><br><span class="line">&lt;h1&gt;RS1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">再开一个终端</span><br><span class="line">[root@centos7 ~]<span class="comment">#docker run --name rs2 -it --network bridge -v /vols/rs2:/data/web/html busybox</span></span><br><span class="line">/ <span class="comment"># httpd -h /data/web/html/</span></span><br><span class="line">/ <span class="comment"># netstat -ntl</span></span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       </span><br><span class="line">tcp        0      0 :::80                   :::*                    LISTEN      </span><br><span class="line">宿主机</span><br><span class="line">[root@centos7 rs2]<span class="comment">#vim /vols/rsl/index.html</span></span><br><span class="line">&lt;h1&gt;RS2&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">index.html的内容不一样，是为了演示调度效果</span><br></pre></td></tr></table></figure></p><p>在宿主机上修改iptables forward 链的规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 rs2]<span class="comment">#which iptables</span></span><br><span class="line">/usr/sbin/iptables</span><br><span class="line">[root@centos7 rs2]<span class="comment">#vim /usr/lib/systemd/system/docker.service</span></span><br><span class="line">在ExecStart下面加上一行</span><br><span class="line">ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT</span><br><span class="line">[root@centos7 rs2]<span class="comment">#systemctl daemon-reload</span></span><br><span class="line">重启会导致docker关闭，故手动添加一条规则</span><br><span class="line">[root@centos7 rsl]<span class="comment">#iptables -P FORWARD ACCEPT</span></span><br></pre></td></tr></table></figure><p>在宿主机上添加ipvsadm规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ipvsadm -A -t 192.168.146.154:80 -s wrr</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ipvsadm -Ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.146.154:80 wrr</span><br><span class="line">[root@centos7 ~]<span class="comment">#ipvsadm -a -t 192.168.146.154:80 -r 172.17.0.2:80 -m -w 1</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ipvsadm -a -t 192.168.146.154:80 -r 172.17.0.3:80 -m -w 1 </span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ipvsadm -Ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.146.154:80 wrr</span><br><span class="line">  -&gt; 172.17.0.2:80                Masq    1      0          0       </span><br><span class="line">  -&gt; 172.17.0.3:80                Masq    1      0          0</span><br></pre></td></tr></table></figure><p>在另外一个终端发请求进行模拟<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#while true; do curl 192.168.146.154;sleep 0.5; done</span></span><br></pre></td></tr></table></figure></p><h1 id="实现lvs-DR实验"><a href="#实现lvs-DR实验" class="headerlink" title="实现lvs-DR实验"></a>实现lvs-DR实验</h1><p>准备三台虚拟机，分别为node01、node02、node03. node01为Director Server（192.168.146.152），node02（192.168.146.154）、node03（192.168.146.139）为Real Server。</p><p>配置DS的VIP，给ens37起个别名，并且只广播给自己</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment">#ifconfig ens37:0 192.168.146.100 netmask 255.255.255.255 broadcast 192.168.146.100 up</span></span><br></pre></td></tr></table></figure><p>配置RS（写RS的配置脚本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">vip=192.168.146.100</span><br><span class="line">mask=<span class="string">'255.255.255.255'</span></span><br><span class="line">interface=<span class="string">"lo:0"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">iptables -F</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line"></span><br><span class="line">ifconfig <span class="variable">$interface</span> <span class="variable">$vip</span> netmask <span class="variable">$mask</span> broadcast <span class="variable">$vip</span> up</span><br><span class="line">route add -host <span class="variable">$vip</span> dev <span class="variable">$interface</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">ifconfig <span class="variable">$interface</span> down</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$(basename $0)</span> start|stop"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>分别在node02、node03上运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node02 ~]<span class="comment">#bash  setkpara.sh start</span></span><br><span class="line">[root@node03 ~]<span class="comment">#bash  setkpara.sh start</span></span><br></pre></td></tr></table></figure><p>配置DS ipvsadm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment">#ipvsadm -A -t 192.168.146.100:80 -s wrr</span></span><br><span class="line">[root@node01 ~]<span class="comment">#ipvsadm -a -t 192.168.146.100:80 -r 192.168.146.154:80 -g -w 2  </span></span><br><span class="line">[root@node01 ~]<span class="comment">#ipvsadm -a -t 192.168.146.100:80 -r 192.168.146.139:80 -g -w 3</span></span><br><span class="line">[root@node01 ~]<span class="comment">#ipvsadm -Ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.146.100:80 wrr</span><br><span class="line">  -&gt; 192.168.146.139:80           Route   3      0          0         </span><br><span class="line">  -&gt; 192.168.146.154:80           Route   2      0          0</span><br></pre></td></tr></table></figure><p>在另外一个终端发请求进行模拟</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#while true ;do curl 192.168.146.100;sleep .5;done</span></span><br></pre></td></tr></table></figure><p>在调度器node01查下ipvsadm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 ~]<span class="comment">#ipvsadm -ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.146.100:80 wrr</span><br><span class="line">  -&gt; 192.168.146.139:80           Route   3      0          90        </span><br><span class="line">  -&gt; 192.168.146.154:80           Route   2      0          60</span><br></pre></td></tr></table></figure><p><em>调度器可以写成脚本（vs的配置脚本）</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">vip=<span class="string">'192.168.146.100'</span></span><br><span class="line">interface=<span class="string">'ens37:0'</span></span><br><span class="line">mask=<span class="string">'255.255.255.255'</span></span><br><span class="line">port=<span class="string">'80'</span></span><br><span class="line">rs1=<span class="string">'192.168.146.154'</span></span><br><span class="line">rs2=<span class="string">'192.168.146.139'</span></span><br><span class="line">scheduler=<span class="string">'wrr'</span></span><br><span class="line"><span class="built_in">type</span>=<span class="string">'-g'</span></span><br><span class="line">weight1=<span class="string">'2'</span></span><br><span class="line">weight2=<span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">ifconfig <span class="variable">$interface</span> <span class="variable">$vip</span> netmask <span class="variable">$mask</span> broadcast <span class="variable">$vip</span> up</span><br><span class="line">iptables -F</span><br><span class="line">ipvsadm -A -t <span class="variable">$&#123;vip&#125;</span>:<span class="variable">$&#123;port&#125;</span> -s <span class="variable">$scheduler</span></span><br><span class="line">ipvsadm -a -t <span class="variable">$&#123;vip&#125;</span>:<span class="variable">$&#123;port&#125;</span> -r <span class="variable">$&#123;rs1&#125;</span> <span class="variable">$type</span> -w <span class="variable">$&#123;weight1&#125;</span></span><br><span class="line">ipvsadm -a -t <span class="variable">$&#123;vip&#125;</span>:<span class="variable">$&#123;port&#125;</span> -r <span class="variable">$&#123;rs2&#125;</span> <span class="variable">$type</span> -w <span class="variable">$&#123;weight2&#125;</span></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">stop)</span><br><span class="line">        ipvsadm -C</span><br><span class="line">        ifconfig <span class="variable">$interface</span> down</span><br><span class="line">        ;;</span><br><span class="line"></span><br><span class="line">*)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage <span class="variable">$(basename $0)</span> start|stop"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h1 id="FireWall-Mark"><a href="#FireWall-Mark" class="headerlink" title="FireWall Mark"></a>FireWall Mark</h1><p>&ensp;&ensp;&ensp;&ensp;MARK target 可用于给特定的报文打标记</p><ul><li><p>–set-mark value</p><p>  其中：value 可为0xffff格式，表示十六进制数字</p></li><li><p>借助于防火墙标记来分类报文，而后基于标记定义集群服务；可将多个不同的应用使用同一个集群服务进行调度</p></li><li><p>实现方法：      </p></li></ul><p>• 在Director主机打标记：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t mangle -A PREROUTING -d <span class="variable">$vip</span> -p <span class="variable">$proto</span> –m multiport --dports <span class="variable">$port1</span>,<span class="variable">$port2</span>, -j MARK --<span class="built_in">set</span>-mark NUMBER</span><br></pre></td></tr></table></figure><p>• 在Director主机基于标记定义集群服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -A -f NUMBER [options]</span><br></pre></td></tr></table></figure><p> 根据上面lvs-dr实验，在rs两台服务器上分别增加一个端口配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@node02 ~]<span class="comment">#vim /etc/httpd/conf.d/myvhosts.conf</span></span><br><span class="line">Listen 8080</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">        ServerName <span class="string">"192.168.146.154"</span></span><br><span class="line">        DocumentRoot <span class="string">"/www/vhost1"</span></span><br><span class="line">        &lt;Directory <span class="string">"www/vhost1"</span>&gt;</span><br><span class="line">                Options none</span><br><span class="line">                AllowOverride none</span><br><span class="line">                Require all granted</span><br><span class="line">        &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:8080&gt;</span><br><span class="line">        ServerName <span class="string">"192.168.146.154"</span></span><br><span class="line">        DocumentRoot <span class="string">"/www/vhost2"</span></span><br><span class="line">        &lt;Directory <span class="string">"www/vhost2"</span>&gt;</span><br><span class="line">                Options none</span><br><span class="line">                AllowOverride none</span><br><span class="line">                Require all granted</span><br><span class="line">        &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">[root@node02 ~]<span class="comment">#mkdir -pv /www/vhost&#123;1,2&#125;</span></span><br><span class="line">[root@node02 ~]<span class="comment">#vim /www/vhost1/index.html</span></span><br><span class="line">&lt;h1&gt;node02:80&lt;/h1&gt;</span><br><span class="line">[root@node02 ~]<span class="comment">#vim /www/vhost2/index.html</span></span><br><span class="line">&lt;h1&gt;node02:8080&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">另外一台做同样的修改</span><br></pre></td></tr></table></figure><p>把上述调度器的脚本修改下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">vip=<span class="string">'192.168.146.100'</span></span><br><span class="line">interface=<span class="string">'ens37:0'</span></span><br><span class="line">mask=<span class="string">'255.255.255.255'</span></span><br><span class="line">port1=<span class="string">'80'</span></span><br><span class="line">port2=<span class="string">'8080'</span></span><br><span class="line">rs1=<span class="string">'192.168.146.154'</span></span><br><span class="line">rs2=<span class="string">'192.168.146.139'</span></span><br><span class="line">scheduler=<span class="string">'wrr'</span></span><br><span class="line"><span class="built_in">type</span>=<span class="string">'-g'</span></span><br><span class="line">weight1=<span class="string">'2'</span></span><br><span class="line">weight2=<span class="string">'3'</span></span><br><span class="line">number=<span class="string">'7'</span></span><br><span class="line">proto=<span class="string">'tcp'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">        ifconfig <span class="variable">$interface</span> <span class="variable">$vip</span> netmask <span class="variable">$mask</span> broadcast <span class="variable">$vip</span> up</span><br><span class="line">        iptables -F</span><br><span class="line">        iptables -t mangle -A PREROUTING -d <span class="variable">$vip</span> -p <span class="variable">$proto</span> -m multiport --dports <span class="variable">$port1</span>,<span class="variable">$port2</span> -j MARK --<span class="built_in">set</span>-mark <span class="variable">$number</span></span><br><span class="line">        ipvsadm -A -f <span class="variable">$&#123;number&#125;</span> -s <span class="variable">$scheduler</span></span><br><span class="line">        ipvsadm -a -f <span class="variable">$&#123;number&#125;</span> -r <span class="variable">$&#123;rs1&#125;</span> <span class="variable">$type</span> -w <span class="variable">$&#123;weight1&#125;</span></span><br><span class="line">        ipvsadm -a -f <span class="variable">$&#123;number&#125;</span> -r <span class="variable">$&#123;rs2&#125;</span> <span class="variable">$type</span> -w <span class="variable">$&#123;weight2&#125;</span></span><br><span class="line">        ;;</span><br><span class="line"></span><br><span class="line">stop)</span><br><span class="line">        ipvsadm -C</span><br><span class="line">        ifconfig <span class="variable">$interface</span> down</span><br><span class="line">        ;;</span><br><span class="line"></span><br><span class="line">*)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Usage <span class="variable">$(basename $0)</span> start|stop"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>在另外一个终端发请求进行模拟<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#while true; do curl 192.168.146.100;do curl 192.168.146.100:8080;sleep 0.5; done</span></span><br></pre></td></tr></table></figure></p><h1 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h1><ol><li>session 绑定：对共享同一组RS的多个集群服务，需要统一进行绑定，lvs sh算法无法实现</li><li>持久连接（ lvs persistence ）模板：实现无论使用任何调度算法，在一段时间内（默认360s ），能够实现将来自同一个地址的请求始终发往同一个RS</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -A|E -t|u|f service-address [-s scheduler][-p [timeout]]</span><br></pre></td></tr></table></figure><p>持久连接实现方式：</p><ol><li>每端口持久（PPC）：每个端口定义为一个集群服务，每集群服务单独调度</li><li>每防火墙标记持久（PFWMC）：基于防火墙标记定义集群服务；可实现将多个端口上的应用统一调度，即所谓的port Affinity</li><li>每客户端持久（PCC）：基于0端口（表示所有服务）定义集群服务，即将客户端对所有应用的请求都调度至后端主机，必须定义为持久模式 </li></ol><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/Linux%E6%A0%87%E5%BF%97.jpg?raw=true" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;Cluster集群&quot;&gt;&lt;a href=&quot;#Cluster集群&quot; c
      
    
    </summary>
    
      <category term="lvs" scheme="http://yoursite.com/categories/lvs/"/>
    
    
      <category term="lvs" scheme="http://yoursite.com/tags/lvs/"/>
    
  </entry>
  
  <entry>
    <title>Ansible的高级用法之playbook和roles</title>
    <link href="http://yoursite.com/2018/12/31/Ansible%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E4%B9%8Bplaybook%E5%92%8Croles/"/>
    <id>http://yoursite.com/2018/12/31/Ansible的高级用法之playbook和roles/</id>
    <published>2018-12-30T16:00:00.000Z</published>
    <updated>2019-02-11T09:00:11.849Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="playbook概念"><a href="#playbook概念" class="headerlink" title="playbook概念"></a>playbook概念</h1><p>playbook是由一个或多个“play” 组成的列表<br>play的主要功能在于将预定义的一组主机，装扮成事先通过ansible中的task定义好的角色。 Task实际是调用ansible的一个module，将多个play组织在一个playbook中，即可以让它们联合起来，按事先编排的机制执行预定义的动作<br>Playbook采用YAML语言编写  </p><h1 id="YAML介绍"><a href="#YAML介绍" class="headerlink" title="YAML介绍"></a>YAML介绍</h1><p>&ensp;&ensp;&ensp;&ensp;YAML是一个可读性高的用来表达资料序列的格式。 YAML参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822等。 Clark Evans在2001年在首次发表了这种语言，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者.</p><p>YAML Ain’t Markup Language，即YAML不是XML。不过，在开发的这种语言时，YAML的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li><p>YAML的可读性好  </p></li><li><p>YAML和脚本语言的交互性好  </p></li><li>YAML使用实现语言的数据类型  </li><li>YAML有一个一致的信息模型  </li><li>YAML易于实现  </li><li>YAML可以基于流来处理  </li><li>YAML表达能力强，扩展性好  </li></ol><h1 id="YAML语法简介"><a href="#YAML语法简介" class="headerlink" title="YAML语法简介"></a>YAML语法简介</h1><ul><li><p>在单一档案中，可用连续三个连字号(—)区分多个档案。另外，还有选择性的连续三个点号( … )用来表示档案结尾  </p></li><li><p>次行开始正常写Playbook的内容，一般建议写明该Playbook的功能  </p></li><li>使用#号注释代码  </li><li>缩进必须是统一的，不能空格和tab混用  </li><li>缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行来实现的</li><li>YAML文件内容是区别大小写的，k/v的值均需大小写敏感  </li><li>k/v的值可同行写也可换行写。同行使用:分隔  </li><li>v可是个字符串，也可是另一个列表  </li><li>一个完整的代码块功能需最少元素需包括 name: task  </li><li>一个name只能包括一个task  </li><li>YAML文件扩展名通常为yml或yaml  </li></ul><h2 id="List：列表，其所有元素均使用“-”-打头"><a href="#List：列表，其所有元素均使用“-”-打头" class="headerlink" title="List：列表，其所有元素均使用“-” 打头"></a>List：列表，其所有元素均使用“-” 打头</h2><p>示例：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A list of tasty fruits  </span></span><br><span class="line"></span><br><span class="line">- Apple</span><br><span class="line">- Orange</span><br><span class="line">- Strawberry</span><br><span class="line">- Mango</span><br></pre></td></tr></table></figure><h2 id="Dictionary：字典，通常由多个key与value构成"><a href="#Dictionary：字典，通常由多个key与value构成" class="headerlink" title="Dictionary：字典，通常由多个key与value构成"></a>Dictionary：字典，通常由多个key与value构成</h2><h2 id="示例："><a href="#示例：" class="headerlink" title="示例： "></a>示例： </h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="comment"># An employee record  </span></span><br><span class="line">name: Example Developer  </span><br><span class="line">job: Developer  </span><br><span class="line">skill: Elite</span><br></pre></td></tr></table></figure><p>也可以将key:value放置于{}中进行表示，用,分隔多个key:value</p><h2 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例：  "></a>示例：  </h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="comment"># An employee record  </span></span><br><span class="line">&#123;name: Example Developer, job: Developer, skill: Elite&#125;</span><br></pre></td></tr></table></figure><p>YAML的语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。其结构（Structure）通过空格来展示，序列（Sequence）里的项用”-“来代表，Map里的键值对用”:”分隔<br>示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">name: John Smith</span><br><span class="line">age: 41</span><br><span class="line">gender: Male</span><br><span class="line">spouse:</span><br><span class="line">name: Jane Smith</span><br><span class="line">age: 37</span><br><span class="line">gender: Female</span><br><span class="line">children:</span><br><span class="line">- name: Jimmy Smith</span><br><span class="line">age: 17</span><br><span class="line">gender: Male</span><br><span class="line">- name: Jenny Smith</span><br><span class="line">age 13</span><br><span class="line">gender: Female</span><br></pre></td></tr></table></figure></p><h1 id="Playbook核心元素"><a href="#Playbook核心元素" class="headerlink" title="Playbook核心元素"></a>Playbook核心元素</h1><ol><li>Hosts 执行的远程主机列表  </li><li>Tasks 任务集  </li><li>Varniables 内置变量或自定义变量在playbook中调用  </li><li>Templates 模板，可替换模板文件中的变量并实现一些简单逻辑的文件  </li><li>Handlers 和notity结合使用，由特定条件触发的操作，满足条件方才执行，否则不执行  </li><li>tags 标签 指定某条任务执行，用于选择运行playbook中的部分代码。 ansible具有幂等性，因此会自动跳过没有变化的部分，即便如此，有些代码为测试其确实没有发生变化的时间依然会非常地长。此时，如果确信其没有变化，就可以通过tags跳过此些代码片断  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook –t tagsname useradd.yml</span><br></pre></td></tr></table></figure></li></ol><h1 id="playbook基础组件"><a href="#playbook基础组件" class="headerlink" title="playbook基础组件"></a>playbook基础组件</h1><h2 id="Hosts"><a href="#Hosts" class="headerlink" title="Hosts"></a>Hosts</h2><p>&ensp;&ensp;&ensp;&ensp;playbook中的每一个play的目的都是为了让特定主机以某个指定的用户身份执行任务。 hosts用于指定要执行指定任务的主机，须事先定义在主机清单中<br>可以是如下形式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">one.example.com</span><br><span class="line">one.example.com:two.example.com</span><br><span class="line">192.168.1.50</span><br><span class="line">192.168.1.*</span><br></pre></td></tr></table></figure></p><p>Websrvs:dbsrvs 或者，两个组的并集<br>Websrvs:&amp;dbsrvs 与，两个组的交集<br>webservers:!phoenix 在websrvs组，但不在dbsrvs组<br>示例: <code>- hosts: websrvs：dbsrvs</code>   </p><h2 id="remote-user"><a href="#remote-user" class="headerlink" title="remote_user"></a>remote_user</h2><p>&ensp;&ensp;&ensp;&ensp;用于Host和task中。也可以通过指定其通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务；此外，甚至可以在sudo时使用sudo_user指定sudo时切换的用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- hosts: websrvs</span><br><span class="line">remote_user: root</span><br><span class="line">tasks:</span><br><span class="line">- name: <span class="built_in">test</span> connection</span><br><span class="line">ping:</span><br><span class="line">remote_user: magedu</span><br><span class="line">sudo: yes                默认sudo为root</span><br><span class="line">sudo_user:wang           sudo为wang</span><br></pre></td></tr></table></figure></p><h2 id="task列表和action"><a href="#task列表和action" class="headerlink" title="task列表和action"></a>task列表和action</h2><p>&ensp;&ensp;&ensp;&ensp;play的主体部分是task list。 task list中的各任务按次序逐个在hosts中指定的所有主机上执行，即在所有主机上完成第一个任务后，再开始第二个任务<br>task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致<br>每个task都应该有其name，用于playbook的执行结果输出，建议其内容能清晰地描述任务执行步骤。如果未提供name，则action的结果将用于输出  </p><h3 id="tasks：任务列表"><a href="#tasks：任务列表" class="headerlink" title="tasks：任务列表"></a>tasks：任务列表</h3><p>两种格式：</p><ul><li>action: module arguments</li><li>module: arguments 建议使用<br><code>注意：shell和command模块后面跟命令，而非key=value</code></li></ul><p>任务可以通过”tags“打标签，可在ansible-playbook命令上使用-t指定进行调用<br>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tasks:  </span><br><span class="line">- name: <span class="built_in">disable</span> selinux  </span><br><span class="line"><span class="built_in">command</span>: /sbin/setenforce 0  </span><br><span class="line"></span><br><span class="line">如果命令或脚本的退出码不为零，可以使用如下方式替代  </span><br><span class="line"></span><br><span class="line">tasks:  </span><br><span class="line">- name: run this <span class="built_in">command</span> and ignore the result  </span><br><span class="line">shell: /usr/bin/somecommand || /bin/<span class="literal">true</span>  </span><br><span class="line"></span><br><span class="line">或者使用ignore_errors来忽略错误信息  </span><br><span class="line"></span><br><span class="line">tasks:  </span><br><span class="line">- name: run this <span class="built_in">command</span> and ignore the result  </span><br><span class="line">shell: /usr/bin/somecommand  </span><br><span class="line">ignore_errors: True</span><br></pre></td></tr></table></figure></p><h1 id="运行playbook的方式"><a href="#运行playbook的方式" class="headerlink" title="运行playbook的方式"></a>运行playbook的方式</h1><blockquote><p>ansible-playbook &lt;filename.yml&gt; … [options]</p></blockquote><p>常见选项:<br>–check -C 只检测可能会发生的改变，但不真正执行操作<br>–list-hosts 列出运行任务的主机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook test.yml --list-hosts</span></span><br><span class="line"></span><br><span class="line">playbook: test.yml</span><br><span class="line"></span><br><span class="line">  play <span class="comment">#1 (appsrvs): appsrvs    TAGS: []</span></span><br><span class="line">    pattern: [u<span class="string">'appsrvs'</span>]</span><br><span class="line">    hosts (2):</span><br><span class="line">      192.168.183.132</span><br><span class="line">      192.168.183.129</span><br></pre></td></tr></table></figure></p><p>–list-tags 列出tag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook test.yml --list-tags  </span></span><br><span class="line"></span><br><span class="line">playbook: test.yml</span><br><span class="line"></span><br><span class="line">  play <span class="comment">#1 (appsrvs): appsrvs    TAGS: []</span></span><br><span class="line">      TASK TAGS: []</span><br></pre></td></tr></table></figure></p><p>–list-tasks 列出task<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook test.yml --list-tasks</span></span><br><span class="line">playbook: test.yml</span><br><span class="line"></span><br><span class="line">  play <span class="comment">#1 (appsrvs): appsrvs    TAGS: []</span></span><br><span class="line">    tasks:</span><br><span class="line">      first task        TAGS: []</span><br><span class="line">      second task       TAGS: []</span><br></pre></td></tr></table></figure></p><p>–limit 主机列表 只针对主机列表中的主机执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook test.yml --limit 192.168.183.129</span></span><br></pre></td></tr></table></figure></p><p>-v -vv -vvv 显示过程</p><h1 id="Playbook示例"><a href="#Playbook示例" class="headerlink" title="Playbook示例"></a>Playbook示例</h1><p>安装httpd，并且开机启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#vim /etc/ansible/hosts </span></span><br><span class="line"></span><br><span class="line"><span class="comment">##[dbservers]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##db01.intranet.mydomain.net</span></span><br><span class="line"><span class="comment">##db02.intranet.mydomain.net</span></span><br><span class="line"><span class="comment">##10.25.1.56</span></span><br><span class="line"><span class="comment">##10.25.1.57</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Here's another example of host ranges, this time there are no</span></span><br><span class="line"><span class="comment"># leading 0s:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## db-[99:101]-node.example.com   </span></span><br><span class="line"></span><br><span class="line">[appsrvs]             <span class="comment">#添加分组</span></span><br><span class="line">192.168.183.132</span><br><span class="line">192.168.183.129</span><br><span class="line">~                                                        </span><br><span class="line"><span class="string">"/etc/ansible/hosts"</span> 50L, 1100C        47,0-1        Bot</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim httpd.yml                </span></span><br><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: creat group</span><br><span class="line">      group: name=apache system=yes gid=80</span><br><span class="line">    - name: creat user</span><br><span class="line">      user: name=apache group=apache uid=80 shell=/sbin/nologin home=/usr/share/httpd system=yes password=<span class="string">'$1$MrKn.0gj$CvMvkger.03UzBwQIrya.0'</span></span><br><span class="line">    - name: install package</span><br><span class="line">      yum: name=httpd</span><br><span class="line">    - name: config file</span><br><span class="line">      copy: src=/root/playbook/httpd.conf dest=/etc/httpd/conf/ backup=yes</span><br><span class="line">    - name: service</span><br><span class="line">      service: name=httpd state=started enabled=yes      </span><br><span class="line">~</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook httod.yml</span></span><br></pre></td></tr></table></figure></p><h2 id="handlers和notify结合使用触发条件"><a href="#handlers和notify结合使用触发条件" class="headerlink" title="handlers和notify结合使用触发条件"></a>handlers和notify结合使用触发条件</h2><p>Handlers<br>是task列表，这些task与前述的task并没有本质上的不同,用于当关注的资源发生变化时，才会采取一定的操作<br>Notify<br>此action可用于在每个play的最后被触发，这样可避免多次有改变发生时每次都执行指定的操 作，仅在所有的变化发生完成后一次性地执行指定操作。在notify中列出的操作称handler，也即notify中调用handler中定义的操作  </p><p>&ensp;&ensp;&ensp;&ensp;如果httpd.conf文件内容修改了再运行一遍httpd.yml，只有config file发生改变，其他任务不会继续做了，所以把上述的playbook改写一下,加上notify和handlers：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#vim httpd.yml                </span></span><br><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: creat group</span><br><span class="line">      group: name=apache system=yes gid=80</span><br><span class="line">    - name: creat user</span><br><span class="line">      user: name=apache group=apache uid=80 shell=/sbin/nologin home=/usr/share/httpd system=yes password=<span class="string">'$1$MrKn.0gj$CvMvkger.03UzBwQIrya.0'</span></span><br><span class="line">    - name: install package</span><br><span class="line">      yum: name=httpd</span><br><span class="line">    - name: config file</span><br><span class="line">      copy: src=/root/playbook/httpd.conf dest=/etc/httpd</span><br><span class="line">      notify: restart service</span><br><span class="line">/conf/ backup=yes</span><br><span class="line">    - name: service</span><br><span class="line">      service: name=httpd state=started enabled=yes</span><br><span class="line">   handlers: </span><br><span class="line">    - name: restart service</span><br><span class="line">      service: name=httpd state=restart</span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook httod.yml</span></span><br><span class="line">如果我们httpd端口80 改成8080，再运行一遍`ansible-playbook`时，这时就只会触发重启httpd服务</span><br></pre></td></tr></table></figure></p><h2 id="Playbook中tags使用"><a href="#Playbook中tags使用" class="headerlink" title="Playbook中tags使用"></a>Playbook中tags使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#vim httpd.yml                </span></span><br><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: creat group</span><br><span class="line">      group: name=apache system=yes gid=80</span><br><span class="line">    - name: creat user</span><br><span class="line">      user: name=apache group=apache uid=80 shell=/sbin/nologin home=/usr/share/httpd system=yes password=<span class="string">'$1$MrKn.0gj$CvMvkger.03UzBwQIrya.0'</span></span><br><span class="line">    - name: install package</span><br><span class="line">      yum: name=httpd</span><br><span class="line">      tags: install</span><br><span class="line">    - name: config file</span><br><span class="line">      copy: src=/root/playbook/httpd.conf dest=/etc/httpd</span><br><span class="line">      tags: config</span><br><span class="line">      notify: restart service</span><br><span class="line">/conf/ backup=yes</span><br><span class="line">    - name: service</span><br><span class="line">      service: name=httpd state=started enabled=yes</span><br><span class="line">   handlers: </span><br><span class="line">    - name: restart service</span><br><span class="line">      service: name=httpd state=restart</span><br></pre></td></tr></table></figure><p>给playbook打上tags我们就可以单独的执行tags的那部分tasks</p><p><code>[root@centos7 playbook]#ansible-playbook -t install httpd.yml</code>   仅仅执行了安装httpd</p><h1 id="Playbook中变量使用"><a href="#Playbook中变量使用" class="headerlink" title="Playbook中变量使用"></a>Playbook中变量使用</h1><h2 id="变量来源："><a href="#变量来源：" class="headerlink" title="变量来源："></a>变量来源：</h2><ol><li>ansible setup facts 远程主机的所有变量都可直接调用  </li><li><p>在/etc/ansible/hosts中定义  </p><blockquote><p>普通变量：主机组中主机单独定义，优先级高于公共变量<br>公共（组）变量：针对主机组中所有主机定义统一变量  </p></blockquote></li><li><p>通过命令行指定变量，优先级最高</p><blockquote><p>ansible-playbook –e varname=value</p></blockquote></li><li><p>在playbook中定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vars:</span><br><span class="line">- var1: value1</span><br><span class="line">- var2: value2</span><br></pre></td></tr></table></figure></li><li><p>在独立的变量YAML文件中定义  </p></li><li>在role中定义  </li></ol><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><p>变量名仅能由字母、数字和下划线组成，且只能以字母开头  </p><h2 id="变量定义：key-value"><a href="#变量定义：key-value" class="headerlink" title="变量定义：key=value"></a>变量定义：key=value</h2><p>示例：<code>http_port=80</code>  </p><h2 id="变量调用方式"><a href="#变量调用方式" class="headerlink" title="变量调用方式"></a>变量调用方式</h2><p>通过 调用变量，且变量名前后必须有空格，有时用“”才生效</p><blockquote><p>ansible-playbook –e 选项指定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook test.yml -e “hosts=www user=magedu”</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="使用setup变量"><a href="#使用setup变量" class="headerlink" title="使用setup变量"></a>使用setup变量</h3><p>示例：var.yml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: create <span class="built_in">log</span> file</span><br><span class="line">      file: name=/var/<span class="built_in">log</span>/ &#123;&#123; ansible_fqdn &#125;&#125; state=touch</span><br><span class="line">ansible-playbook var.yml</span><br></pre></td></tr></table></figure></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>示例：var.yml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:</span><br><span class="line">    - username: user1</span><br><span class="line">    - groupname: group1</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: create group</span><br><span class="line">      group: name=&#123;&#123; groupname &#125;&#125; state=present</span><br><span class="line">    - name: create user</span><br><span class="line">      user: name=&#123;&#123; username &#125;&#125; state=present</span><br><span class="line">ansible-playbook var.yml</span><br><span class="line">ansible-playbook -e <span class="string">"username=user2 groupname=group2” var2.yml</span></span><br></pre></td></tr></table></figure></p><ol><li>主机变量  </li></ol><p>可以在inventory中定义主机时为其添加主机变量以便于在playbook中使用<br>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[websrvs]</span><br><span class="line">www1.magedu.com http_port=80 maxRequestsPerChild=808</span><br><span class="line">www2.magedu.com http_port=8080 maxRequestsPerChild=909</span><br></pre></td></tr></table></figure></p><ol start="2"><li>组变量  </li></ol><p>组变量是指赋予给指定组内所有主机上的在playbook中可用的变量<br>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[websrvs]</span><br><span class="line">www1.magedu.com</span><br><span class="line">www2.magedu.com</span><br><span class="line">[websrvs:vars]</span><br><span class="line">ntp_server=ntp.magedu.com</span><br><span class="line">nfs_server=nfs.magedu.com</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>普通变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[websrvs]</span><br><span class="line">192.168.99.101 http_port=8080 hname=www1</span><br><span class="line">192.168.99.102 http_port=80 hname=www2</span><br></pre></td></tr></table></figure></li><li><p>公共（组）变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[websvrs:vars]</span><br><span class="line">http_port=808</span><br><span class="line">mark=“_”</span><br><span class="line">[websrvs]</span><br><span class="line">192.168.99.101 http_port=8080 hname=www1</span><br><span class="line">192.168.99.102 http_port=80 hname=www2</span><br><span class="line">ansible websvrs –m hostname –a <span class="string">'name=&#123;&#123; hname &#125;&#125;&#123;&#123; mark &#125;&#125;&#123;&#123; http_port &#125;&#125;'</span></span><br></pre></td></tr></table></figure></li><li><p>命令行指定变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible websvrs –e http_port=8000 –m hostname –a <span class="string">'name=&#123;&#123; hname &#125;&#125;&#123;&#123; mark &#125;&#125;&#123;&#123; http_port &#125;&#125;'</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="模板templates"><a href="#模板templates" class="headerlink" title="模板templates"></a>模板templates</h1><ol><li>文本文件，嵌套有脚本（使用模板编程语言编写）  </li><li><p>Jinja2语言，使用字面量，有下面形式  </p><blockquote><p>字符串：使用单引号或双引号<br>数字：整数，浮点数<br>列表：[item1, item2, …]<br>元组：(item1, item2, …)<br>字典：{key1:value1, key2:value2, …}<br>布尔型：true/false<br>算术运算：+, -, *, /, //, %, **<br>比较操作：==, !=, &gt;, &gt;=, &lt;, &lt;=<br>逻辑运算：and, or, not<br>流表达式：For If When  </p></blockquote></li><li><p>templates功能：根据模块文件动态生成对应的配置文件  </p></li><li>templates文件必须存放于templates目录下，且命名为 .j2 结尾  </li><li><p>yaml/yml 文件需和templates目录平级，目录结构如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./</span><br><span class="line">├── temnginx.yml</span><br><span class="line">└── templates</span><br><span class="line">    └── nginx.conf.j2</span><br></pre></td></tr></table></figure></li><li><p>Playbook中template变更替换  </p></li><li>Playbook中template算术运算  </li></ol><h2 id="Templates示例"><a href="#Templates示例" class="headerlink" title="Templates示例"></a>Templates示例</h2><p>利用templates 同步nginx配置文件，并修改配置文件nginx.conf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#mkdir templates</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#mv nginx.conf templates/nginx.conf.j2</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── test_templ.yml</span><br><span class="line">├── templates</span><br><span class="line">   └── nginx.conf.j2</span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim test_templ.yml</span></span><br><span class="line">---</span><br><span class="line">  - hosts: appsrvs</span><br><span class="line">    remote_user: root</span><br><span class="line"></span><br><span class="line">    tasks:</span><br><span class="line">      - name: install</span><br><span class="line">        yum: name=nginx</span><br><span class="line">      - name: template</span><br><span class="line">        template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">        notify: restart</span><br><span class="line">      - name: service</span><br><span class="line">        service: name=nginx state=started enabled=yes</span><br><span class="line">    handlers:</span><br><span class="line">      - name: restart</span><br><span class="line">        service: name=nginx state=restarted</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook test_templ.yml</span></span><br><span class="line">.........省略结果</span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible appsrvs -a 'ss -ntlp' #查看80端口是否开启</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible appsrvs -m shell -a 'ps axu | grep nginx'</span></span><br><span class="line">192.168.183.137 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      16688  0.0  0.1 120812  2228 ?        Ss   21:15   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     16689  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">nginx     16690  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx:  worker process</span><br><span class="line">root      16755  0.0  0.0 113172  1196 pts/1    S+   21:15   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      16757  0.0  0.0 112704   940 pts/1    S+   21:15   0:00 grep nginx</span><br><span class="line">192.168.183.136 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      18759  0.0  0.1 122924  2100 ?        Ss   20:46   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     18760  0.0  0.1 125472  3540 ?        S    20:46   0:00 nginx: worker process</span><br><span class="line">root      36053  0.0  0.0 113128  1196 pts/1    S+   21:15   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      36055  0.0  0.0 112664   948 pts/1    S+   21:15   0:00 grep nginx</span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible appsrvs -m shell -a 'ps axu | grep nginx'           </span></span><br><span class="line">192.168.183.137 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      16688  0.0  0.1 120812  2228 ?        Ss   21:15   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     16689  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">nginx     16690  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">root      16755  0.0  0.0 113172  1196 pts/1    S+   21:15   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      16757  0.0  0.0 112704   940 pts/1    S+   21:15   0:00 grep nginx</span><br><span class="line"></span><br><span class="line">192.168.183.136 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      18759  0.0  0.1 122924  2100 ?        Ss   20:46   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     18760  0.0  0.1 125472  3540 ?        S    20:46   0:00 nginx: worker process</span><br><span class="line">root      36053  0.0  0.0 113128  1196 pts/1    S+   21:15   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      36055  0.0  0.0 112664   948 pts/1    S+   21:15   0:00 grep nginx</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible appsrvs -m setup -a 'filter=ansible_processor_count'</span></span><br><span class="line">192.168.183.136 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"ansible_processor_count"</span>: 1</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.183.137 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"ansible_processor_count"</span>: 2</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker process 与 CPU数量一致</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim templates/nginx.conf.j2</span></span><br><span class="line">.....省略.....</span><br><span class="line">worker_processes &#123;&#123; ansible_processor_count*2 &#125;&#125;;   <span class="comment">#Playbook中template算术运算</span></span><br><span class="line">.....省略.....</span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible appsrvs -m shell -a 'ps axu | grep nginx'           </span></span><br><span class="line">192.168.183.136 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      18759  0.0  0.1 122924  2100 ?        Ss   20:46   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     18760  0.0  0.1 125472  3540 ?        S    20:46   0:00 nginx: worker process</span><br><span class="line">nginx     18761  0.0  0.1 125472  3540 ?        S    20:46   0:00 nginx: worker process</span><br><span class="line">root      36485  0.0  0.0 113128  1196 pts/1    S+   21:36   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      36487  0.0  0.0 112664   944 pts/1    S+   21:36   0:00 grep nginx</span><br><span class="line"></span><br><span class="line">192.168.183.137 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      16688  0.0  0.1 120812  2228 ?        Ss   21:15   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     16689  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">nginx     16690  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">nginx     16691  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">nginx     16692  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">root      17220  0.0  0.0 113172  1200 pts/1    S+   21:36   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      17222  0.0  0.0 112704   940 pts/1    S+   21:36   0:00 grep nginx</span><br></pre></td></tr></table></figure></p><h1 id="when"><a href="#when" class="headerlink" title="when"></a>when</h1><p>&ensp;&ensp;&ensp;&ensp;条件测试:如果需要根据变量、 facts或此前任务的执行结果来做为某task执行与否的前提时要用到条件测试,通过when语句实现，在task中使用，jinja2的语法<br>格式  </p><p>when语句<br>在task后添加when子句即可使用条件测试；when语句支持Jinja2表达式语法<br>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#tree templates/</span></span><br><span class="line">templates/</span><br><span class="line">├── httpd6.conf.j2</span><br><span class="line">└── httpd7.conf.j2</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim httpd.yml </span></span><br><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: install </span><br><span class="line">      yum: name=httpd</span><br><span class="line">    - name: template1</span><br><span class="line">      template: src=httpd6.conf.j2 dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">      when: ansible_distribution_major_version==<span class="string">"6"</span></span><br><span class="line">      notify: restart</span><br><span class="line">    - name: template2</span><br><span class="line">      template: src=httpd7.conf.j2 dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">      when: ansible_distribution_major_version==<span class="string">"7"</span></span><br><span class="line">      notify: restart</span><br><span class="line">    - name: service</span><br><span class="line">      service: name=httpd state=started enabled=yes</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart</span><br><span class="line">      service: name=httpd state=restart</span><br></pre></td></tr></table></figure></p><h1 id="迭代：with-items"><a href="#迭代：with-items" class="headerlink" title="迭代：with_items"></a>迭代：with_items</h1><p>迭代：当有需要重复性执行的任务时，可以使用迭代机制  </p><blockquote><p>对迭代项的引用，固定变量名为”item”<br>要在task中使用with_items给定要迭代的元素列表<br>列表格式：  </p><blockquote><p>字符串<br>字典  </p></blockquote></blockquote><p>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: add several users</span><br><span class="line">  user: name=&#123;&#123; item &#125;&#125; state=present groups=wheel</span><br><span class="line">  with_items:</span><br><span class="line">    - testuser1</span><br><span class="line">    - testuser2</span><br></pre></td></tr></table></figure></p><p>迭代嵌套子变量<br>例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- hosts：websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: add groups</span><br><span class="line">      group: name=&#123;&#123; item &#125;&#125;</span><br><span class="line">      with_items:</span><br><span class="line">        - group1</span><br><span class="line">        - group2</span><br><span class="line">        - group3</span><br><span class="line">    - name: add users</span><br><span class="line">      user: name=&#123;&#123; item.name &#125;&#125; group=&#123;&#123; item.group &#125;&#125;</span><br><span class="line">      with_items:</span><br><span class="line">        - &#123; name: <span class="string">'user1'</span>, group: <span class="string">'group1'</span> &#125;</span><br><span class="line">        - &#123; name: <span class="string">'user2'</span>, group: <span class="string">'group2'</span> &#125;</span><br><span class="line">        - &#123; name: <span class="string">'user3'</span>, group: <span class="string">'group3'</span> &#125;</span><br></pre></td></tr></table></figure></p><h1 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h1><p>&ensp;&ensp;&ensp;&ensp;ansible自1.2版本引入的新特性，用于层次性、结构化地组织playbook。roles能够根据层次型结构自动装载变量文件、tasks以及handlers等。要使用roles只需要在playbook中使用include指令即可。简单来讲,roles就是通过分别将变量、文件、任务、模板及处理器放置于单独的目录中，并可以便捷地include它们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中。</p><p>复杂场景：建议使用roles，代码复用度高  </p><p>变更指定主机或主机组<br>如命名不规范维护和传承成本大<br>某些功能需多个Playbook，通过includes即可实现  </p><h2 id="角色-roles-：角色集合"><a href="#角色-roles-：角色集合" class="headerlink" title="角色(roles)：角色集合"></a>角色(roles)：角色集合</h2><p>roles/<br>  mysql/<br>  httpd/<br>  nginx/<br>  memcached/</p><h2 id="roles目录结构"><a href="#roles目录结构" class="headerlink" title="roles目录结构"></a>roles目录结构</h2><p>每个角色，以特定的层级目录结构进行组织<br>roles目录结构：</p><p>playbook.yml<br>roles/<br>project/<br>tasks/<br>files/<br>vars/<br>templates/<br>handlers/<br>default/ 不常用<br>meta/ 不常用  </p><h2 id="Roles各目录作用"><a href="#Roles各目录作用" class="headerlink" title="Roles各目录作用"></a>Roles各目录作用</h2><p>/roles/project/ :项目名称,有以下子目录<br>files/ ：存放由copy或script模块等调用的文件<br>templates/：template模块查找所需要模板文件的目录<br>tasks/：定义task,role的基本元素，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含<br>handlers/：至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含<br>vars/：定义变量，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含<br>meta/：定义当前角色的特殊设定及其依赖关系,至少应该包含一个名为main.yml的文件，其它文件需在此文件中通过include进行包含<br>default/：设定默认变量时使用此目录中的main.yml文件  </p><h2 id="创建role"><a href="#创建role" class="headerlink" title="创建role"></a>创建role</h2><p>创建role的步骤  </p><ol><li>创建以roles命名的目录  </li><li>在roles目录中分别创建以各角色名称命名的目录，如webservers等  </li><li>在每个角色命名的目录中分别创建files、 handlers、 meta、 tasks、templates和vars目录；用不到的目录可以创建为空目录，也可以不创建  </li><li>在playbook文件中，调用各角色  </li></ol><h2 id="针对大型项目使用Roles进行编排"><a href="#针对大型项目使用Roles进行编排" class="headerlink" title="针对大型项目使用Roles进行编排"></a>针对大型项目使用Roles进行编排</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#mkdir roles</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#mkdir roles/httpd</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#tree roles/</span></span><br><span class="line">roles/</span><br><span class="line">└── httpd</span><br><span class="line"></span><br><span class="line">1 directories, 0 files</span><br><span class="line">[root@centos7 playbook]<span class="comment">#mkdir roles/httpd/&#123;files,tasks,templates,handlers,vars&#125;</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#tree roles/</span></span><br><span class="line">roles/</span><br><span class="line">└── httpd</span><br><span class="line">    ├── files</span><br><span class="line">    ├── handlers</span><br><span class="line">    ├── tasks</span><br><span class="line">    ├── templates</span><br><span class="line">    └── vars</span><br><span class="line"></span><br><span class="line">6 directories, 0 files</span><br><span class="line">[root@centos7 playbook]<span class="comment">#cd roles/httpd/</span></span><br><span class="line">[root@centos7 httpd]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">├── handlers</span><br><span class="line">├── tasks</span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br><span class="line"></span><br><span class="line">5 directories, 0 files</span><br><span class="line">[root@centos7 httpd]<span class="comment">#cd tasks/</span></span><br><span class="line">[root@centos7 tasks]<span class="comment">#touch user.yml group.yml config.yml install.yml service.yml</span></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim group.yml </span></span><br><span class="line">- name: useradd group</span><br><span class="line">  group: name=apache system=yes gid=80                   </span><br><span class="line">                                          </span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim user.yml </span></span><br><span class="line">- name: useradd user</span><br><span class="line">  user: name=apache group=apache shell=/sbin/nologin home=/usr/share/httpd system=yes                             </span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim install.yml </span></span><br><span class="line">- name: install package</span><br><span class="line">  yum: name=httpd</span><br><span class="line">                                                        </span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim config.yml </span></span><br><span class="line">- name: config file</span><br><span class="line">  copy: src=httpd.conf dest=/etc/httpd/conf/ backup=yes                       notify: restart</span><br><span class="line">                                             </span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim service.yml </span></span><br><span class="line">- name: service</span><br><span class="line">  service: name=httpd state=started enabled=yes</span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#ll</span></span><br><span class="line">total 20</span><br><span class="line">-rw-r--r-- 1 root root  76 Nov 24 00:41 config.yml</span><br><span class="line">-rw-r--r-- 1 root root  61 Nov 24 00:30 group.yml</span><br><span class="line">-rw-r--r-- 1 root root  42 Nov 24 00:39 install.yml</span><br><span class="line">-rw-r--r-- 1 root root  62 Nov 24 00:42 service.yml</span><br><span class="line">-rw-r--r-- 1 root root 107 Nov 24 00:34 user.yml</span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim main.yml</span></span><br><span class="line">- include: group.yml</span><br><span class="line">- include: user.yml</span><br><span class="line">- include: install.yml</span><br><span class="line">- include: config.yml</span><br><span class="line">- include: service.yml         </span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#cd ..</span></span><br><span class="line"></span><br><span class="line">[root@centos7 httpd]<span class="comment">#vim handlers/main.yml</span></span><br><span class="line">- name: restart</span><br><span class="line">  service: name=httpd state=restarted</span><br><span class="line"></span><br><span class="line">[root@centos7 httpd]<span class="comment">#cp /etc/httpd/conf/httpd.conf files/</span></span><br><span class="line">[root@centos7 httpd]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">│   └── httpd.conf</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tasks</span><br><span class="line">│   ├── config.yml</span><br><span class="line">│   ├── group.yml</span><br><span class="line">│   ├── install.yml</span><br><span class="line">│   ├── main.yml</span><br><span class="line">│   ├── service.yml</span><br><span class="line">│   └── user.yml</span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br><span class="line"></span><br><span class="line">5 directories, 8 files</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">[root@centos7 httpd]<span class="comment">#cd ../../</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim httpd_roles.yml</span></span><br><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  roles: </span><br><span class="line">    - role: httpd                                        </span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook httpd_roles.yml</span></span><br><span class="line"></span><br><span class="line">把httpd的文件复制一份到nginx里，然后改改</span><br><span class="line"></span><br><span class="line">[root@centos7 roles]<span class="comment">#cp -r httpd/ nginx/</span></span><br><span class="line">[root@centos7 roles]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── httpd</span><br><span class="line">│   ├── files</span><br><span class="line">│   │   └── httpd.conf</span><br><span class="line">│   ├── handlers</span><br><span class="line">│   │   └── main.yml</span><br><span class="line">│   ├── tasks</span><br><span class="line">│   │   ├── config.yml</span><br><span class="line">│   │   ├── group.yml</span><br><span class="line">│   │   ├── install.yml</span><br><span class="line">│   │   ├── main.yml</span><br><span class="line">│   │   ├── service.yml</span><br><span class="line">│   │   └── user.yml</span><br><span class="line">│   ├── templates</span><br><span class="line">│   └── vars</span><br><span class="line">└── nginx</span><br><span class="line">    ├── files</span><br><span class="line">    │   └── httpd.conf</span><br><span class="line">    ├── handlers</span><br><span class="line">    │   └── main.yml</span><br><span class="line">    ├── tasks</span><br><span class="line">    │   ├── config.yml</span><br><span class="line">    │   ├── group.yml</span><br><span class="line">    │   ├── install.yml</span><br><span class="line">    │   ├── main.yml</span><br><span class="line">    │   ├── service.yml</span><br><span class="line">    │   └── user.yml</span><br><span class="line">    ├── templates</span><br><span class="line">    └── vars</span><br><span class="line"></span><br><span class="line">12 directories, 16 files</span><br><span class="line">[root@centos7 roles]<span class="comment">#cd nginx/</span></span><br><span class="line">[root@centos7 nginx]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">│   └── httpd.conf</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tasks</span><br><span class="line">│   ├── config.yml</span><br><span class="line">│   ├── group.yml</span><br><span class="line">│   ├── install.yml</span><br><span class="line">│   ├── main.yml</span><br><span class="line">│   ├── service.yml</span><br><span class="line">│   └── user.yml</span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br><span class="line"></span><br><span class="line">5 directories, 8 files</span><br><span class="line">[root@centos7 nginx]<span class="comment">#rm -f tasks/&#123;group,user&#125;.yml</span></span><br><span class="line">[root@centos7 nginx]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">│   └── httpd.conf</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tasks</span><br><span class="line">│   ├── config.yml</span><br><span class="line">│   ├── install.yml</span><br><span class="line">│   ├── main.yml</span><br><span class="line">│   └── service.yml</span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br><span class="line"></span><br><span class="line">5 directories, 6 files</span><br><span class="line">[root@centos7 nginx]<span class="comment">#cp /etc/nginx/nginx.conf templates/nginx.conf.j2</span></span><br><span class="line">[root@centos7 nginx]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">│   └── httpd.conf</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tasks</span><br><span class="line">│   ├── config.yml</span><br><span class="line">│   ├── install.yml</span><br><span class="line">│   ├── main.yml</span><br><span class="line">│   └── service.yml</span><br><span class="line">├── templates</span><br><span class="line">│   └── nginx.conf.j2</span><br><span class="line">└── vars</span><br><span class="line"></span><br><span class="line">5 directories, 7 files</span><br><span class="line">[root@centos7 nginx]<span class="comment">#cd tasks/</span></span><br><span class="line">[root@centos7 tasks]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── config.yml</span><br><span class="line">├── install.yml</span><br><span class="line">├── main.yml</span><br><span class="line">└── service.yml</span><br><span class="line"></span><br><span class="line">0 directories, 4 files</span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim config.yml </span></span><br><span class="line">- name: config file</span><br><span class="line">  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">  notify: restart</span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim install.yml </span></span><br><span class="line">- name: install package</span><br><span class="line">  yum: name=nginx  </span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim main.yml</span></span><br><span class="line">- include: install.yml                                                     </span><br><span class="line">- include: config.yml</span><br><span class="line">- include: service.yml</span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim service.yml </span></span><br><span class="line">- name: service</span><br><span class="line">  service: name=nginx state=started enabled=yes </span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#cd ../../../</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim nginx_roles.yml</span></span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  roles:</span><br><span class="line">    - role: nginx     </span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook nginx_roles.yml</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;playbook概念&quot;&gt;&lt;a href=&quot;#playbook概念&quot;
      
    
    </summary>
    
      <category term="ansible" scheme="http://yoursite.com/categories/ansible/"/>
    
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="playbook" scheme="http://yoursite.com/tags/playbook/"/>
    
      <category term="role" scheme="http://yoursite.com/tags/role/"/>
    
  </entry>
  
  <entry>
    <title>Ansible基础及常用模块</title>
    <link href="http://yoursite.com/2018/12/30/Ansible%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/12/30/Ansible基础及常用模块/</id>
    <published>2018-12-29T16:00:00.000Z</published>
    <updated>2019-02-11T09:00:00.468Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Ansible的概念"><a href="#Ansible的概念" class="headerlink" title="Ansible的概念"></a>Ansible的概念</h1><p>&ensp;&ensp;&ensp;&ensp;概念：是一个配置管理工具，是一个自动化运维工具，通过ssh实现配置管理、应用部署、任务执行等功能。要实现ansible，必须基于key验证<br>作用：可以完成一些批量任务或者完成一些需要经常重复的工作  </p><p>同时在100台服务器上安装服务，并在安装后启动服务<br>将某个文件一次性拷贝到100台服务器上<br>每当有新服务器加入工作环境时都要部署新的服务，也就是需要经常重复完成相同的工作  </p><p>此时都可以用到ansible<br>在复制文件到受控主机时，受控主机目录下有此文件则ansible不做任何处理，若没有则复制，这些功能是shell所不具备的  </p><p>控制其他主机的主机叫主控端<br>被控制的主机叫被控端  </p><p>ansible  中小型企业500台主机左右<br>saltstack 大型企业<br>puppet  超大型企业  </p><h1 id="Ansible的配置文件"><a href="#Ansible的配置文件" class="headerlink" title="Ansible的配置文件"></a>Ansible的配置文件</h1><p>使用ansible前必须做到：<br>1、在主控机上安装ansible基于epel源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum   install ansible  -y</span><br></pre></td></tr></table></figure></p><p>2、在ansible配置文件中将受控主机写入”管理清单（/etc/ansible/hosts）”。</p><p>方式有两种：</p><p>文件配置<br>如果安装后没有配置文件直接使用ansible则会出现如下提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]<span class="comment">#ansible 192.168.183.158 -m ping</span></span><br><span class="line">[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit</span><br><span class="line">localhost does not match <span class="string">'all'</span></span><br><span class="line">[WARNING]: Could not match supplied host pattern, ignoring: 192.168.183.148</span><br><span class="line"></span><br><span class="line">将受控主机的IP写入配置文件/etc/ansible/hosts的最底部如下：</span><br><span class="line"><span class="comment"># Here's another example of host ranges, this time there are no</span></span><br><span class="line"><span class="comment"># leading 0s:</span></span><br><span class="line"><span class="comment">## db-[99:101]-node.example.com</span></span><br><span class="line">192.168.183.158                      </span><br><span class="line">192.168.183.132</span><br><span class="line"></span><br><span class="line">[root@CentOS7 ~]<span class="comment">#ansible 192.168.183.158,192.168.183.132 -m ping</span></span><br><span class="line">192.168.183.132 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n"</span>, </span><br><span class="line">    <span class="string">"unreachable"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.183.158 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n"</span>, </span><br><span class="line">    <span class="string">"unreachable"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为ansible是基于ssh的，所以要把受控主机的相关信息也要写全如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## db-[99:101]-node.example.com</span></span><br><span class="line">192.168.183.148 ansible_port=22 ansible_user=root ansible_ssh_pass=123456</span><br><span class="line">192.168.183.132 ansible_port=22 ansible_user=root ansible_ssh_pass=123456                         </span><br><span class="line"><span class="string">"/etc/ansible/hosts"</span> 47L, 1165C written                                         </span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ansible 192.168.183.148,192.168.183.132 -m ping </span></span><br><span class="line">192.168.183.148 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.183.132 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果受控主机较多这样配置显然是不可取的，大多数情况下都使用第二种方法基于秘钥认证<br>基于秘钥认证(由于前文写过，这里简单描述下)<br>首先执行ssh-kengen生成秘钥对<br>将生成的秘钥发送给受控机 <code>ssh-copy-id 192.168.183.158</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment">#ansible all  -m ping                               </span></span><br><span class="line">192.168.183.132 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.183.158 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>小结：在使用ansible时首先要安装包，然后将受控主机的IP写入配置文件/etc/ansible/hosts中，使用秘钥验证方式则首先要生成秘钥对ssh-keygen将生成的秘钥发送至受控主机<code>ssh-copy-id IP</code></p><h1 id="ansible命令执行"><a href="#ansible命令执行" class="headerlink" title="ansible命令执行"></a>ansible命令执行</h1><h2 id="ansible命令执行过程"><a href="#ansible命令执行过程" class="headerlink" title="ansible命令执行过程"></a>ansible命令执行过程</h2><p>加载自己的配置文件 默认/etc/ansible/ansible.cfg<br>加载自己对应的模块文件，如command<br>通过ansible将模块或命令生成对应的临时py文件，并将该 文件传输至远程服务器的对应执行用户$HOME/.ansible/tmp/ansible-tmp-数字/XXX.PY文件<br>给文件+x执行<br>执行并返回结果<br>删除临时py文件，sleep 0退出  </p><h2 id="执行状态："><a href="#执行状态：" class="headerlink" title="执行状态："></a>执行状态：</h2><p>绿色：执行成功并且不需要做改变的操作<br>黄色：执行成功并且对目标主机做变更<br>红色：执行失败  </p><h2 id="ansible的Host-pattern"><a href="#ansible的Host-pattern" class="headerlink" title="ansible的Host-pattern"></a>ansible的Host-pattern</h2><p>ansible [-m module_name] [-a args]<br>–version 显示版本<br>ansible –version<br>-v 详细过程 –vv -vvv更详细<br>–list-hosts 显示主机列表，可简写 –list</p><p>ansible all –list-hosts<br>-u, –user=REMOTE_USER 执行远程执行的用户<br>-k, –ask-pass 提示输入ssh连接密码，默认Key验证<br>-K, –ask-become-pass 提示输入sudo时的口令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible 192.168.183.158 -m ping -u xie  -k</span></span><br><span class="line">SSH password:</span><br><span class="line">[root@centos7 ~]<span class="comment">#ansible 192.168.183.158 -m ping -u xie  -K</span></span><br><span class="line">SUDO password:</span><br></pre></td></tr></table></figure><p>-C, –check 检查，并不执行<br>-T, –timeout=TIMEOUT 执行命令的超时时间，默认10s<br>-b, –become 代替旧版的sudo 切换<br>–become-user=USERNAME 指定sudo的runas用户，默认为root   </p><blockquote><p>ansible all -m ping -u wang -k -b –become-user=mage    </p></blockquote><p>All ：表示所有Inventory中的所有主机  </p><blockquote><p>ansible all –m ping</p></blockquote><p>* : 通配符  </p><blockquote><p>ansible “*” -m ping  </p></blockquote><p>或关系  </p><blockquote><p>ansible <code>websrvs:appsrvs</code> -m ping  </p></blockquote><p>逻辑与  </p><blockquote><p>ansible ‘websrvs:&amp;dbsrvs’ –m ping  在websrvs组并且在dbsrvs组中的主机    </p></blockquote><p>逻辑非  </p><blockquote><p>ansible ‘websrvs:!dbsrvs’ –m ping  在websrvs组，但不在dbsrvs组中的主机<br>注意：此处为单引号  </p></blockquote><p>综合逻辑  </p><blockquote><p>ansible ‘websrvs:dbsrvs:&amp;appsrvs:!ftpsrvs’ –m ping  </p></blockquote><p>正则表达式  </p><blockquote><p>ansible ‘~(web|db).*.magedu.com’ –m ping      </p></blockquote><p><code>注：列表清单中最好都使用单引号</code></p><h1 id="Ansible相关文件"><a href="#Ansible相关文件" class="headerlink" title="Ansible相关文件"></a>Ansible相关文件</h1><p>配置文件<br>/etc/ansible/ansible.cfg 主配置文件，配置ansible工作特性<br>/etc/ansible/hosts 主机清单<br>/etc/ansible/roles/ 存放角色的目录  </p><p>程序<br>/usr/bin/ansible 主程序，临时命令执行工具<br>/usr/bin/ansible-doc 查看配置文档，模块功能查看工具<br>/usr/bin/ansible-galaxy 下载/上传优秀代码或Roles模块的官网平台<br>/usr/bin/ansible-playbook 定制自动化任务，编排剧本工具<br>/usr/bin/ansiblepull 远程执行命令的工具<br>/usr/bin/ansible-vault 文件加密工具<br>/usr/bin/ansible-console 基于Console界面与用户交互的执行工具</p><h2 id="Ansible-配置文件-etc-ansible-ansible-cfg-（一般保持默认）"><a href="#Ansible-配置文件-etc-ansible-ansible-cfg-（一般保持默认）" class="headerlink" title="Ansible 配置文件/etc/ansible/ansible.cfg （一般保持默认）"></a>Ansible 配置文件/etc/ansible/ansible.cfg （一般保持默认）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line"><span class="comment">#inventory = /etc/ansible/hosts  主机列表配置文件  </span></span><br><span class="line"><span class="comment">#library = /usr/share/my_modules/ # 库文件存放目录  </span></span><br><span class="line"><span class="comment">#remote_tmp = $HOME/.ansible/tmp #临时py命令文件存放在远程主机目录  </span></span><br><span class="line"><span class="comment">#local_tmp = $HOME/.ansible/tmp # 本机的临时命令执行目录  </span></span><br><span class="line"><span class="comment">#forks = 5 # 默认并发数  </span></span><br><span class="line"><span class="comment">#sudo_user = root # 默认sudo 用户  </span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True #每次执行ansible命令是否询问ssh密码  </span></span><br><span class="line"><span class="comment">#ask_pass = True  </span></span><br><span class="line"><span class="comment">#remote_port = 22  </span></span><br><span class="line"><span class="comment">#host_key_checking = False # 检查对应服务器的host_key，建议取消注释  </span></span><br><span class="line"><span class="comment">#log_path=/var/log/ansible.log #日志文件  </span></span><br><span class="line"><span class="comment">#module_name = command #默认模块</span></span><br></pre></td></tr></table></figure><h2 id="主机清单inventory"><a href="#主机清单inventory" class="headerlink" title="主机清单inventory"></a>主机清单inventory</h2><p>ansible的主要功用在于批量主机操作，为了便捷地使用其中的部分主机，可以在inventory file中将其分组命名<br>默认的inventory file为/etc/ansible/hosts<br>inventory file可以有多个，且也可以通过Dynamic Inventory来动态生成</p><p>etc/ansible/hosts文件格式</p><p>inventory文件遵循INI文件风格，中括号中的字符为组名。可以将同一个主机同时归并到多个不同的组中；此外，当如若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[webservers]  </span><br><span class="line">www1.magedu.com:2222  </span><br><span class="line">www2.magedu.com  </span><br><span class="line">[dbservers]</span><br><span class="line">db1.magedu.com</span><br><span class="line">db2.magedu.com</span><br></pre></td></tr></table></figure></p><p>如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[websrvs]</span><br><span class="line">www[01:100].example.com</span><br><span class="line">[dbsrvs]</span><br><span class="line">db-[a:f].example.com</span><br></pre></td></tr></table></figure></p><p>ansible-doc: 显示模块帮助<br>ansible-doc [options] [module…]<br>-a 显示所有模块的文档<br>-l, –list 列出可用模块<br>-s, –snippet显示指定模块的playbook片段<br>示例：</p><blockquote><p>ansible-doc –l 列出所有模块<br>ansible-doc ping 查看指定模块帮助用法<br>ansible-doc –s ping 查看指定模块帮助用法<br>ansible-vault  </p></blockquote><p>功能：管理加密解密yml文件<br>ansible-vault [create|decrypt|edit|encrypt|rekey|view]  </p><blockquote><p>ansible-vault encrypt hello.yml 加密<br>ansible-vault decrypt hello.yml 解密<br>ansible-vault view hello.yml 查看<br>ansible-vault edit hello.yml 编辑加密文件<br>?ansible-vault rekey hello.yml 修改口令<br>?ansible-vault create new.yml 创建新文件  </p></blockquote><p>Ansible-console：2.0+新增，可交互执行命令，支持tab  </p><blockquote><p>root@test (2)[f:10] $  </p></blockquote><p>执行用户@当前操作的主机组 (当前组的主机数量)[f:并发数]$<br>设置并发数： forks n 例如： forks 10<br>切换组： cd 主机组 例如： cd web<br>列出当前组主机列表： list<br>列出所有的内置命令： ?或help  </p><p>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@all (2)[f:5]listroot@all(2)[f:5] <span class="built_in">cd</span> appsrvs</span><br><span class="line">root@appsrvs (2)[f:5]listroot@appsrvs(2)[f:5] yum name=httpd state=present</span><br><span class="line">root@appsrvs (2)[f:5]$ service name=httpd state=started</span><br></pre></td></tr></table></figure></p><h2 id="ansible-galaxy"><a href="#ansible-galaxy" class="headerlink" title="ansible-galaxy"></a>ansible-galaxy</h2><p>连接 <a href="https://galaxy.ansible.com" target="_blank" rel="noopener">https://galaxy.ansible.com</a> 下载相应的roles</p><p>安装galaxy</p><blockquote><p>ansible-galaxy install geerlingguy.redis</p></blockquote><p>列出所有已安装的galaxy</p><blockquote><p>ansible-galaxy list</p></blockquote><p>删除galaxy</p><blockquote><p>ansible-galaxy remove geerlingguy.redis</p></blockquote><p>推送命令至远程，效率无限提升，对运维要求较高</p><blockquote><p>ansible-pull</p></blockquote><h2 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible-playbook"></a>ansible-playbook</h2><p>执行playbook<br>示例：ansible-playbook hello.yml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat hello.yml  </span><br><span class="line"><span class="comment">#hello world yml file  </span></span><br><span class="line">- hosts: websrvs  </span><br><span class="line">  remote_user: root  </span><br><span class="line">  tasks:  </span><br><span class="line">    - name: hello world  </span><br><span class="line">    <span class="built_in">command</span>: /usr/bin/wall hello world</span><br></pre></td></tr></table></figure></p><h1 id="ansible常用模块"><a href="#ansible常用模块" class="headerlink" title="ansible常用模块"></a>ansible常用模块</h1><p>Command：在远程主机执行命令，默认模块，可忽略-m选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment">#ansible all -m command -a 'service vsftpd start'</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m command -a 'echo magedu |passwd --stdin xie'</span></span><br><span class="line">此命令不支持 <span class="variable">$VARNAME</span> &lt; &gt; | ; &amp; 等，用shell模块实现</span><br></pre></td></tr></table></figure></p><p>Shell：和command相似，用shell执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m shell -a 'echo magedu | passwd –stdin xie'</span></span><br><span class="line">调用bash执行命令 类似 cat /tmp/stanley.md | awk -F‘|’ ‘&#123;<span class="built_in">print</span> 1,2&#125;’ &amp;&gt; /tmp/example.txt 这些复杂命令，即使使用shell也可能会失败，解决办法：写到脚本时，copy到远程，执行，再把需要的结果拉回执行命令的机器</span><br></pre></td></tr></table></figure></p><p>Script：在远程主机上运行ansible服务器上的脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-a <span class="string">"/PATH/TO/SCRIPT_FILE“</span></span><br><span class="line"><span class="string">ansible websrvs -m script -a /data/f1.sh</span></span><br></pre></td></tr></table></figure></p><p>Copy：从服务器复制文件到客户端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m copy -a "src=/root/f1 dest=/tmp/f2 owner=xie mode=600 backup=yes"</span></span><br><span class="line">如目标存在，默认覆盖，此处指定先备份</span><br><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m copy -a "content='test content\n' dest=/tmp/f1.txt"</span></span><br><span class="line">指定内容，直接生成目标文件</span><br></pre></td></tr></table></figure></p><p>Fetch：从客户端取文件至服务器端，copy相反，目录可先tar<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m fetch -a 'src=/root/a.sh dest=/data/scripts'</span></span><br></pre></td></tr></table></figure></p><p>File：设置文件属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m file -a "path=/data/f1.txt owner=wang mode=755“</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m filw -a "path=/data/f1.txt state=touch"</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m file -a 'src=/data/f1.txt dest=/data/f1.txt-link state=link'</span></span><br></pre></td></tr></table></figure></p><p>Hostname：管理主机名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible websrvs -m hostname -a "name=websrv"</span></span><br></pre></td></tr></table></figure></p><p>Cron：计划任务<br>支持时间：minute，hour，day，month，weekday  </p><p>创建任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m cron -a "minute=*/5 job='/usr/sbin/ntpdate 172.16.0.1 &amp;&gt;/dev/null' name=Synctime"</span></span><br></pre></td></tr></table></figure></p><p>删除任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m cron -a 'state=absent name=Synctime'</span></span><br></pre></td></tr></table></figure></p><p>Yum：管理包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m yum -a 'name=httpd,memcached,vsftpd state=present' 安装               state=present可以省略不写,系统默认</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m yum -a 'name=httpd,memcached,vsftpd state=absent' 删除</span></span><br></pre></td></tr></table></figure></p><p>Service：管理服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment">#ansible all -m service -a 'name=httpd state=stopped'</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m service -a 'name=httpd state=started enabled=yes'          启动服务，并且开机启动</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m service -a 'name=httpd state=reloaded'</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m service -a 'name=httpd state=restarted'</span></span><br></pre></td></tr></table></figure></p><p>User：管理用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment">#ansible all -m user -a 'name=user1 comment="test user" uid=2048 home=/app/user1 group=root shell=/sbin/nologin'</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m user -a 'name=sysuser1 system=yes home=/app/sysuser1'</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m user -a 'name=user1 state=absent remove=yes'</span></span><br><span class="line">          删除账号并且删除家目录</span><br></pre></td></tr></table></figure></p><p>Group：管理组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment">#ansible all -m group -a "name=testgroup system=yes"</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m group -a "name=testgroup state=absent"</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;Ansible的概念&quot;&gt;&lt;a href=&quot;#Ansible的概念&quot;
      
    
    </summary>
    
      <category term="ansible" scheme="http://yoursite.com/categories/ansible/"/>
    
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="模块" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Mysql的日志管理</title>
    <link href="http://yoursite.com/2018/12/02/Mysql%E7%9A%84%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/12/02/Mysql的日志管理/</id>
    <published>2018-12-01T16:00:00.000Z</published>
    <updated>2019-02-11T08:58:39.344Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="mysql日志的种类"><a href="#mysql日志的种类" class="headerlink" title="mysql日志的种类"></a>mysql日志的种类</h1><ol><li><p>事务日志 transaction log (记录事务信息，实现undo,redo等故障恢复功能)</p></li><li><p>错误日志 error log (记录启动，运行，停止mysql时出现的信息)</p></li><li>通用日志 general log (记录对数据库的通用操作，包括错误的SQL语句)</li><li>慢查询日志 slow query log （记录所有执行超过long_query_time秒的所有查询）</li><li>二进制日志 binary log （记录所有更改数据的语句，还用于复制，恢复数据库用）</li><li>中继日志 reley log (主从复制架构中，从服务器用于保存从主服务器的二进制日志中读取的事件)</li></ol><h2 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h2><p>事务型存储引擎自行管理和使用，建议和数据文件分开存放  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redo <span class="built_in">log</span></span><br><span class="line">undo <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>Innodb事务日志相关配置：</p><p>1、show variables like ‘%innodb_log%’;</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'%innodb_log%'</span>;</span><br><span class="line">+---------------------------+---------+</span><br><span class="line">| Variable_name             | Value   |</span><br><span class="line">+---------------------------+---------+</span><br><span class="line">| innodb_log_block_size     | 512     |   每个块的大小</span><br><span class="line">| innodb_log_buffer_size    | 8388608 |   缓冲区buffer的大小</span><br><span class="line">| innodb_log_file_size      | 5242880 |   每个日志文件大小</span><br><span class="line">| innodb_log_files_in_group | 2       |   日志组成员个数 </span><br><span class="line">| innodb_log_group_home_dir | ./      |   事务文件路径</span><br><span class="line">+---------------------------+---------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>2、innodb_flush_log_at_trx_commit 默认为1  </p><p>例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'innodb_flush_log_at_trx_commit'</span>;</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">| Variable_name                  | Value |</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">| innodb_flush_log_at_trx_commit | 1     |</span><br><span class="line">+--------------------------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>​    说明：设置为1，同时sync_binlog = 1表示最高级别的容错innodb_use_global_flush_log_at_trx_commit的值确定是否可以使用SET语句重置此变量  </p><ul><li>1默认情况下，日志缓冲区将写入日志文件，并在每次事务后执行刷新到磁盘。这是完全遵守ACID特性  </li><li>0提交时没有任何操作; 而是每秒执行一次日志缓冲区写入和刷新。 这样可以提供更好的性能，但服务器崩溃可以清除最后一秒的事务  </li><li>2每次提交后都会写入日志缓冲区，但每秒都会进行一次刷新。 性能比0略好一些，但操作系统或停电可能导致最后一秒的交易丢失  </li><li>3模拟MariaDB 5.5组提交（每组提交3个同步），此项MariaDB 10.0支持  </li></ul><h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><p>mysqld启动和关闭过程中输出的事件信息</p><p>mysqld运行中产生的错误信息</p><p>event scheduler运行一个event时产生的日志信息</p><p>在主从复制架构中的从服务器上启动从服务器线程时产生的信息 </p><p>错误日志相关配置</p><p>1、show global variables like ‘log_error’;  </p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show global variables like <span class="string">'log_error'</span>;</span><br><span class="line">+---------------+------------------------------+</span><br><span class="line">| Variable_name | Value                        |</span><br><span class="line">+---------------+------------------------------+</span><br><span class="line">| log_error     | /var/<span class="built_in">log</span>/mariadb/mariadb.log |</span><br><span class="line">+---------------+------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>2、错误文件路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_error=/PATH/TO/LOG_ERROR_FILE</span><br></pre></td></tr></table></figure><p>3、是否记录警告信息至错误日志文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_warnings=1|0 默认值1</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; <span class="built_in">set</span> log_error=<span class="string">"/data/mariadb.log"</span>;</span><br><span class="line">ERROR 1238 (HY000): Variable <span class="string">'log_error'</span> is a <span class="built_in">read</span> only variable</span><br></pre></td></tr></table></figure><p><strong>这个变量只能在配置文件修改</strong></p><h2 id="通用日志"><a href="#通用日志" class="headerlink" title="通用日志"></a>通用日志</h2><p>通用日志：记录对数据库的通用操作，包括错误的SQL语句</p><p>​    文件：file，默认值</p><p>​    表：table  </p><p>通用日志相关设置</p><p>1、general_log=ON|OFF</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'general_log'</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| general_log   | OFF   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>2、general_log_file=HOSTNAME.log</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'general_log_file'</span>;</span><br><span class="line">+------------------+-------------+</span><br><span class="line">| Variable_name    | Value       |</span><br><span class="line">+------------------+-------------+</span><br><span class="line">| general_log_file | centos7.log |</span><br><span class="line">+------------------+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>3、log_output=TABLE|FILE|NONE  </p><p>例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'log_output'</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_output    | FILE  |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><h2 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h2><p>&ensp;&ensp;&ensp;&ensp;慢查询日志主要记录执行查询时长超出指定时长的操作</p><p>通过慢查询日志，可以找出执行时间较长、执行效率较低的语句，然后进行优化</p><p>1、开启或关闭慢查询(生产中启用)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slow_query_log=ON|OFF</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'slow_query_log'</span>;</span><br><span class="line">+----------------+-------+</span><br><span class="line">| Variable_name  | Value |</span><br><span class="line">+----------------+-------+</span><br><span class="line">| slow_query_log | OFF   |</span><br><span class="line">+----------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>2、慢查询的阀值，单位秒(生产中阈值根据实际情况设小点)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long_query_time=N</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'long_query_time'</span>;</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| Variable_name   | Value     |</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| long_query_time | 10.000000 |      默认10秒</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>3、慢查询日志文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slow_query_log_file=HOSTNAME-slow.log</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'slow_query_log_file'</span>;</span><br><span class="line">+---------------------+------------------+</span><br><span class="line">| Variable_name       | Value            |</span><br><span class="line">+---------------------+------------------+</span><br><span class="line">| slow_query_log_file | centos7-slow.log |</span><br><span class="line">+---------------------+------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>4、log_slow_filter = admin,filesort,filesort_on_disk,full_join,full_scan,query_cache,query_cache_miss,tmp_table,tmp_table_on_disk<br>上述查询类型且查询时长超过long_query_time，则记录日志  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'log_slow_filter'</span>;    </span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Variable_name   | Value                                                                                                        |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| log_slow_filter | admin,filesort,filesort_on_disk,full_join,full_scan,query_cache,query_cache_miss,tmp_table,tmp_table_on_disk |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>5、log_queries_not_using_indexes=ON 不使用索引或使用全索引扫描，不论是否达到慢查询阀值的语句是否记录日志，默认OFF，即不记录   <strong>生产中也需要开启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'log_queries_not_using_indexes'</span>;</span><br><span class="line">+-------------------------------+-------+</span><br><span class="line">| Variable_name                 | Value |</span><br><span class="line">+-------------------------------+-------+</span><br><span class="line">| log_queries_not_using_indexes | OFF   |</span><br><span class="line">+-------------------------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>6、log_slow_rate_limit = 1 多少次查询才记录，mariadb特有  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'log_slow_rate_limit'</span>;          </span><br><span class="line">+---------------------+-------+</span><br><span class="line">| Variable_name       | Value |</span><br><span class="line">+---------------------+-------+</span><br><span class="line">| log_slow_rate_limit | 1     |</span><br><span class="line">+---------------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>7、log_slow_verbosity= Query_plan,explain 记录内容  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'log_slow_verbosity'</span>; </span><br><span class="line">+--------------------+-------+</span><br><span class="line">| Variable_name      | Value |</span><br><span class="line">+--------------------+-------+</span><br><span class="line">| log_slow_verbosity |       |</span><br><span class="line">+--------------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h2><p>二进制日志：记录导致数据改变或潜在导致数据改变的SQL语句<br>记录已提交的日志<br>不依赖于存储引擎类型<br>功能：通过“重放”日志文件中的事件来生成数据副本<br><strong>注意：建议二进制日志和数据文件分开存放</strong></p><h2 id="中继日志：relay-log"><a href="#中继日志：relay-log" class="headerlink" title="中继日志：relay log"></a>中继日志：relay log</h2><p>主从复制架构中，从服务器用于保存从主服务器的二进制日志中读取的事件</p><h3 id="二进制日志记录格式"><a href="#二进制日志记录格式" class="headerlink" title="二进制日志记录格式"></a>二进制日志记录格式</h3><p>二进制日志记录三种格式</p><p>​    基于“语句”记录：statement，记录语句，默认模式</p><p>​    基于“行”记录：row，记录数据，日志量较大</p><p>​    混合模式：mixed, 让系统自行判定该基于哪种方式进行</p><p>格式配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like <span class="string">'binlog_format'</span>;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'binlog_format'</span>;</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| Variable_name | Value     |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| binlog_format | STATEMENT |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="二进制日志文件的构成"><a href="#二进制日志文件的构成" class="headerlink" title="二进制日志文件的构成"></a>二进制日志文件的构成</h3><p>有两类文件</p><p>日志文件：mysql|mariadb-bin.文件名后缀，二进制格式</p><p>​    如： mariadb-bin.000001</p><p>索引文件：mysql|mariadb-bin.index，文本格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ls /var/lib/mysql/ -l</span></span><br><span class="line">total 28708</span><br><span class="line">-rw-rw----. 1 mysql mysql    16384 Dec  4 19:33 aria_log.00000001</span><br><span class="line">-rw-rw----. 1 mysql mysql       52 Dec  4 19:33 aria_log_control</span><br><span class="line">drwx------. 2 mysql mysql      272 Nov 29 21:04 hellodb</span><br><span class="line">-rw-rw----. 1 mysql mysql 18874368 Dec  4 19:33 ibdata1</span><br><span class="line">-rw-rw----. 1 mysql mysql  5242880 Dec  4 19:33 ib_logfile0</span><br><span class="line">-rw-rw----. 1 mysql mysql  5242880 Nov 29 09:42 ib_logfile1</span><br><span class="line">-rw-rw----. 1 mysql mysql      245 Dec  4 19:33 mariadb-bin.000001</span><br><span class="line">-rw-rw----. 1 mysql mysql       21 Dec  4 19:33 mariadb-bin.index</span><br></pre></td></tr></table></figure><h3 id="二进制日志相关的服务器变量："><a href="#二进制日志相关的服务器变量：" class="headerlink" title="二进制日志相关的服务器变量："></a>二进制日志相关的服务器变量：</h3><p>1、sql_log_bin=ON|OFF：是否记录二进制日志，默认ON</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'sql_log_bin'</span>;  </span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| sql_log_bin   | ON    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>2、log_bin=/PATH/BIN_LOG_FILE：指定文件位置；默认OFF，表示不启用二进制日志功能.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'log_bin'</span>;    </span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| log_bin       | OFF   |    在配置文件也可以加上路径log_bin=/data/<span class="built_in">log</span></span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>上述两项都同时开启才能启用二进制日志</strong></p><p>3、binlog_format=STATEMENT|ROW|MIXED：二进制日志记录的格式，默认STATEMENT</p><p>4、max_binlog_size=1073741824：单个二进制日志文件的最大体积，到达最大值会自动滚动，默认为1G</p><p>说明：文件达到上限时的大小未必为指定的精确值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'max_binlog_size'</span>;</span><br><span class="line">+-----------------+------------+</span><br><span class="line">| Variable_name   | Value      |</span><br><span class="line">+-----------------+------------+</span><br><span class="line">| max_binlog_size | 1073741824 |</span><br><span class="line">+-----------------+------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>5、sync_binlog=1|0：设定是否启动二进制日志即时同步磁盘功能，默认0，由操作系统负责同步日志到磁盘  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'sync_binlog'</span>;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| sync_binlog   | 0     |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>6、expire_logs_days=N：二进制日志可以自动删除的天数。 默认为0，即不自动删除二进制日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show variables like <span class="string">'expire_logs_days'</span>;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| expire_logs_days | 0     |</span><br><span class="line">+------------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="二进制日志相关配置"><a href="#二进制日志相关配置" class="headerlink" title="二进制日志相关配置"></a>二进制日志相关配置</h3><p>查看mariadb自行管理使用中的二进制日志文件列表，及大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show &#123;binary | master&#125; logs</span><br></pre></td></tr></table></figure><p> 例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show binary logs;</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| Log_name           | File_size |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| mariadb-bin.000001 |       245 |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>查看使用中的二进制日志文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show master status;</span><br><span class="line">+--------------------+----------+--------------+------------------+</span><br><span class="line">| File               | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+--------------------+----------+--------------+------------------+</span><br><span class="line">| mariadb-bin.000001 |      245 |              |                  |</span><br><span class="line">+--------------------+----------+--------------+------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>查看二进制文件中的指定内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW BINLOG EVENTS [IN <span class="string">'log_name'</span>][FROM pos] [LIMIT [offset,] row_count];</span><br></pre></td></tr></table></figure><p>例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show binlog events <span class="keyword">in</span> <span class="string">'mariadb-bin.000001'</span>;</span><br><span class="line">+--------------------+-----+-------------+-----------+-------------+---------------------------------------------------+</span><br><span class="line">| Log_name           | Pos | Event_type  | Server_id | End_log_pos | Info                                              |</span><br><span class="line">+--------------------+-----+-------------+-----------+-------------+---------------------------------------------------+</span><br><span class="line">| mariadb-bin.000001 |   4 | Format_desc |         1 |         245 | Server ver: 5.5.56-MariaDB, Binlog ver: 4         |</span><br><span class="line">| mariadb-bin.000001 | 245 | Query       |         1 |         316 | BEGIN                                             |</span><br><span class="line">| mariadb-bin.000001 | 316 | Intvar      |         1 |         344 | INSERT_ID=5                                       |</span><br><span class="line">| mariadb-bin.000001 | 344 | Query       |         1 |         444 | use `hellodb`; insert teachers (name) values(<span class="string">'a'</span>) |</span><br><span class="line">| mariadb-bin.000001 | 444 | Xid         |         1 |         471 | COMMIT /* xid=17 */                               |</span><br><span class="line">| mariadb-bin.000001 | 471 | Query       |         1 |         542 | BEGIN                                             |</span><br><span class="line">| mariadb-bin.000001 | 542 | Intvar      |         1 |         570 | INSERT_ID=6                                       |</span><br><span class="line">| mariadb-bin.000001 | 570 | Query       |         1 |         670 | use `hellodb`; insert teachers (name) values(<span class="string">'b'</span>) |</span><br><span class="line">| mariadb-bin.000001 | 670 | Xid         |         1 |         697 | COMMIT /* xid=18 */                               |</span><br><span class="line">+--------------------+-----+-------------+-----------+-------------+---------------------------------------------------+</span><br><span class="line">9 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>mysqlbinlog：二进制日志的客户端命令工具<br>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog [OPTIONS] log_file…</span><br></pre></td></tr></table></figure><p>​    –start-position=# 指定开始位置 </p><p>​    –stop-position=#</p><p>​    –start-datetime= </p><p>​    –stop-datetime=</p><p>​        时间格式：YYYY-MM-DD hh:mm:ss</p><p>​    –base64-output[=name]</p><p>​    -v  -vvv</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog /var/lib/mysql/mariadb-bin.000003 -v  </span><br><span class="line">mysqlbinlog --start-position=245 --stop-position=316 /var/lib/mysql/mariadb-bin.000001 -vvv</span><br><span class="line">mysqlbinlog --start-datetime=<span class="string">"2018-01-30 20:30:10"</span> --stopdatetime=<span class="string">"2018-01-30 20:35:22"</span> /var/lib/mysql/mariadb-bin.000003 -vvv</span><br></pre></td></tr></table></figure><p>清除指定二进制日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PURGE &#123; BINARY | MASTER &#125; LOGS &#123; TO <span class="string">'log_name'</span> | BEFORE datetime_expr &#125;</span><br></pre></td></tr></table></figure><p>例：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PURGE BINARY LOGS BEFORE <span class="string">'2017-01-23'</span>;   </span><br><span class="line">PURGE BINARY LOGS BEFORE <span class="string">'2017-03-22 09:25:30'</span>;  </span><br><span class="line">purge binary logs to <span class="string">'mariadb-bin.000003'</span>; 删除3之前的日志</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; show binary logs;</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| Log_name           | File_size |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| mariadb-bin.000001 |       742 |</span><br><span class="line">| mariadb-bin.000002 |       290 |</span><br><span class="line">| mariadb-bin.000003 |       290 |</span><br><span class="line">| mariadb-bin.000004 |       245 |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; purge binary logs to <span class="string">'mariadb-bin.000003'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; show binary logs;</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| Log_name           | File_size |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| mariadb-bin.000003 |       290 |</span><br><span class="line">| mariadb-bin.000004 |       245 |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>删除所有二进制日志，index文件重新记数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RESET MASTER [TO <span class="comment">#];</span></span><br></pre></td></tr></table></figure></p><p>删除所有二进制日志文件，并重新生成日志文件，文件名从#开始记数，默认从1开始，一般是master主机第一次启动时执行，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show binary logs;</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| Log_name           | File_size |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| mariadb-bin.000001 |       290 |</span><br><span class="line">| mariadb-bin.000002 |       290 |</span><br><span class="line">| mariadb-bin.000003 |       290 |</span><br><span class="line">| mariadb-bin.000004 |       290 |</span><br><span class="line">| mariadb-bin.000005 |       290 |</span><br><span class="line">| mariadb-bin.000006 |       245 |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; reset master;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; show binary logs;</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| Log_name           | File_size |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">| mariadb-bin.000001 |       245 |</span><br><span class="line">+--------------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>切换日志文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush logs;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show master logs;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       245 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; flush logs;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; flush logs;</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; show master logs;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       288 |</span><br><span class="line">| mysql-bin.000002 |       288 |</span><br><span class="line">| mysql-bin.000003 |       245 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;mysql日志的种类&quot;&gt;&lt;a href=&quot;#mysql日志的种类&quot;
      
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="日志" scheme="http://yoursite.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>mysql资源和用户权限管理</title>
    <link href="http://yoursite.com/2018/12/01/mysql%E8%B5%84%E6%BA%90%E5%92%8C%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/12/01/mysql资源和用户权限管理/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2019-02-11T08:56:42.409Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h1><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>1、视图：VIEW,虚表，保存有实表的查询结果<br>2、创建方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW view_name [(column_list)]</span><br><span class="line">AS select_statement</span><br><span class="line">[WITH [CASCADED | LOCAL] CHECK OPTION]</span><br></pre></td></tr></table></figure><p>3、查看视图定义：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE VIEW view_name</span><br></pre></td></tr></table></figure><p>4、删除视图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW [IF EXISTS]</span><br><span class="line">view_name [, view_name] ...</span><br><span class="line">[RESTRICT | CASCADE]</span><br></pre></td></tr></table></figure><p>5、视图中的数据事实上存储于“基表”中，因此，其修改操作也会针对基表实现；<br>其修改操作受基表限制</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>1、函数：系统函数和自定义函数<br>​    系统函数:<a href="https://dev.mysql.com/doc/refman/5.7/en/func-op-summaryref.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/func-op-summaryref.html</a><br>​    自定义函数 (user-defined function UDF)<br>​        保存在mysql.proc表中<br>​        创建UDF</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE [AGGREGATE] FUNCTION function_name(parameter_name <span class="built_in">type</span>,[parameter_name <span class="built_in">type</span>,...])</span><br><span class="line">RETURNS &#123;STRING|INTEGER|REAL&#125;</span><br><span class="line">runtime_body</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>​    参数可以有多个,也可以没有参数</li><li>​    必须有且只有一个返回值</li></ul><p>创建函数<br>例：无参UDF</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION simpleFun() RETURNS VARCHAR(20) RETURN <span class="string">"Hello World!"</span>;</span><br></pre></td></tr></table></figure><p>查看函数列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW FUNCTION STATUS;</span><br></pre></td></tr></table></figure><p>查看函数定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE FUNCTION function_name</span><br></pre></td></tr></table></figure><p>删除UDF:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP FUNCTION function_name</span><br></pre></td></tr></table></figure><p>2、调用自定义函数语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT function_name(parameter_value,...)</span><br></pre></td></tr></table></figure><p>例：有参数UDF</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE FUNCTION deleteById(uid SMALLINT UNSIGNED) RETURNS VARCHAR(20)</span><br><span class="line">BEGIN</span><br><span class="line">DELETE FROM students WHERE stuid = uid;</span><br><span class="line">RETURN (SELECT COUNT(stuid) FROM students);</span><br><span class="line">END//</span><br><span class="line">DELIMITER;</span><br></pre></td></tr></table></figure><p>3、自定义函数中定义局部变量语法<br>​    DECLARE 变量1[,变量2,… ]变量类型 [DEFAULT 默认值]<br>说明：局部变量的作用范围是在BEGIN…END程序中,而且定义局部变量语句必须在BEGIN…END的第一行定义<br>例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE FUNCTION addTwoNumber(x SMALLINT UNSIGNED,Y SMALLINT UNSIGNED)</span><br><span class="line">RETURNS SMALLINT</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE a,b SMALLINT UNSIGNED;</span><br><span class="line">SET a = x, b = y;</span><br><span class="line">RETURN a+b;</span><br><span class="line">END//</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>4、为变量赋值语法<br>​    SET parameter_name = value[,parameter_name = value…]<br>​    SELECT INTO parameter_name<br>例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">DECLARE x int;</span><br><span class="line">SELECT COUNT(id) FROM tdb_name INTO x;</span><br><span class="line">RETURN x;</span><br><span class="line">END//</span><br></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>存储过程把经常使用的SQL语句或业务逻辑封装起来,预编译保存在数据库中,当需要时从数据库中直接调用,省去了编译的过程</li><li>提高了运行速度</li><li>同时降低网络数据传输量</li></ol><h3 id="存储过程与自定义函数的区别"><a href="#存储过程与自定义函数的区别" class="headerlink" title="存储过程与自定义函数的区别"></a>存储过程与自定义函数的区别</h3><ol><li>存储过程实现的过程要复杂一些,而函数的针对性较强</li><li>存储过程可以有多个返回值,而自定义函数只有一个返回值</li><li>存储过程一般独立的来执行,而函数往往是作为其他SQL语句的一部分来使用</li></ol><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><p>1、存储过程：存储过程保存在mysql.proc表中</p><p>2、创建存储过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE sp_name ([ proc_parameter [,proc_parameter ...]]) routime_body</span><br><span class="line">proc_parameter : [IN|OUT|INOUT] parameter_name <span class="built_in">type</span></span><br></pre></td></tr></table></figure><p>​    其中：IN表示输入参数；</p><p>​            OUT表示输出参数；</p><p>​            INOUT表示既可以输入也可以输出；</p><p>​            param_name表示参数名称；</p><p>​            type表示参数的类型</p><p>3、查看存储过程列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW PROCEDURE STATUS;</span><br></pre></td></tr></table></figure><p>4、查看存储过程定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE sp_name</span><br></pre></td></tr></table></figure><p>5、调用存储过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CALL sp_name ([ proc_parameter [,proc_parameter ...]])</span><br><span class="line">CALL sp_name</span><br></pre></td></tr></table></figure><p><strong>说明:当无参时,可以省略”()”,当有参数时,不可省略”()”</strong></p><p>6、存储过程修改<br>&ensp;&ensp;&ensp;&ensp;ALTER语句修改存储过程只能修改存储过程的注释等无关紧要的东西,不能修改存储过程体,所以要修改存储过程,方法就是删除重建<br>7、删除存储过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE [IF EXISTS] sp_name</span><br></pre></td></tr></table></figure><h3 id="存储过程示例"><a href="#存储过程示例" class="headerlink" title="存储过程示例"></a>存储过程示例</h3><p>创建无参存储过程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">CREATE PROCEDURE showTime()</span><br><span class="line">BEGIN</span><br><span class="line">SELECT now();</span><br><span class="line">END//</span><br><span class="line">delimiter;</span><br><span class="line">CALL showTime;</span><br></pre></td></tr></table></figure><p>创建含参存储过程：只有一个IN参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">CREATE PROCEDURE selectById(IN uid SMALLINT UNSIGNED)</span><br><span class="line">BEGIN</span><br><span class="line">SELECT * FROM students WHERE stuid = uid;</span><br><span class="line">END//</span><br><span class="line">delimiter;</span><br><span class="line">call selectById(2);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">CREATE PROCEDURE dorepeat(n INT)</span><br><span class="line">BEGIN</span><br><span class="line">SET @i = 0;</span><br><span class="line">SET @sum = 0;</span><br><span class="line">REPEAT SET @sum = @sum+@i; SET @i = @i + 1;</span><br><span class="line">UNTIL @i &gt; n END REPEAT;</span><br><span class="line">END//</span><br><span class="line">delimiter;</span><br><span class="line">CALL dorepeat(100);</span><br><span class="line">SELECT @sum;</span><br></pre></td></tr></table></figure><p>创建含参存储过程:包含IN参数和OUT参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">CREATE PROCEDURE deleteById(IN uid SMALLINT UNSIGNED, OUT num</span><br><span class="line">SMALLINT UNSIGNED)</span><br><span class="line">BEGIN</span><br><span class="line">DELETE FROM students WHERE stuid &gt;= uid;</span><br><span class="line">SELECT row_count() into num;</span><br><span class="line">END//</span><br><span class="line">delimiter ;</span><br><span class="line">call deleteById(2,@Line);</span><br><span class="line">SELECT @Line;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>:创建存储过程deleteById,包含一个IN参数和一个OUT参数.调用时,传入删除的ID和保存被修改的行数值的用户变量@Line,select @Line;输出被影响行数</p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>1、存储过程和函数中可以使用流程控制来控制语句的执行</p><p>2、流程控制：</p><ol><li>IF：用来进行条件判断。根据是否满足条件，执行不同语句</li><li>CASE：用来进行条件判断，可实现比IF语句更复杂的条件判断</li><li>LOOP：重复执行特定的语句，实现一个简单的循环</li><li>LEAVE：用于跳出循环控制</li><li>ITERATE：跳出本次循环，然后直接进入下一次循环</li><li>REPEAT：有条件控制的循环语句。当满足特定条件时，就会跳出循环语句</li><li>WHILE：有条件控制的循环语句</li></ol><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>&ensp;&ensp;&ensp;&ensp;触发器的执行不是由程序调用，也不是由手工启动，而是由事件来触发、激活从而实现执行</p><p>创建触发器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE</span><br><span class="line">[DEFINER = &#123; user | CURRENT_USER &#125;]</span><br><span class="line">TRIGGER trigger_name</span><br><span class="line">trigger_time trigger_event</span><br><span class="line">ON tbl_name FOR EACH ROW</span><br><span class="line">trigger_body</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li>trigger_name：触发器的名称</li><li>trigger_time：{ BEFORE | AFTER }，表示在事件之前或之后触发</li><li>trigger_event:：{ INSERT |UPDATE | DELETE }，触发的具体事件</li><li>tbl_name：该触发器作用在表名</li></ul><p>触发器示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student_info (</span><br><span class="line">stu_id INT(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">stu_name VARCHAR(255) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY (stu_id)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE student_count (</span><br><span class="line">student_count INT(11) DEFAULT 0</span><br><span class="line">);</span><br><span class="line">INSERT INTO student_count VALUES(0);</span><br></pre></td></tr></table></figure><p>例：创建触发器，在向学生表INSERT数据时，学生数增加，DELETE学生时，学生数减少</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER trigger_student_count_insert</span><br><span class="line">AFTER INSERT</span><br><span class="line">ON student_info FOR EACH ROW</span><br><span class="line">UPDATE student_count SET student_count=student_count+1;</span><br><span class="line"></span><br><span class="line">CREATE TRIGGER trigger_student_count_delete</span><br><span class="line">AFTER DELETE</span><br><span class="line">ON student_info FOR EACH ROW</span><br><span class="line">UPDATE student_count SET student_count=student_count-1;</span><br></pre></td></tr></table></figure><p>查看触发器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TRIGGERS</span><br></pre></td></tr></table></figure><p>​    查询系统表information_schema.triggers的方式指定查询条件，查看指定的触发器信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE information_schema;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SELECT * FROM triggers WHERE</span><br><span class="line">trigger_name=<span class="string">'trigger_student_count_insert'</span>;</span><br></pre></td></tr></table></figure><p>删除触发器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TRIGGER trigger_name;</span><br></pre></td></tr></table></figure><h1 id="MySQL用户和权限管理"><a href="#MySQL用户和权限管理" class="headerlink" title="MySQL用户和权限管理"></a>MySQL用户和权限管理</h1><p>元数据数据库：mysql</p><p>​    系统授权表：  </p><p>​    db, host, user</p><p>​    columns_priv, tables_priv, procs_priv, proxies_priv</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use mysql</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt; show tables;</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+---------------------------+</span><br><span class="line">| columns_priv              |</span><br><span class="line">| db                        |</span><br><span class="line">| event                     |</span><br><span class="line">| func                      |</span><br><span class="line">| general_log               |</span><br><span class="line">| help_category             |</span><br><span class="line">| help_keyword              |</span><br><span class="line">| help_relation             |</span><br><span class="line">| help_topic                |</span><br><span class="line">| host                      |</span><br><span class="line">| ndb_binlog_index          |</span><br><span class="line">| plugin                    |</span><br><span class="line">| proc                      |</span><br><span class="line">| procs_priv                |</span><br><span class="line">| proxies_priv              |</span><br><span class="line">| servers                   |</span><br><span class="line">| slow_log                  |</span><br><span class="line">| tables_priv               |</span><br><span class="line">| time_zone                 |</span><br><span class="line">| time_zone_leap_second     |</span><br><span class="line">| time_zone_name            |</span><br><span class="line">| time_zone_transition      |</span><br><span class="line">| time_zone_transition_type |</span><br><span class="line">| user                      |</span><br><span class="line">+---------------------------+</span><br><span class="line">24 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>用户账号：<br>‘username‘@’host’<br>​    @’host’(允许用户登陆的)  </p><ul><li>​    主机名</li><li>​    IP地址或Network</li><li>​    通配符： % 、 _</li></ul><p>​        192.183.%.%  </p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>1、创建用户：create user</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">'username'</span>@<span class="string">'host'</span> [identifies by <span class="string">'password'</span>]；</span><br></pre></td></tr></table></figure><p>默认权限：USAGE</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create  user <span class="string">'xie'</span>@<span class="string">'192.168.183.%'</span> identified by <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><p>2、用户重命名：rename user</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename user old_username@<span class="string">'host'</span> to new_username@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename user xie@<span class="string">'192.168.183.%'</span> to <span class="built_in">test</span>@<span class="string">'192.168.183.%'</span>;</span><br></pre></td></tr></table></figure><p>3、删除用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user <span class="string">'username'</span>@<span class="string">'host'</span>;</span><br></pre></td></tr></table></figure><p>例：删除默认的空用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user <span class="string">''</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure><p>4、修改密码： </p><p>4.1、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;<span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">'user'</span>@<span class="string">'host'</span> = password(<span class="string">'password'</span>);</span><br></pre></td></tr></table></figure><p>4.2、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;update mysql.user <span class="built_in">set</span> password=password(<span class="string">'password'</span>) <span class="built_in">where</span> user=<span class="string">'username'</span>;</span><br></pre></td></tr></table></figure><p>此方法需要执行下面指令才能生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure><p><strong>前面两种方法是要进入mysql中才能更改</strong>，下面这种则不需要  </p><p>4.3、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p<span class="string">'oldpass'</span> password <span class="string">'newpass'</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot -p<span class="string">'123456'</span> password <span class="string">''</span></span><br></pre></td></tr></table></figure><p>4.4、忘记管理员密码的解决办法：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf  </span><br><span class="line">--skip-grant-tables</span><br><span class="line">--skip-networking  </span><br><span class="line">systemctl restart mariadb  <span class="comment">#重启服务</span></span><br><span class="line"></span><br><span class="line">mysql</span><br><span class="line">MariaDB [(none)]&gt;update mysql.user <span class="built_in">set</span> password=password(<span class="string">'123456'</span>) <span class="built_in">where</span> user=<span class="string">'root'</span><span class="comment">#使用UPDATE命令修改管理员密码</span></span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf  </span><br><span class="line">--skip-grant-tables</span><br><span class="line">--skip-networking </span><br><span class="line"><span class="comment">#移除上述两个选项，重启服务</span></span><br><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure><h2 id="MySQL权限管理"><a href="#MySQL权限管理" class="headerlink" title="MySQL权限管理"></a>MySQL权限管理</h2><h3 id="权限类别："><a href="#权限类别：" class="headerlink" title="权限类别："></a>权限类别：</h3><ul><li>管理类</li><li>程序类</li><li>数据库级别</li><li>表级别</li><li>字段级别</li></ul><h4 id="管理类："><a href="#管理类：" class="headerlink" title="管理类："></a>管理类：</h4><ul><li>CREATE TEMPORARY TABLES</li><li>CREATE USER</li><li>FILE</li><li>SUPER</li><li>SHOW DATABASES</li><li>RELOAD</li><li>SHUTDOWN</li><li>REPLICATION SLAVE</li><li>REPLICATION CLIENT</li><li>LOCK TABLES</li><li>PROCESS</li></ul><h4 id="程序类-FUNCTION、-PROCEDURE、TRIGGER"><a href="#程序类-FUNCTION、-PROCEDURE、TRIGGER" class="headerlink" title="程序类:(FUNCTION、 PROCEDURE、TRIGGER)"></a>程序类:(FUNCTION、 PROCEDURE、TRIGGER)</h4><ul><li>CREATE</li><li>ALTER</li><li>DROP</li><li>EXCUTE</li></ul><h4 id="库和表级别：DATABASE、-TABLE"><a href="#库和表级别：DATABASE、-TABLE" class="headerlink" title="库和表级别：DATABASE、 TABLE"></a>库和表级别：DATABASE、 TABLE</h4><ul><li>ALTER</li><li>CREATE</li><li>CREATE VIEW</li><li>DROP</li><li>INDEX</li><li>SHOW VIEW</li><li>GRANT OPTION：能将自己获得的权限转赠给其他用户</li></ul><h4 id="数据操作："><a href="#数据操作：" class="headerlink" title="数据操作："></a>数据操作：</h4><ul><li>SELECT</li><li>INSERT</li><li>DELETE</li><li>UPDATE</li></ul><h4 id="字段级别："><a href="#字段级别：" class="headerlink" title="字段级别："></a>字段级别：</h4><ul><li>SELECT(col1,col2,…)</li><li>UPDATE(col1,col2,…)</li><li>INSERT(col1,col2,…)</li></ul><h4 id="所有权限：ALL-PRIVILEGES-或-ALL"><a href="#所有权限：ALL-PRIVILEGES-或-ALL" class="headerlink" title="所有权限：ALL PRIVILEGES 或 ALL"></a>所有权限：ALL PRIVILEGES 或 ALL</h4><h3 id="授权管理"><a href="#授权管理" class="headerlink" title="授权管理"></a>授权管理</h3><h4 id="授权："><a href="#授权：" class="headerlink" title="授权："></a>授权：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT priv_type [(column_list)],... ON [object_type] priv_level TO <span class="string">'user'</span>@<span class="string">'host'</span> [IDENTIFIED BY <span class="string">'password'</span>][WITH GRANT OPTION];</span><br></pre></td></tr></table></figure><p>​    priv_type: ALL [PRIVILEGES]<br>​    object_type:TABLE | FUNCTION | PROCEDURE<br>​    priv_level: <em>(所有库) | </em>.<em> | db_name.</em> | db_name.tbl_name | tbl_name(当前库的表) | db_name.routine_name(指定库的函数,存储过程,触发器)<br>​    with_option: GRANT OPTION</p><p>​        MAX_QUERIES_PER_HOUR count<br>​        MAX_UPDATES_PER_HOUR count<br>​        MAX_CONNECTIONS_PER_HOUR count<br>​        MAX_USER_CONNECTIONS count</p><p>例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON wordpress.* TO <span class="string">"wordpress"</span>@<span class="string">"192.168.183.%"</span>  IDENTIFIED BY <span class="string">"123456"</span>;</span><br></pre></td></tr></table></figure></p><h4 id="回收授权："><a href="#回收授权：" class="headerlink" title="回收授权："></a>回收授权：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE priv_type [(column_list)][, priv_type [(column_list)]] ... ON [object_type] priv_level FROM user [, user] ...</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REVOKE DELETE ON testdb.* FROM <span class="string">'testuser'</span>@‘172.16.0.%’;</span><br></pre></td></tr></table></figure><h4 id="查看指定用户获得的授权："><a href="#查看指定用户获得的授权：" class="headerlink" title="查看指定用户获得的授权："></a>查看指定用户获得的授权：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Help SHOW GRANTS</span><br><span class="line">SHOW GRANTS FOR <span class="string">'user'</span>@<span class="string">'host'</span>;</span><br><span class="line">SHOW GRANTS FOR CURRENT_USER[()];</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：MariaDB服务进程启动时会读取mysql库中所有授权表至内存<br>(1) GRANT或REVOKE等执行权限操作会保存于系统表中，MariaDB的服务进程通常会自动重读授权表，使之生效</p><p>(2) 对于不能够或不能及时重读授权表的命令，可手动让MariaDB的服务进程重读授权表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;资源管理&quot;&gt;&lt;a href=&quot;#资源管理&quot; class=&quot;head
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="资源管理" scheme="http://yoursite.com/tags/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
    
      <category term="权限管理" scheme="http://yoursite.com/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Mysql中的索引</title>
    <link href="http://yoursite.com/2018/12/01/Mysql%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2018/12/01/Mysql中的索引/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2019-02-11T08:58:03.329Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="索引的概念"><a href="#索引的概念" class="headerlink" title="索引的概念"></a>索引的概念</h1><p>&ensp;&ensp;&ensp;&ensp;索引用于快速找出在某个列中有一特定值的行，不使用索引，MySQL必须从第一条记录开始读完整个表，直到找出相关的行，表越大，查询数据所花费的时间就越多，如果表中查询的列有一个索引，MySQL能够快速到达一个位置去搜索数据文件，而不必查看所有数据，那么将会节省很大一部分时间。</p><p>​    例如：有一张person表，其中有2W条记录，记录着2W个人的信息。有一个Phone的字段记录每个人的电话号码，现在想要查询出电话号码为xxxx的人的信息。</p><p>&ensp;&ensp;&ensp;&ensp;如果没有索引，那么将从表中第一条记录一条条往下遍历，直到找到该条信息为止。如果有了索引，那么会将该Phone字段，通过一定的方法进行存储，好让查询该字段上的信息时，能够快速找到对应的数据，而不必在遍历2W条数据了。</p><h1 id="MySQL中索引的优点和缺点和使用原则"><a href="#MySQL中索引的优点和缺点和使用原则" class="headerlink" title="MySQL中索引的优点和缺点和使用原则"></a>MySQL中索引的优点和缺点和使用原则</h1><p>优点：  </p><ol><li>索引可以降低服务需要扫描的数据量，减少了IO次数  </li><li>索引可以帮助服务器避免排序和使用临时表  </li><li>索引可以帮助将随机I/O转为顺序I/O  </li></ol><p>缺点：  </p><ol><li>创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加  </li><li>索引也需要占空间，我们知道数据表中的数据也会有最大上线设置的，如果我们有大量的索引，索引文件可能会比数据文件更快达到上线值</li><li>当对表中的数据进行增加、删除、修改时，索引也需要动态的维护，降低了数据的维护速度。  </li></ol><p>使用原则：<br>&ensp;&ensp;&ensp;&ensp;通过上面说的优点和缺点，我们应该可以知道，并不是每个字段度设置索引就好，也不是索引越多越好，而是需要自己合理的使用。  </p><ol><li>对经常更新的表就避免对其进行过多的索引，对经常用于查询的字段应该创建索引，</li><li>数据量小的表最好不要使用索引，因为由于数据较少，可能查询全部数据花费的时间比遍历索引的时间还要短，索引就可能不会产生优化效果。</li><li>在一同值少的列上(字段上)不要建立索引，比如在学生表的”性别”字段上只有男，女两个不同值。相反的，在一个字段上不同值较多可是建立索引。</li></ol><h1 id="索引类型："><a href="#索引类型：" class="headerlink" title="索引类型："></a>索引类型：</h1><ol><li><p>B+ TREE、 HASH、 R TREE</p></li><li><p>聚簇（集）索引、非聚簇索引：数据和索引是否存储在一起</p></li><li><p>主键索引、二级（辅助）索引</p></li><li><p>稠密索引、稀疏索引：是否索引了每一个数据项</p></li><li><p>简单索引、组合索引</p><p> ​    左前缀索引：取前面的字符做索引<br> ​    覆盖索引：从索引中即可取出要查询的数据，性能高</p></li></ol><h2 id="B-TREE索引"><a href="#B-TREE索引" class="headerlink" title="B+TREE索引"></a>B+TREE索引</h2><p>1、B+Tree索引：顺序存储，每一个叶子节点到根结点的距离是相同的；左前缀索引，适合查询范围类的数据</p><p>2、可以使用B+Tree索引的查询类型：</p><ul><li>全值匹配：精确所有索引列，如：姓wang，名xiaochun，年龄30</li><li>匹配最左前缀：即只使用索引的第一列，如：姓wang</li><li>匹配列前缀：只匹配一列值开头部分，如：姓以w开头的</li><li>匹配范围值：如：姓ma和姓wang之间</li><li>精确匹配某一列并范围匹配另一列：如：姓wang,名以x开头的</li><li>只访问索引的查询</li></ul><p>3、B+Tree索引的限制：</p><ul><li>如不从最左列开始，则无法使用索引，如：查找名为xiaochun，或姓为g结尾  </li><li>不能跳过索引中的列：如：查找姓wang，年龄30的，只能使用索引第一列</li><li>如果查询中某个列是为范围查询，那么其右侧的列都无法再使用索引：如：姓wang,名x%,年30，只能利用姓和名上面的索引</li></ul><p><strong>特别提示：</strong></p><ul><li>索引列的顺序和查询语句的写法应相匹配，才能更好的利用索引</li><li>为优化性能，可能需要针对相同的列但顺序不同创建不同的索引来满足不同类型的查询需求</li></ul><h2 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h2><p>1、Hash索引：基于哈希表实现，只有精确匹配索引中的所有列的查询才有效，索引自身只存储索引列对应的哈希值和数据指针，索引结构紧凑，查询性能好<br>2、Memory存储引擎支持显式hash索引，InnoDB和MyISAM存储引擎不支持<br>3、适用场景：只支持等值比较查询，包括=, &lt;=&gt;, IN()<br>4、不适合使用hash索引的场景</p><ul><li>不适用于顺序查询：索引存储顺序的不是值的顺序</li><li>不支持模糊匹配</li><li>不支持范围查询</li><li>不支持部分索引列匹配查找：如A，B列索引，只查询A列索引无效</li></ul><h2 id="空间数据索引R-Tree（-Geospatial-indexing-）"><a href="#空间数据索引R-Tree（-Geospatial-indexing-）" class="headerlink" title="空间数据索引R-Tree（ Geospatial indexing ）"></a>空间数据索引R-Tree（ Geospatial indexing ）</h2><p>1、MyISAM支持地理空间索引，可以使用任意维度组合查询，使用特有的函数访问，常用于做地理数据存储，使用不多</p><p>2、InnoDB从MySQL5.7之后也开始支持  </p><h2 id="全文索引-FULLTEXT"><a href="#全文索引-FULLTEXT" class="headerlink" title="全文索引(FULLTEXT)"></a>全文索引(FULLTEXT)</h2><p>1、在文本中查找关键词，而不是直接比较索引中的值，类似搜索引擎<br>2、InnoDB从MySQL 5.6之后也开始支持    </p><h2 id="冗余和重复索引："><a href="#冗余和重复索引：" class="headerlink" title="冗余和重复索引："></a>冗余和重复索引：</h2><p>1、冗余索引：（A），（A，B）</p><p>2、重复索引：已经有索引，再次建立索引</p><h2 id="索引优化建议"><a href="#索引优化建议" class="headerlink" title="索引优化建议"></a>索引优化建议</h2><ol><li>只要列中含有NULL值，就最好不要在此例设置索引，复合索引如果有NULL值，此列在使用时也不会使用索引  </li><li>尽量使用短索引，如果可以，应该制定一个前缀长度  </li><li>对于经常在where子句使用的列，最好设置索引  </li><li>对于有多个列where或者order by子句，应该建立复合索引  </li><li>对于like语句，以%或者‘-’开头的不会使用索引，以%结尾会使用索引  </li><li>尽量不要在列上进行运算（函数操作和表达式操作）  </li><li>尽量不要使用not in和&lt;&gt;操作  </li></ol><h1 id="管理索引"><a href="#管理索引" class="headerlink" title="管理索引"></a>管理索引</h1><p>1、创建索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">creata index index_name ON tbl_name (index_col_name[(length)],...);</span><br><span class="line"><span class="built_in">help</span> create index;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; create index index_name_age on testlog(name,age);   </span><br><span class="line">Stage: 1 of 1 <span class="string">'altering table'</span>      0% of stage   </span><br><span class="line">Query OK, 0 rows affected (0.24 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><p>2、删除索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index index_name ON tbl_name;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; drop index index_name_age on testlog;</span><br></pre></td></tr></table></figure><p>3、查看索引</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM [db_name.]tbl_name;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; show indexes from testlog\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">        Table: testlog</span><br><span class="line">   Non_unique: 0</span><br><span class="line">     Key_name: PRIMARY</span><br><span class="line"> Seq_in_index: 1</span><br><span class="line">  Column_name: id</span><br><span class="line">    Collation: A</span><br><span class="line">  Cardinality: 100076</span><br><span class="line">     Sub_part: NULL</span><br><span class="line">       Packed: NULL</span><br><span class="line">         Null: </span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment: </span><br><span class="line">Index_comment: </span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: No query specified</span><br></pre></td></tr></table></figure><p>4、优化表空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPTIMIZE TABLE tb_name;</span><br></pre></td></tr></table></figure><p>5、查看索引的使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL userstat=1;</span><br><span class="line">SHOW INDEX_STATISTICS;</span><br></pre></td></tr></table></figure><h1 id="EXPLAIN"><a href="#EXPLAIN" class="headerlink" title="EXPLAIN"></a>EXPLAIN</h1><p>&ensp;&ensp;&ensp;&ensp;通过EXPLAIN来分析索引的有效性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT clause</span><br></pre></td></tr></table></figure><p>​    获取查询执行计划信息，用来查看查询优化器如何执行查询  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; explain select * from testlog <span class="built_in">where</span> id=99999;</span><br><span class="line">+------+-------------+---------+-------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">| id   | select_type | table   | <span class="built_in">type</span>  | possible_keys | key     | key_len | ref   | rows | Extra |</span><br><span class="line">+------+-------------+---------+-------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">|    1 | SIMPLE      | testlog | const | PRIMARY       | PRIMARY | 4       | const |    1 |       |</span><br><span class="line">+------+-------------+---------+-------+---------------+---------+---------+-------+------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; explain select * from testlog <span class="built_in">where</span> age=99999;</span><br><span class="line">+------+-------------+---------+------+---------------+------+---------+------+--------+-------------+</span><br><span class="line">| id   | select_type | table   | <span class="built_in">type</span> | possible_keys | key  | key_len | ref  | rows   | Extra       |</span><br><span class="line">+------+-------------+---------+------+---------------+------+---------+------+--------+-------------+</span><br><span class="line">|    1 | SIMPLE      | testlog | ALL  | NULL          | NULL | NULL    | NULL | 100076 | Using <span class="built_in">where</span> |</span><br><span class="line">+------+-------------+---------+------+---------------+------+---------+------+--------+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">这两个表对比就会发现，上面那张表使用了索引，而下面的则没有</span><br></pre></td></tr></table></figure><p>输出信息说明：  </p><ol><li><p>id：当前查询语句中，每个SELECT语句的编号</p><p> 复杂类型的查询有三种：      </p></li></ol><ul><li>​        简单子查询</li><li>​        用于FROM中的子查询</li><li>​        联合查询：UNION</li></ul><p><strong>注意：UNION查询的分析结果会出现一个额外匿名临时表</strong>  </p><ol start="2"><li><p>select_type</p><p> 简单查询为SIMPLE</p><p> 复杂查询：</p><p> ​    SUBQUERY 简单子查询</p><p> ​    PRIMARY 最外面的SELECT</p><p> ​    DERIVED 用于FROM中的子查询</p><p> ​    UNION UNION语句的第一个之后的SELECT语句</p><p> ​    UNION RESULT 匿名临时表  </p></li><li><p>table：SELECT语句关联到的表</p></li><li><p>type：关联类型或访问类型，即MySQL决定的如何去查询表中的行的方式，以下顺序，性能从低到高</p><p>  ALL: 全表扫描</p><p>  index：根据索引的次序进行全表扫描；如果在Extra列出现“Using index”表示了使用覆盖索引，而非全表扫描</p><p>  range：有范围限制的根据索引实现范围扫描；扫描位置始于索引中的某一点，结束于另一点</p><p>  ref: 根据索引返回表中匹配某单个值的所有行</p><p>  eq_ref：仅返回一个行，但与需要额外与某个参考值做比较</p><p>  const, system: 直接返回单个行</p></li><li><p>possible_keys：查询可能会用到的索引</p></li><li><p>key: 查询中使用到的索引</p></li><li><p>key_len: 在索引使用的字节数</p></li><li><p>ref: 在利用key字段所表示的索引完成查询时所用的列或某常量值</p></li><li><p>rows：MySQL估计为找所有的目标行而需要读取的行数</p></li><li><p>Extra：额外信息</p><p>Using index：MySQL将会使用覆盖索引，以避免访问表</p><p>Using where：MySQL服务器将在存储引擎检索后，再进行一次过滤</p><p>Using temporary：MySQL对结果排序时会使用临时表</p><p>Using filesort：对结果使用一个外部索引排序 </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;索引的概念&quot;&gt;&lt;a href=&quot;#索引的概念&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="索引" scheme="http://yoursite.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql多实例</title>
    <link href="http://yoursite.com/2018/11/26/Mysql%E5%A4%9A%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/11/26/Mysql多实例/</id>
    <published>2018-11-25T16:00:00.000Z</published>
    <updated>2019-01-14T05:56:55.227Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="基于源码编译的方式配置多实例-基于测试"><a href="#基于源码编译的方式配置多实例-基于测试" class="headerlink" title="基于源码编译的方式配置多实例(基于测试)"></a>基于源码编译的方式配置多实例(基于测试)</h2><p>上一篇文章已经进行了源码编译安装，这里就不说了</p><p>创建文件实现数据库各自存放自己的数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#mkdir /mysql/&#123;3306,3307,3308&#125; -pv</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#cd mysql</span></span><br><span class="line">[root@centos7 mysql]<span class="comment">#ll</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 2 root root 6 Nov 28 21:19 3306</span><br><span class="line">drwxr-xr-x. 2 root root 6 Nov 28 21:19 3307</span><br><span class="line">drwxr-xr-x. 2 root root 6 Nov 28 21:19 3308</span><br><span class="line">[root@centos7 ~]<span class="comment">#mkdir &#123;3306,3307,3308&#125;/&#123;etc,socket,log,pid&#125;  -pv</span></span><br><span class="line">[root@centos7 mysql]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── 3306</span><br><span class="line">│   ├── etc</span><br><span class="line">│   ├── <span class="built_in">log</span></span><br><span class="line">│   ├── pid</span><br><span class="line">│   └── socket</span><br><span class="line">├── 3307</span><br><span class="line">│   ├── etc</span><br><span class="line">│   ├── <span class="built_in">log</span></span><br><span class="line">│   ├── pid</span><br><span class="line">│   └── socket</span><br><span class="line">└── 3308</span><br><span class="line">    ├── etc</span><br><span class="line">    ├── <span class="built_in">log</span></span><br><span class="line">    ├── pid</span><br><span class="line">    └── socket</span><br><span class="line"></span><br><span class="line">15 directories, 0 files</span><br></pre></td></tr></table></figure></p><p>修改目录属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]<span class="comment">#chown -R mysql.mysql *</span></span><br><span class="line">[root@centos7 mysql]<span class="comment">#ll</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 6 mysql mysql 53 Nov 28 21:22 3306</span><br><span class="line">drwxr-xr-x. 6 mysql mysql 53 Nov 28 21:22 3307</span><br><span class="line">drwxr-xr-x. 6 mysql mysql 53 Nov 28 21:22 3308</span><br></pre></td></tr></table></figure></p><p>生成各自的数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]<span class="comment">#cd /app/mysql/</span></span><br><span class="line">[root@centos7 mysql]<span class="comment">#./scripts/mysql_install_db --user=mysql --datadir=/mysql/3306</span></span><br><span class="line">[root@centos7 mysql]<span class="comment">#./scripts/mysql_install_db --user=mysql --datadir=/mysql/3307</span></span><br><span class="line">[root@centos7 mysql]<span class="comment">#./scripts/mysql_install_db --user=mysql --datadir=/mysql/3308</span></span><br></pre></td></tr></table></figure></p><p>将配置文件复制至各个实例的配置路径下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]<span class="comment">#cp /etc/my.cnf /mysql/3306/etc/</span></span><br><span class="line">[root@centos7 3306]<span class="comment">#cd /mysql/3306/etc/</span></span><br><span class="line">[root@centos7 etc]<span class="comment">#ll</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 570 Nov 28 21:46 my.cnf</span><br><span class="line">[root@centos7 etc]<span class="comment">#vim my.cnf </span></span><br><span class="line">    [mysqld]</span><br><span class="line">    port=3306</span><br><span class="line">    datadir=/mysql/3306/</span><br><span class="line">    socket=/mysql/3306/socket/mysql.sock</span><br><span class="line">    <span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">    symbolic-links=0</span><br><span class="line">    <span class="comment"># Settings user and group are ignored when systemd is used.</span></span><br><span class="line">    <span class="comment"># If you need to run mysqld under a different user or group,</span></span><br><span class="line">    <span class="comment"># customize your systemd unit file for mariadb according to the</span></span><br><span class="line">    <span class="comment"># instructions in http://fedoraproject.org/wiki/Systemd</span></span><br><span class="line"></span><br><span class="line">    [mysqld_safe]</span><br><span class="line">    <span class="built_in">log</span>-error=/mysql/3306/<span class="built_in">log</span>/mariadb.log</span><br><span class="line">    pid-file=/mysql/3306/pid/mariadb.pid</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># include all files from the config directory</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#!includedir /etc/my.cnf.d</span></span><br><span class="line">                                                    </span><br><span class="line">[root@centos7 etc]<span class="comment">#cp my.cnf ../../3307/etc/</span></span><br><span class="line">[root@centos7 etc]<span class="comment">#cp my.cnf ../../3308/etc/</span></span><br><span class="line">继续修改/3307/etc/my.cnf /3307/etc/my.cnf的配置文件</span><br></pre></td></tr></table></figure></p><p>将脚本传到在各个实例的路径下（此脚本已备好）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 etc]<span class="comment">#cd /mysql/3306/</span></span><br><span class="line"></span><br><span class="line">[root@centos7 3306]<span class="comment">#rz</span></span><br><span class="line">rz waiting to receive.</span><br><span class="line">Starting zmodem transfer.  Press Ctrl+C to cancel.</span><br><span class="line">Transferring mysqld...</span><br><span class="line">  100%       1 KB       1 KB/sec    00:00:01       0 Errors  </span><br><span class="line"></span><br><span class="line">[root@centos7 3307]<span class="comment">#rz</span></span><br><span class="line">rz waiting to receive.</span><br><span class="line">Starting zmodem transfer.  Press Ctrl+C to cancel.</span><br><span class="line">Transferring mysqld...</span><br><span class="line">  100%       1 KB       1 KB/sec    00:00:01       0 Errors  </span><br><span class="line">[root@centos7 3308]<span class="comment">#rz</span></span><br><span class="line">rz waiting to receive.</span><br><span class="line">Starting zmodem transfer.  Press Ctrl+C to cancel.</span><br><span class="line">Transferring mysqld...</span><br><span class="line">  100%       1 KB       1 KB/sec    00:00:01       0 Errors</span><br></pre></td></tr></table></figure></p><p>将脚本中的端口号改为各个实例自己的端口号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 3306]<span class="comment">#vim mysqld</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">[root@centos7 3306]<span class="comment">#vim ../3307/mysqld</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">port=3307</span><br><span class="line"></span><br><span class="line">[root@centos7 3306]<span class="comment">#vim ../3308/mysqld</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">port=3308</span><br></pre></td></tr></table></figure></p><p>修改脚本的权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 3306]<span class="comment">#chmod 700 mysqld</span></span><br><span class="line">[root@centos7 3306]<span class="comment">#chmod 700 ../3307/mysqld</span></span><br><span class="line">[root@centos7 3306]<span class="comment">#chmod 700 ../3308/mysqld</span></span><br></pre></td></tr></table></figure></p><p>启动脚本并打开脚本内相应的功能<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 3306]<span class="comment">#./mysqld start     </span></span><br><span class="line">Starting MySQL...</span><br><span class="line">[root@centos7 3306]<span class="comment">#../3307/mysqld start</span></span><br><span class="line">Starting MySQL...</span><br><span class="line">[root@centos7 3306]<span class="comment">#../3308/mysqld start</span></span><br><span class="line">Starting MySQL...</span><br></pre></td></tr></table></figure></p><p>ss  -ntl  各相应端口已经打开<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 3306]<span class="comment">#ss -ntlp| grep mysqld</span></span><br><span class="line">LISTEN     0      80          :::3306                    :::*                   users:((<span class="string">"mysqld"</span>,pid=3068,fd=20))</span><br><span class="line">LISTEN     0      80          :::3307                    :::*                   users:((<span class="string">"mysqld"</span>,pid=3193,fd=20))</span><br><span class="line">LISTEN     0      80          :::3308                    :::*                   users:((<span class="string">"mysqld"</span>,pid=3307,fd=20))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;基于源码编译的方式配置多实例-基于测试&quot;&gt;&lt;a href=&quot;#基于
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql基本概念及安装</title>
    <link href="http://yoursite.com/2018/11/26/Mysql%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/11/26/Mysql基本概念及安装/</id>
    <published>2018-11-25T16:00:00.000Z</published>
    <updated>2019-01-26T02:23:51.478Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="数据库概要"><a href="#数据库概要" class="headerlink" title="数据库概要"></a>数据库概要</h1><p>&ensp;&ensp;&ensp;&ensp;数据库（Database）是存储与管理数据的软件系统，就像一个存入数据的物流仓库。</p><p>&ensp;&ensp;&ensp;&ensp;在商业领域，信息就意味着商机，取得信息的一个非常重要的途径就是对数据进行分析处理，这就催生了各种专业的数据管理软件，数据库就是其中的一种。当然，数据库管理系统也不是一下子就建立起来，它也是经过了不断的丰富和发展，才有了今天的模样。</p><h1 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h1><ol><li><p>人工处理阶段<br>在20世纪50年代中期以前的计算机诞生初期，其处理能力很有限，只能够完成一些简单的运算，数据处理能力也很有限，这使得当时的计算机只能够用于科学和工程计算。计算机上没有专用的管理数据的软件，数据由计算机或处理它的程序自行携带。当数据的存储格式、读写路径或方法发生变化的时候，其处理程序也必须要做出相应的改变以保持程序的正确性。</p></li><li><p>文件系统<br>20世纪50年代后期到60年代中期，随着硬件和软件技术的发展，计算机不仅用于科学计算，还大量用于商业管理中。在这一时期，数据和程序在存储位置上已经完全分开，数据被单独组织成文件保存到外部存储设备上，这样数据文件就可以为多个不同的程序在不同的时间所使用。<br>虽然程序和数据在存储位置上分开了，而且操作系统也可以帮助我们对完成了数据的存储位置和存取路径的管理，但是程序设计仍然受到数据存储格式和方法的影响，不能够完全独立于数据，而且数据的冗余较大。</p></li><li><p>数据库管理系统<br>从20世纪70年代以来，计算机软硬件技术取得了飞跃式的发展，这一时期最主要的发展就是产生了真正意义上的数据库管理系统，它使得应用程序和数据之间真正的实现的接口统一、数据共享等，这样应用程序都可以按照统一的方式直接操作数据，也就是应用程序和数据都具有了高度的独立性。</p></li></ol><h1 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h1><p>​    数据库通常分为层次式数据库、网络式数据库和关系式数据库三种。</p><p>​    而不同的数据库是按不同的数据结构来联系和组织的。</p><p>​    而在当今的互联网中，最常见的数据库模型主要是两种，即关系型数据库和非关系型数据库。</p><h2 id="关系型数据库-RDMBS"><a href="#关系型数据库-RDMBS" class="headerlink" title="关系型数据库(RDMBS)"></a>关系型数据库(RDMBS)</h2><p>关系 ：关系就是二维表，其中：表中的行、列次序并不重要<br>行row：表中的每一行，又称为一条记录<br>列column：表中的每一列，称为属性，字段<br>主键（Primary key）：用于惟一确定一个记录的字段  （保证数据库避免产生冗余数据的一种手段）<br><code>一张表格只有一个主键，但是可以关联多个字段（复合主键）</code><br>域domain：属性的取值范围，如，性别只能是男’和’女’两个值  </p><p>当前在成熟应用且服务与各种系统的主力数据库还是关系型数据库。<br>代表：Oracle、SQL Server、MySQL</p><h2 id="实体-联系模型E-R"><a href="#实体-联系模型E-R" class="headerlink" title="实体-联系模型E-R"></a>实体-联系模型E-R</h2><p>实体Entity：客观存在并可以相互区分的客观事物或抽象事件称为实体<br>• 在E-R图中用矩形框表示实体，把实体名写在框内<br>属性：实体所具有的特征或性质<br>联系：联系是数据之间的关联集合，是客观存在的应用语义链<br>• 实体内部的联系：指组成实体的各属性之间的联系。如职工实体中，职工号和部门经理号之间有一种关联关系<br>• 实体之间的联系：指不同实体之间联系。例：学生选课实体和学生基本信息实体之间<br>• 实体之间的联系用菱形框表示  </p><h3 id="联系类型"><a href="#联系类型" class="headerlink" title="联系类型"></a>联系类型</h3><ul><li>一对一联系(1:1)  </li><li>一对多联系(1:n)  </li><li>多对多联系(m:n)  </li></ul><h3 id="数据的操作："><a href="#数据的操作：" class="headerlink" title="数据的操作："></a>数据的操作：</h3><p>数据提取：在数据集合中提取感兴趣的内容。 SELECT<br>数据更新：变更数据库中的数据。 INSERT、 DELETE、 UPDATE<br>数据的约束条件 ：是一组完整性规则的集合<br>实体（行）完整性 Entity integrity<br>域（列）完整性 Domain Integrity<br>参考完整性 Referential Integrity  </p><h3 id="约束：constraint，表中的数据要遵守的限制"><a href="#约束：constraint，表中的数据要遵守的限制" class="headerlink" title="约束：constraint，表中的数据要遵守的限制"></a>约束：constraint，表中的数据要遵守的限制</h3><p>​    主键(pk)：一个或多个字段的组合，填入的数据必须能在本表中唯一标识本行；必须提供数据，即NOT NULL，一个表只能有一个<br>​    惟一键(uk)：一个或多个字段的组合，填入的数据必须能在本表中唯一标识本行；允许为NULL，一个表可以存在多个<br>​    外键(fk)：一个表中的某字段可填入的数据取决于另一个表的主键或唯一键已有的数据<br>检查：字段值在一定范围内</p><h2 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h2><p>随着时代的进步与发展的需要，非关系型数据库应运而生。</p><p>代表：Redis、Mongodb</p><p>NoSQL数据库在存储速度与灵活性方面有优势，也常用于缓存。</p><h2 id="简易数据规划流程"><a href="#简易数据规划流程" class="headerlink" title="简易数据规划流程"></a>简易数据规划流程</h2><p>第一阶段：收集数据，得到字段  </p><ul><li>收集必要且完整的数据项  </li><li>转换成数据表的字段  </li></ul><p>第二阶段：把字段分类，归入表，建立表的关联  </p><ul><li>关联：表和表间的关系  </li><li>分割数据表并建立关联的优点  </li><li>节省空间  </li><li>减少输入错误  </li><li>方便数据修改  </li></ul><p>第三阶段：  </p><ul><li>规范化数据库  </li></ul><h1 id="数据库的正规化分析"><a href="#数据库的正规化分析" class="headerlink" title="数据库的正规化分析"></a>数据库的正规化分析</h1><h2 id="RDMBS设计范式基础概念"><a href="#RDMBS设计范式基础概念" class="headerlink" title="RDMBS设计范式基础概念"></a>RDMBS设计范式基础概念</h2><p>&ensp;&ensp;&ensp;&ensp;设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同范式，各种范式呈递次规范，越高的范式数据库冗余越小<br>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴德斯科范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般数据库只需满足第三范式(3NF）即可</p><h2 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h2><p>第一范式（1NF）<br>1NF：无重复的列，每一列都是不可分割的基本数据项，同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。除去同类型的字段，就是无重复的列<br>说明：第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库<br>第二范式（2NF）<br>2NF：属性完全依赖于主键，第二范式必须先满足第一范式，要求表中的每个行必须可以被唯一地区分。通常为表加上一个列，以存储各个实例的唯一标识PK，非PK的字段需要与整个PK有直接相关性<br>第三范式（3NF）<br>3NF：属性不依赖于其它非主属性，满足第三范式必须先满足第二范式。第三范式要求一个数据库表中不包含已在其它表中已包含的非主关键字信息，非PK的字段间不能有从属关系  </p><h2 id="范式与效率"><a href="#范式与效率" class="headerlink" title="范式与效率"></a>范式与效率</h2><p>&ensp;&ensp;&ensp;&ensp;在我们设计数据库时，设计人员、客户、开发人员通常对数据库的设计有一定的矛盾，客户更喜欢方便，清晰的结果，开发人员也希望数据库关系比较简单，降低开发难度，而设计人员则需要应用三大范式对数据库进行严格规范化，减少数据冗余，提高数据库可维护性和扩展性。由此可以看出，为了满足三大范式，我们数据库设计将会与客户、开发人员产生分歧，所以在实际的数据库设计中，我们不能一味的追求规范化，既要考虑三大范式，减少数据冗余和各种数据库操作异常，又要充分考虑到数据库的性能问题，允许适当的数据库冗余。</p><h1 id="MySQL介绍"><a href="#MySQL介绍" class="headerlink" title="MySQL介绍"></a>MySQL介绍</h1><h2 id="MySQL概要"><a href="#MySQL概要" class="headerlink" title="MySQL概要"></a>MySQL概要</h2><p>&ensp;&ensp;&ensp;&ensp;MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件之一</p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/mysql.png?raw=true" alt=""></p><p>&ensp;&ensp;&ensp;&ensp;MySQL是一种关系数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。<br>&ensp;&ensp;&ensp;&ensp;MySQL所使用的 SQL 语言是用于访问数据库的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</p><h2 id="MySQL系列"><a href="#MySQL系列" class="headerlink" title="MySQL系列"></a>MySQL系列</h2><h3 id="官方网址："><a href="#官方网址：" class="headerlink" title="官方网址："></a>官方网址：</h3><p><a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a><br><a href="http://mariadb.org/" target="_blank" rel="noopener">http://mariadb.org/</a><br><a href="https://www.percona.com" target="_blank" rel="noopener">https://www.percona.com</a>  </p><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p><a href="https://dev.mysql.com/doc/" target="_blank" rel="noopener">https://dev.mysql.com/doc/</a><br><a href="https://mariadb.com/kb/en/" target="_blank" rel="noopener">https://mariadb.com/kb/en/</a><br><a href="https://www.percona.com/software/mysql-database/percona-server" target="_blank" rel="noopener">https://www.percona.com/software/mysql-database/percona-server</a>  </p><h3 id="版本演变："><a href="#版本演变：" class="headerlink" title="版本演变："></a>版本演变：</h3><p>MySQL：5.1 –&gt; 5.5 –&gt; 5.6 –&gt; 5.7 –&gt;8.0<br>MariaDB：5.5 –&gt;10.0–&gt; 10.1 –&gt; 10.2 –&gt; 10.3  </p><h2 id="MYSQL的特性"><a href="#MYSQL的特性" class="headerlink" title="MYSQL的特性"></a>MYSQL的特性</h2><p>&ensp;&ensp;&ensp;&ensp;插件式存储引擎：也称为“表类型”，存储管理器有多种实现版本，功能和特性可能均略有差别；用户可根据需要灵活选择,Mysql5.5.5开始innoDB引擎是MYSQL默认引擎<br>MyISAM ==&gt; Aria<br>InnoDB ==&gt; XtraDB<br>单进程，多线程<br>诸多扩展和新特性<br>提供了较多测试组件<br>开源  </p><h1 id="安装MYSQL"><a href="#安装MYSQL" class="headerlink" title="安装MYSQL"></a>安装MYSQL</h1><p>Mariadb安装方式：</p><ol><li>yum安装</li><li>二进制格式的程序包：展开至特定路径，并经过简单配置后即可使用</li><li>源码编译安装</li></ol><p>以安装mariadb为例介绍：  </p><h2 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h2><p>1、首先进入mariadb的官网<a href="http://mariadb.org/" target="_blank" rel="noopener">http://mariadb.org/</a><br><img src="https://github.com/xiejia1215225/Pictures/blob/master/mariadb1.png?raw=true" alt=""></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/mariadb2.png?raw=true" alt=""></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/mariadb3.png?raw=true" alt=""></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/mariadb4.png?raw=true" alt=""></p><p>选择操作系统和版本信息后，下面会自动跳出仓库地址，只需复制即可</p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/mariadb5.png?raw=true" alt=""></p><p>然后安装即可，如果你的仓库中还有其他的EPEL源请禁用:enabled=0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb-server -y(centos7)</span><br></pre></td></tr></table></figure><h2 id="二进制式安装"><a href="#二进制式安装" class="headerlink" title="二进制式安装"></a>二进制式安装</h2><p>二进制安装就是已经将源码进行了编译可以直接复制在相应的文件中即可</p><p>安装前准备：</p><pre><code>1、关闭SELinux2、关闭防火墙3、下载所安装的二进制包4、确保本机没有安装类似的软件</code></pre><p>开始安装：</p><p>1、创建系统用户 shell类型为不可登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -r  -d /data/mysqld  -s  /sbin/nologin  mysql</span><br></pre></td></tr></table></figure><p>2、解包 并将解包的文件保存在系统指定的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#tar xf mariadb-10.2.19-linux-x86_64.tar.gz -C /usr/local/</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ll -d /usr/local/mariadb-10.2.19-linux-x86_64/</span></span><br><span class="line">drwxrwxr-x. 12 1021 1004 4096 Nov 13 07:37 /usr/<span class="built_in">local</span>/mariadb-10.2.19-linux-x86_64/</span><br></pre></td></tr></table></figure><p>3、进入解压后的文件，并将其生成一个软链接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@centos7 <span class="built_in">local</span>]<span class="comment"># ln -s mariadb-10.2.19-linux-x86_64/ mysql</span></span><br><span class="line">[root@centos7 <span class="built_in">local</span>]<span class="comment"># ll mysql</span></span><br><span class="line">lrwxrwxrwx. 1 root root 29 Nov 27 10:30 mysql -&gt; mariadb-10.2.19-linux-x86_64/</span><br></pre></td></tr></table></figure></p><p>4、更改mysql的所属主和所属组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 <span class="built_in">local</span>]<span class="comment"># chown -R root.mysql mysql/</span></span><br></pre></td></tr></table></figure></p><p>5、将其路径写入系统路径变量中并使其立即生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 <span class="built_in">local</span>]<span class="comment"># echo 'PATH=/usr/local/mysql/bin:$PATH' &gt;&gt;/etc/profile.d/mysql.sh</span></span><br><span class="line">[root@centos7 <span class="built_in">local</span>]<span class="comment"># ./etc/profile.d/mysql.sh</span></span><br></pre></td></tr></table></figure></p><p>6、创建存放用户数据的目录，并修改此目录的相关权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 <span class="built_in">local</span>]<span class="comment"># mkdir /data/mysqldb</span></span><br><span class="line">[root@centos7 <span class="built_in">local</span>]<span class="comment"># chown mysql.mysql /data/mysqldb</span></span><br><span class="line">[root@centos7 <span class="built_in">local</span>]<span class="comment"># chmod 770 /data/mysqldb</span></span><br></pre></td></tr></table></figure></p><p>7、修改配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 <span class="built_in">local</span>]<span class="comment"># cd mysql/</span></span><br><span class="line">[root@centos7 mysql]<span class="comment"># mkdir /etc/mysql/</span></span><br><span class="line">[root@centos7 mysql]<span class="comment"># cp support-files/my-huge.cnf /etc/mysql/my.cnf</span></span><br><span class="line">[root@centos7 mysql]<span class="comment"># vim /etc/mysql/my.cnf</span></span><br><span class="line">.......省略........</span><br><span class="line">    <span class="comment"># The MySQL server</span></span><br><span class="line">    [mysqld]</span><br><span class="line">    atadir=/data/mysqldb        数据存放的位置</span><br><span class="line">    kip_name_resolve=on         禁止主机名解析（加）</span><br><span class="line">    port            = 3306</span><br><span class="line">    socket          = /tmp/mysql.sock</span><br><span class="line">    .......省略........</span><br></pre></td></tr></table></figure></p><p>7、生成数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]<span class="comment"># script/mysql_install_db  --datadir=/data/mysqldb --user=mysql</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># ll /data/mysqldb/</span></span><br><span class="line">total 110660</span><br><span class="line">-rw-rw----. 1 mysql mysql    16384 Nov 27 12:34 aria_log.00000001</span><br><span class="line">-rw-rw----. 1 mysql mysql       52 Nov 27 12:34 aria_log_control</span><br><span class="line">-rw-rw----. 1 mysql mysql      938 Nov 27 12:34 ib_buffer_pool</span><br><span class="line">-rw-rw----. 1 mysql mysql 12582912 Nov 27 12:34 ibdata1</span><br><span class="line">-rw-rw----. 1 mysql mysql 50331648 Nov 27 12:34 ib_logfile0</span><br><span class="line">-rw-rw----. 1 mysql mysql 50331648 Nov 27 12:34 ib_logfile1</span><br><span class="line">drwx------. 2 mysql root      4096 Nov 27 12:34 mysql</span><br><span class="line">-rw-rw----. 1 mysql mysql    29017 Nov 27 12:34 mysql-bin.000001</span><br><span class="line">-rw-rw----. 1 mysql mysql       19 Nov 27 12:34 mysql-bin.index</span><br><span class="line">-rw-rw----. 1 mysql mysql        7 Nov 27 12:34 mysql-bin.state</span><br><span class="line">drwx------. 2 mysql mysql       20 Nov 27 12:34 performance_schema</span><br><span class="line">drwx------. 2 mysql root         6 Nov 27 12:34 <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>9、准备服务脚本，并启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]<span class="comment"># cp support-files/mysql.server /etc/init.d/mysqld</span></span><br><span class="line">[root@centos7 mysql]<span class="comment"># chkconfig --add mysqld</span></span><br><span class="line">[root@centos7 mysql]<span class="comment"># service mysqld start</span></span><br></pre></td></tr></table></figure></p><p>10、此时可以正常启动mysql<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mysql</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 10</span><br><span class="line">Server version: 10.2.19-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure></p><p>11、安全初始化</p><p>​    但是还有一个问题，此时任何用户都可以登录，这样是很危险的，毕竟数据库是想当重要的文件，那么可以通过以下命令进行加密，此命令下有子命令一步一步设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mysql_secure_installation </span></span><br><span class="line"></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to <span class="built_in">log</span> into MariaDB to secure it, we<span class="string">'ll need the current</span></span><br><span class="line"><span class="string">password for the root user.  If you'</span>ve just installed MariaDB, and</span><br><span class="line">you haven<span class="string">'t set the root password yet, the password will be blank,</span></span><br><span class="line"><span class="string">so you should just press enter here.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Enter current password for root (enter for none): </span></span><br><span class="line"><span class="string">OK, successfully used password, moving on...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Setting the root password ensures that nobody can log into the MariaDB</span></span><br><span class="line"><span class="string">root user without the proper authorisation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Set root password? [Y/n] y</span></span><br><span class="line"><span class="string">New password: </span></span><br><span class="line"><span class="string">...............省略........</span></span><br></pre></td></tr></table></figure><p>设置完之后就可以以密码方式登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mysql</span></span><br><span class="line">ERROR 1045 (28000): Access denied <span class="keyword">for</span> user <span class="string">'root'</span>@<span class="string">'localhost'</span> (using password: NO)</span><br><span class="line">[root@centos7 ~]<span class="comment"># mysql -uroot -p        以root身份登录，必须要密码了</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 21</span><br><span class="line">Server version: 10.2.19-MariaDB-log MariaDB Server</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure></p><h2 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h2><p>1、创建账号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#useradd -r -s /sbin/nologin -d /data/mysql mysql</span></span><br></pre></td></tr></table></figure></p><p>2、安装包组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#yum install bison bison-devel zlib-devel libcurl-devel libarchive-devel boost-devel gcc gcc-c++ cmake ncurses-devel gnutls-devel libxml2-devel openssl-devel libevent-devel libaio-devel</span></span><br></pre></td></tr></table></figure></p><p>3、创建存放用户数据的目录，并修改此目录的相关权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#mkdir /data/mysql</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ll -d /data/mysql</span></span><br><span class="line">drwxr-xr-x 2 root root 6 Nov 27 14:09 /data/mysql</span><br><span class="line">[root@centos7 ~]<span class="comment">#chown mysql.mysql /data/mysql </span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ll -d /data/mysql            </span></span><br><span class="line">drwxr-xr-x 2 mysql mysql 6 Nov 27 14:09 /data/mysql</span><br></pre></td></tr></table></figure></p><p>4、解压缩并且进入目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#tar xf mariadb-10.2.19.tar.gz </span></span><br><span class="line">[root@centos7 ~]<span class="comment">#cd mariadb-10.2.19/</span></span><br><span class="line">[root@centos7 mariadb-10.2.19]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>5、编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mariadb-10.2.19]<span class="comment">#cmake . \</span></span><br><span class="line">&gt; -DCMAKE_INSTALL_PREFIX=/app/mysql \</span><br><span class="line">&gt; -DMYSQL_DATADIR=/data/mysql/ \</span><br><span class="line">&gt; -DSYSCONFDIR=/etc \</span><br><span class="line">&gt; -DMYSQL_USER=mysql \</span><br><span class="line">&gt; -DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">&gt; -DWITH_ARCHIVE_STORAGE_ENGINE=1 \</span><br><span class="line">&gt; -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">&gt; -DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">&gt; -DWITHOUT_MROONGA_STORAGE_ENGINE=1 \</span><br><span class="line">&gt; -DWITH_DEBUG=0 \</span><br><span class="line">&gt; -DWITH_READLINE=1 \</span><br><span class="line">&gt; -DWITH_SSL=system \</span><br><span class="line">&gt; -DWITH_ZLIB=system \</span><br><span class="line">&gt; -DWITH_LIBWRAP=0 \</span><br><span class="line">&gt; -DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">&gt; -DMYSQL_UNIX_ADDR=/data/mysql/mysql.sock \</span><br><span class="line">&gt; -DDEFAULT_CHARSET=utf8 \</span><br><span class="line">&gt; -DDEFAULT_COLLATION=utf8_general_ci</span><br><span class="line">[root@centos7 mariadb-10.2.19]<span class="comment">#make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure></p><p>6、准备环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mariadb-10.2.19]<span class="comment">#echo 'PATH=/app/mysql/bin:$PATH' &gt; /etc/profile.d/mysql.sh</span></span><br><span class="line">[root@centos7 mariadb-10.2.19]<span class="comment">#. /etc/profile.d/mysql.sh</span></span><br></pre></td></tr></table></figure></p><p>7、生成数据库文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mariadb-10.2.19]<span class="comment">#cd /app/mysql/</span></span><br><span class="line">[root@centos7 mysql]<span class="comment">#scripts/mysql_install_db --datadir=/data/mysql/ --user=mysql</span></span><br></pre></td></tr></table></figure></p><p>8、准备配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]<span class="comment">#cp /app/mysql/support-files/my-huge.cnf /etc/my.cnf</span></span><br></pre></td></tr></table></figure></p><p>9、准备启动脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]<span class="comment">#cp /app/mysql/support-files/mysql.server /etc/init.d/mysqld</span></span><br></pre></td></tr></table></figure></p><p>10、启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 mysql]<span class="comment">#chkconfig --add mysqld </span></span><br><span class="line">[root@centos7 mysql]<span class="comment">#service mysqld start</span></span><br></pre></td></tr></table></figure></p><h1 id="Mysql-客户端"><a href="#Mysql-客户端" class="headerlink" title="Mysql 客户端"></a>Mysql 客户端</h1><h2 id="mysql使用模式："><a href="#mysql使用模式：" class="headerlink" title="mysql使用模式："></a>mysql使用模式：</h2><ol><li>交互式模式：<br>可运行命令有两类：<blockquote><p>客户端命令：  </p><blockquote><p>\h, help<br>\u，use<br>\s，status<br>\!，system  </p></blockquote></blockquote></li></ol><blockquote><p>服务器端命令：<br>SQL语句， 需要语句结束符；</p></blockquote><ol start="2"><li><p>脚本模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql –uUSERNAME -pPASSWORD &lt; /path/somefile.sql</span><br><span class="line">mysql&gt; <span class="built_in">source</span> /path/from/somefile.sql</span><br></pre></td></tr></table></figure></li></ol><h2 id="mysql客户端可用选项："><a href="#mysql客户端可用选项：" class="headerlink" title="mysql客户端可用选项："></a>mysql客户端可用选项：</h2><ul><li>-A, –no-auto-rehash 禁止补全  </li><li>-u, –user= 用户名,默认为root  </li><li>-h, –host= 服务器主机,默认为localhost  </li><li>-p, –passowrd= 用户密码,建议使用-p,默认为空密码  </li><li>-P, –port= 服务器端口  </li><li>-S, –socket= 指定连接socket文件路径  </li><li>-D, –database= 指定默认数据库  </li><li>-C, –compress 启用压缩  </li><li>-e “SQL“ 执行SQL命令  </li><li>-V, –version 显示版本  </li><li>-v –verbose 显示详细信息  </li><li>–print-defaults 获取程序默认使用的配置  </li></ul><h2 id="socket地址"><a href="#socket地址" class="headerlink" title="socket地址"></a>socket地址</h2><p>服务器监听的两种socket地址：</p><ol><li><p>ip socket: 监听在tcp的3306端口，支持远程通信</p></li><li><p>unix sock: 监听在sock文件上，仅支持本机通信<br> 如：/var/lib/mysql/mysql.sock)</p><p> <strong>说明：host为localhost,127.0.0.1时自动使用unix sock</strong> </p></li></ol><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><p>运行mysql命令：默认空密码登录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use mysql</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [mysql]&gt; select user();</span><br><span class="line">+----------------+</span><br><span class="line">| user()         |</span><br><span class="line">+----------------+</span><br><span class="line">| root@localhost |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">MariaDB [mysql]&gt; select user,host,password from user;</span><br><span class="line">+------+-----------+-------------------------------------------+</span><br><span class="line">| user | host      | password                                  |</span><br><span class="line">+------+-----------+-------------------------------------------+</span><br><span class="line">| root | localhost | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| root | 127.0.0.1 | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">| root | ::1       | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="line">+------+-----------+-------------------------------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>登录系统：<code>mysql –uroot –p</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password:</span><br></pre></td></tr></table></figure></p><p>客户端命令：本地执行<br><code>mysql&gt; help</code><br>每个命令都完整形式和简写格式<br><code>mysql&gt; status 或 \s</code><br>服务端命令：通过mysql协议发往服务器执行并取回结果<br>​    每个命令末尾都必须使用命令结束符号，默认为分号<br>​    示例：<code>select version();</code>  </p><h1 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h1><p>服务器端(mysqld)：工作特性有多种配置方式  </p><ol><li><p>命令行选项：</p></li><li><p>配置文件：类ini格式</p><p>集中式的配置，能够为mysql的各应用程序提供配置信息<br>[mysqld][mysqld_safe]<br>[mysqld_multi][mysql]<br>[mysqldump][server]<br>[client]<br>格式：parameter = value<br>说明：_和- 相同<br>​    1，ON，TRUE意义相同;</p><p>​    0，OFF，FALSE意义相同  </p></li><li><p>配置文件</p><p>后面覆盖前面的配置文件，顺序如下：  </p><ol><li>/etc/my.cnf     Global选项  </li><li>/etc/mysql/my.cnf       Global选项 </li><li>SYSCONFDIR/my.cnf         Global选项  </li><li>$MYSQL_HOME/my.cnf        Server-specific 选项  </li><li>–defaults-extra-file=path  </li><li>~/.my.cnf          User-specific 选项  </li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;数据库概要&quot;&gt;&lt;a href=&quot;#数据库概要&quot; class=&quot;he
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql数据库的基本操作</title>
    <link href="http://yoursite.com/2018/11/26/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/11/26/Mysql数据库的基本操作/</id>
    <published>2018-11-25T16:00:00.000Z</published>
    <updated>2019-02-11T08:34:20.112Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="数据库对象"><a href="#数据库对象" class="headerlink" title="数据库对象"></a>数据库对象</h1><p>数据库的组件(对象)：<br>&ensp;&ensp;&ensp;&ensp;数据库、表、索引、视图、用户、存储过程、函数、触发器、事件调度器等<br>命名规则：</p><ul><li>必须以字母开头</li><li>可包括数字和三个特殊字符（# _ $）</li><li>不要使用MySQL的保留字</li><li>同一database(Schema)下的对象不能同名</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="MySql支持多种列类型"><a href="#MySql支持多种列类型" class="headerlink" title="MySql支持多种列类型"></a>MySql支持多种列类型</h2><ol><li>数值类型  </li><li>日期/时间类型  </li><li>字符串(字符)类型  </li></ol><h2 id="选择正确的数据类型对于获得高性能至关重要，三大原则："><a href="#选择正确的数据类型对于获得高性能至关重要，三大原则：" class="headerlink" title="选择正确的数据类型对于获得高性能至关重要，三大原则："></a>选择正确的数据类型对于获得高性能至关重要，三大原则：</h2><ol><li>更小的通常更好，尽量使用可正确存储数据的最小数据类型   </li><li>简单就好，简单数据类型的操作通常需要更少的CPU周期  </li><li>尽量避免NULL，包含为NULL的列，对MySQL更难优化</li></ol><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:left">字节</th><th>范围</th></tr></thead><tbody><tr><td style="text-align:center">inyint(m)</td><td style="text-align:left">1个字节</td><td>(-128~127)</td></tr><tr><td style="text-align:center">smallint(m)</td><td style="text-align:left">2个字节</td><td>(-32768~32767)</td></tr><tr><td style="text-align:center">mediumint(m)</td><td style="text-align:left">3个字节</td><td>(-8388608~8388607)</td></tr><tr><td style="text-align:center">int(m)</td><td style="text-align:left">4个字节</td><td>(-2147483648~2147483647)</td></tr><tr><td style="text-align:center">bigint(m)</td><td style="text-align:left">8个字节</td><td>(+-9.22*10的18次方)</td></tr></tbody></table><p>&ensp;&ensp;&ensp;&ensp;加了unsigned，则最大值翻倍，如：tinyint unsigned的取值范围为(0~255)int(m)里的m是表示SELECT查询结果集中的显示宽度，并不影响实际的取值范围，</p><h2 id="浮点型-float和double-，近似值"><a href="#浮点型-float和double-，近似值" class="headerlink" title="浮点型(float和double)，近似值"></a>浮点型(float和double)，近似值</h2><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center"></th><th>范围</th></tr></thead><tbody><tr><td style="text-align:center">float(m,d)</td><td style="text-align:center">单精度浮点型</td><td>8位精度(4字节) m总个数，d小数位</td></tr><tr><td style="text-align:center">double(m,d)</td><td style="text-align:center">双精度浮点型</td><td>16位精度(8字节) m总个数，d小数位</td></tr></tbody></table><p>​    设一个字段定义为float(6,3)，如果插入一个数123.45678,实际数据库里存的是123.457，但总个数还以实际为准，即6位</p><h2 id="定点数"><a href="#定点数" class="headerlink" title="定点数"></a>定点数</h2><ol><li>在数据库中存放的是精确值,存为十进制</li><li>decimal(m,d) 参数m&lt;65 是总个数，d&lt;30且 d&lt;m 是小数位</li><li>MySQL5.0和更高版本将数字打包保存到一个二进制字符串中（每4个字节存9个数字）。例如，decimal(18,9)小数点两边将各存储9个数字，一共使用9个字节：小数点前的数字用4个字节，小数点后的数字用4个字节，小数点本身占1个字节</li><li>浮点类型在存储同样范围的值时，通常比decimal使用更少的空间。 float使用4个字节存储。 double占用8个字节</li><li>因为需要额外的空间和计算开销，所以应该尽量只在对小数进行精确计算时才使用decimal——例如存储财务数据。但在数据量比较大的时候，可以考虑使用bigint代替decimal </li></ol><h2 id="字符串-char-varchar-text"><a href="#字符串-char-varchar-text" class="headerlink" title="字符串(char,varchar,_text)"></a>字符串(char,varchar,_text)</h2><table><thead><tr><th>类别</th><th></th><th>范围</th></tr></thead><tbody><tr><td>char(n)</td><td>固定长度</td><td>最多255个字符</td></tr><tr><td>varchar(n)</td><td>可变长度</td><td>最多65535个字符</td></tr><tr><td>tinytext</td><td>可变长度</td><td>最多255个字符</td></tr><tr><td>text</td><td>可变长度</td><td>最多65535个字符</td></tr><tr><td>mediumtext</td><td>可变长度</td><td>最多2的24次方-1个字符</td></tr><tr><td>longtext</td><td>可变长度</td><td>最多2的32次方-1个字符</td></tr><tr><td>BINARY(M)</td><td>固定长度</td><td>可存二进制或字符，长度为0-M字节</td></tr><tr><td>VARBINARY(M</td><td>可变长度</td><td>可存二进制或字符，允许长度为0-M字节</td></tr></tbody></table><p>char和varchar的区别：  </p><ol><li>char(n) 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉，所以char类型存储的字符串末尾不能有空格，varchar不限于此  </li><li>char(n) 固定长度，char(4)不管是存入几个字符，都将占用4个字节，varchar是存入的实际字符数+1个字节（n&lt; n&gt;255)，所以varchar(4),存入3个字符将占用4个字节  </li><li>char类型的字符串检索速度要比varchar类型的快  </li></ol><p>varchar和text的区别： </p><ol><li>varchar可指定n，text不能指定，内部存储varchar是存入的实际字符数+1个字节（n&lt; n&gt;255)，text是实际字符数+2个字节。  </li><li>text类型不能有默认值  </li><li>varchar可直接创建索引，text创建索引要指定前多少个字符。 varchar查询速度快于text  </li></ol><h2 id="二进制数据：BLOB"><a href="#二进制数据：BLOB" class="headerlink" title="二进制数据：BLOB"></a>二进制数据：BLOB</h2><ol><li>BLOB和text存储方式不同，TEXT以文本方式存储，英文存储区分大小写，而Blob是以二进制方式存储，不分大小写</li><li>BLOB存储的数据只能整体读出</li><li>TEXT可以指定字符集，BLOB不用指定字符集</li></ol><h3 id="日期时间类型"><a href="#日期时间类型" class="headerlink" title="日期时间类型"></a>日期时间类型</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left">范围</th></tr></thead><tbody><tr><td style="text-align:center">date</td><td style="text-align:left">日期 ‘2008-12-2’</td></tr><tr><td style="text-align:center">time</td><td style="text-align:left">时间 ‘12:25:36’</td></tr><tr><td style="text-align:center">datetime</td><td style="text-align:left">日期时间 ‘2008-12-2 22:06:44’</td></tr><tr><td style="text-align:center">timestamp</td><td style="text-align:left">自动存储记录修改时间</td></tr></tbody></table><p>&ensp;&ensp;&ensp;&ensp;timestamp字段里的时间数据会随其他字段修改的时候自动刷新，这个数据类型的字段可以存放这条记录最后被修改的时间</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:center">NULL</td><td style="text-align:left">数据列可包含NULL值</td></tr><tr><td style="text-align:center">NOT NULL</td><td style="text-align:left">数据列不允许包含NULL值</td></tr><tr><td style="text-align:center">DEFAULT</td><td style="text-align:left">默认值</td></tr><tr><td style="text-align:center">PRIMARY</td><td style="text-align:left">KEY 主键</td></tr><tr><td style="text-align:center">UNIQUE KEY</td><td style="text-align:left">唯一键</td></tr><tr><td style="text-align:center">CHARACTER SET name</td><td style="text-align:left">指定一个字符集</td></tr><tr><td style="text-align:center">AUTO_INCREMENT</td><td style="text-align:left">自动递增，适用于整数类型</td></tr><tr><td style="text-align:center">UNSIGNED</td><td style="text-align:left">无符号</td></tr></tbody></table><h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><h2 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h2><ol><li><p>DDL: Data Defination Language 数据定义语言  </p><p>​    CREATE，DROP，ALTER  </p></li><li><p>DML: Data Manipulation Language 数据操纵语言  </p><p>​    INSERT，DELETE，UPDATE  </p></li><li><p>DCL：Data Control Language 数据控制语言  </p><p>​    GRANT，REVOKE，COMMIT，ROLLBACK  </p></li><li><p>DQL：Data Query Language 数据查询语言  </p><p>​    SELECT</p></li></ol><h2 id="SQL语句构成"><a href="#SQL语句构成" class="headerlink" title="SQL语句构成"></a>SQL语句构成</h2><h3 id="SQL语句构成："><a href="#SQL语句构成：" class="headerlink" title="SQL语句构成："></a>SQL语句构成：</h3><p>​    Keyword组成clause<br>​    多条clause组成语句</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><ol><li>SELECT *    SELECT字句</li><li>FROM products    FROM字句</li><li>WHERE price &gt; 400    WHERE字句</li></ol><p>说明：一组SQL语句，由三个子句构成，SELECT,FROM和WHERE是关键字</p><h2 id="DDL语句-CREATE，DROP，ALTER"><a href="#DDL语句-CREATE，DROP，ALTER" class="headerlink" title="DDL语句(CREATE，DROP，ALTER)"></a>DDL语句(CREATE，DROP，ALTER)</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>1、创建数据库：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE|SCHEMA [IF NOT EXISTS] <span class="string">'DB_NAME'</span>;</span><br></pre></td></tr></table></figure><p>  例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; create database mariadb;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mariadb            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>2、删除数据库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE|SCHEMA [IF EXISTS] <span class="string">'DB_NAME'</span>;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; drop database mariadb;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>3、查看支持所有字符集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show character <span class="built_in">set</span>;</span><br></pre></td></tr></table></figure><p>4、查看支持所有排序规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collation;</span><br></pre></td></tr></table></figure><p>5、获取命令使用帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HELP KEYWORD;</span><br></pre></td></tr></table></figure><p>6、查看数据库列表：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>1、创建表  (create table)  </p><p>1.1、直接创建</p><p>1.2、通过查询现存表创建；新表会被直接插入查询而来的数据  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name [(create_definition,...)][table_options] [partition_options] select_statement</span><br></pre></td></tr></table></figure><p>1.3、通过复制现存的表的表结构创建，但不复制数据  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name &#123; LIKE old_tbl_name | (LIKE old_tbl_name) &#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>Storage Engine是指表类型，也即在表创建时指明其使用的存储引擎，同一库中不同表可以使用不同的存储引擎 </li><li>同一个库中表建议要使用同一种存储引擎类型</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] <span class="string">'tbl_name'</span> (col1 type1 修饰符, col2 type2 修饰符, ...)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [testdb]&gt; create table student (id tinyint unsigned auto_increment primary key,name varchar(10) not null,sex enum(<span class="string">'f'</span>,<span class="string">'m'</span>) default <span class="string">'m'</span>,age tinyint unsigned,phone char(11),address char(50));</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>2、获取帮助：<code>mysql&gt; HELP CREATE TABLE;</code></p><p>3、查看所有的引擎：<code>show engines;</code></p><p>4、查看表：<code>show tables [from db_name]</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show tables from testdb;</span><br><span class="line">+------------------+</span><br><span class="line">| Tables_in_testdb |</span><br><span class="line">+------------------+</span><br><span class="line">| student          |</span><br><span class="line">+------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>5、查看表结构：</p><p>5.1、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc [db_name.]tb_name</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [testdb]&gt; desc student;</span><br><span class="line">+---------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| Field   | Type                | Null | Key | Default | Extra          |</span><br><span class="line">+---------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| id      | tinyint(3) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name    | varchar(10)         | NO   |     | NULL    |                |</span><br><span class="line">| sex     | enum(<span class="string">'f'</span>,<span class="string">'m'</span>)       | YES  |     | m       |                |</span><br><span class="line">| age     | tinyint(3) unsigned | YES  |     | NULL    |                |</span><br><span class="line">| phone   | char(11)            | YES  |     | NULL    |                |</span><br><span class="line">| address | char(50)            | YES  |     | NULL    |                |</span><br><span class="line">+---------+---------------------+------+-----+---------+----------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>5.2、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show columns from [db_name.]tb_name</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [testdb]&gt; show columns from students;</span><br><span class="line">+---------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| Field   | Type                | Null | Key | Default | Extra          |</span><br><span class="line">+---------+---------------------+------+-----+---------+----------------+</span><br><span class="line">| id      | tinyint(3) unsigned | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name    | varchar(10)         | NO   |     | NULL    |                |</span><br><span class="line">| sex     | enum(<span class="string">'f'</span>,<span class="string">'m'</span>)       | YES  |     | m       |                |</span><br><span class="line">| age     | tinyint(3) unsigned | YES  |     | NULL    |                |</span><br><span class="line">| phone   | char(11)            | YES  |     | NULL    |                |</span><br><span class="line">| address | char(50)            | YES  |     | NULL    |                |</span><br><span class="line">+---------+---------------------+------+-----+---------+----------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>6、删除表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table tb_name;</span><br></pre></td></tr></table></figure><p>7、查看表创建命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table tbl_name;</span><br></pre></td></tr></table></figure><p>8、查看表状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show table status like <span class="string">'tbl_name'</span>;</span><br></pre></td></tr></table></figure><p>9、查看库中所有表状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show table status from db_name;</span><br></pre></td></tr></table></figure><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE <span class="string">'tbl_name'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>字段：  </p><blockquote><p>添加字段：add  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;ADD col1 data_type [FIRST|AFTER col_name]</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote><blockquote><blockquote><p>删除字段：drop<br>修改字段：  </p><blockquote><p>alter（默认值）, change（字段名）, modify（字段属性）</p></blockquote></blockquote></blockquote><blockquote><p>索引:  </p><blockquote><p>添加索引：add index<br>删除索引：drop index  </p></blockquote></blockquote><blockquote><p>表选项  </p><blockquote><p>修改:</p></blockquote></blockquote><p>查看表上的索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show indexes from [db_name.]tbl_name;</span><br></pre></td></tr></table></figure><p>查看帮助：Help alter table  </p><h2 id="DML语句-insert、delete、update"><a href="#DML语句-insert、delete、update" class="headerlink" title="DML语句(insert、delete、update)"></a>DML语句(insert、delete、update)</h2><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>&ensp;&ensp;&ensp;&ensp;一次插入一行或多行数据<br>语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">insert [LOW_PRIORITY | DELAYED | HIGH_PRIORITY][IGNORE] [INTO] tbl_name [(col_name,...)]</span><br><span class="line">&#123;VALUES | VALUE&#125; (&#123;expr | DEFAULT&#125;,...),(...),...</span><br><span class="line">[ ON DUPLICATE KEY UPDATE 如果重复更新之</span><br><span class="line">col_name=expr</span><br><span class="line">[, col_name=expr] ... ]</span><br></pre></td></tr></table></figure><p>简化写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert tbl_name [(col1,...)] VALUES (val1,...), (val21,...)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [testdb]&gt; insert into student (name,age,phone,address) values(<span class="string">'mage'</span>,30,10086,<span class="string">'beijing'</span>); </span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">MariaDB [testdb]&gt; select * from student;</span><br><span class="line">+----+------+------+------+-------+---------+</span><br><span class="line">| id | name | sex  | age  | phone | address |</span><br><span class="line">+----+------+------+------+-------+---------+</span><br><span class="line">|  1 | mage | m    |   30 | 10086 | beijing |</span><br><span class="line">+----+------+------+------+-------+---------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE [LOW_PRIORITY][IGNORE] table_reference</span><br><span class="line">SET col_name1=&#123;expr1|DEFAULT&#125; [, col_name2=&#123;expr2|DEFAULT&#125;] ...</span><br><span class="line">[WHERE where_condition][ORDER BY ...]</span><br><span class="line">[LIMIT row_count]</span><br></pre></td></tr></table></figure><p>注意：一定要有限制条件，否则将修改所有行的指定字段<br>​    限制条件：</p><p>​        WHERE</p><p>​        LIMIT</p><p><strong>Mysql 选项：-U|–safe-updates| –i-am-a-dummy</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [testdb]&gt; select * from student; </span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">| id | name     | sex  | age  | phone | address   |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">|  1 | mage     | m    |   30 | 10086 | beijing   |</span><br><span class="line">|  2 | zhangsir | m    |   28 | 10010 | zhengzhou |</span><br><span class="line">|  3 | ??       | m    |   20 | NULL  | zhuojun   |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [testdb]&gt; update student <span class="built_in">set</span> name =<span class="string">'zhang'</span> <span class="built_in">where</span> id=3;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">MariaDB [testdb]&gt; select * from student;                      </span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">| id | name     | sex  | age  | phone | address   |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">|  1 | mage     | m    |   30 | 10086 | beijing   |</span><br><span class="line">|  2 | zhangsir | m    |   28 | 10010 | zhengzhou |</span><br><span class="line">|  3 | zhang    | m    |   20 | NULL  | zhuojun   |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE [LOW_PRIORITY][QUICK] [IGNORE] FROM tbl_name</span><br><span class="line">[WHERE where_condition][ORDER BY ...]</span><br><span class="line">[LIMIT row_count]</span><br></pre></td></tr></table></figure><p>​    可先排序再指定删除的行数<br><strong>注意：一定要有限制条件，否则将清空表中的所有数据</strong></p><p>​    限制条件：</p><p>​        WHERE</p><p>​        LIMIT</p><p>truncate table tbl_name; 清空表   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [testdb]&gt; select * from student;</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">| id | name     | sex  | age  | phone | address   |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">|  1 | mage     | m    |   30 | 10086 | beijing   |</span><br><span class="line">|  2 | zhangsir | m    |   28 | 10010 | zhengzhou |</span><br><span class="line">|  3 | ??       | m    |   28 | NULL  | ??        |</span><br><span class="line">|  4 | ??       | m    |   19 | NULL  | ??        |</span><br><span class="line">|  5 | ??       | m    |   22 | NULL  | ??        |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [testdb]&gt; delete from student <span class="built_in">where</span> id&gt;=3;</span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [testdb]&gt; select * from student;</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">| id | name     | sex  | age  | phone | address   |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">|  1 | mage     | m    |   30 | 10086 | beijing   |</span><br><span class="line">|  2 | zhangsir | m    |   28 | 10010 | zhengzhou |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="DQL语句"><a href="#DQL语句" class="headerlink" title="DQL语句"></a>DQL语句</h2><h3 id="select单表查询"><a href="#select单表查询" class="headerlink" title="select单表查询"></a>select单表查询</h3><p>1、字段显示可以使用别名：</p><p>​    col1 AS alias1, col2 AS alias2, …  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [testdb]&gt; select * from student;                      </span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">| id | name     | sex  | age  | phone | address   |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">|  1 | mage     | m    |   30 | 10086 | beijing   |</span><br><span class="line">|  2 | zhangsir | m    |   28 | 10010 | zhengzhou |</span><br><span class="line">|  3 | zhang    | m    |   20 | NULL  | zhuojun   |</span><br><span class="line">|  4 | huang    | f    |   18 | NULL  | shenzhen  |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">MariaDB [testdb]&gt; select name as 姓名, age 年龄 from student;</span><br><span class="line">+----------+--------+</span><br><span class="line">| 姓名     | 年龄   |</span><br><span class="line">+----------+--------+</span><br><span class="line">| mage     |     30 |</span><br><span class="line">| zhangsir |     28 |</span><br><span class="line">| zhang    |     20 |</span><br><span class="line">| huang    |     18 |</span><br><span class="line">+----------+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>2、WHERE子句：指明过滤条件以实现“选择”的功能：</p><p>过滤条件： </p><p>​    2.1、布尔型表达式</p><p>​    2.2、算术操作符：+, -, *, /, %  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; select 2+3;</span><br><span class="line">+-----+</span><br><span class="line">| 2+3 |</span><br><span class="line">+-----+</span><br><span class="line">|   5 |</span><br><span class="line">+-----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>​    2.3、比较操作符：</p><ul><li>=,&lt;=&gt;（相等或都为空）, &lt;&gt;, !=(非标准SQL), &gt;, &gt;=, &lt;, &lt;= </li><li>BETWEEN min_num AND max_num</li><li>IN (element1, element2, …)</li><li>IS NULL</li><li>IS NOT NULL</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [testdb]&gt; select * from student <span class="built_in">where</span> age&gt;25; </span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">| id | name     | sex  | age  | phone | address   |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">|  1 | mage     | m    |   30 | 10086 | beijing   |</span><br><span class="line">|  2 | zhangsir | m    |   28 | 10010 | zhengzhou |</span><br><span class="line">+----+----------+------+------+-------+-----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>3、DISTINCT 去除重复列  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [testdb]&gt; select distinct sex from student;</span><br><span class="line">+------+</span><br><span class="line">| sex  |</span><br><span class="line">+------+</span><br><span class="line">| m    |</span><br><span class="line">| f    |</span><br><span class="line">+------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>4、LIKE:</p><ul><li>% 任意长度的任意字符</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; select * from students <span class="built_in">where</span> name like <span class="string">'xu%'</span>;  </span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+</span><br><span class="line">| StuID | Name        | Age | Gender | ClassID | TeacherID |</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+</span><br><span class="line">|    16 | Xu Zhu      |  21 | M      |       1 |      NULL |</span><br><span class="line">|    19 | Xue Baochai |  18 | F      |       6 |      NULL |</span><br><span class="line">|    24 | Xu Xian     |  27 | M      |    NULL |      NULL |</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.03 sec)</span><br></pre></td></tr></table></figure><ul><li>_ 任意单个字符</li></ul><p>5、RLIKE：正则表达式，索引失效，不建议使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; select * from students <span class="built_in">where</span> name rlike <span class="string">'^xu'</span>;</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+</span><br><span class="line">| StuID | Name        | Age | Gender | ClassID | TeacherID |</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+</span><br><span class="line">|    16 | Xu Zhu      |  21 | M      |       1 |      NULL |</span><br><span class="line">|    19 | Xue Baochai |  18 | F      |       6 |      NULL |</span><br><span class="line">|    24 | Xu Xian     |  27 | M      |    NULL |      NULL |</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>6、REGEXP：匹配字符串可用正则表达式书写模式，同上  </p><p>7、逻辑操作符：</p><ul><li>NOT</li><li>AND</li><li>OR</li><li>XOR  </li></ul><p>8、GROUP：根据指定的条件把查询结果进行“分组”以用于做“聚合”运算</p><p>8.1、avg(), max(), min(), count(), sum()  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; select classid 组名,avg(age)平均年龄 from students group by classid;</span><br><span class="line">+--------+--------------+</span><br><span class="line">| 组名   | 平均年龄     |</span><br><span class="line">+--------+--------------+</span><br><span class="line">|   NULL |      63.5000 |</span><br><span class="line">|      1 |      20.5000 |</span><br><span class="line">|      2 |      36.0000 |</span><br><span class="line">|      3 |      20.2500 |</span><br><span class="line">|      4 |      24.7500 |</span><br><span class="line">|      5 |      46.0000 |</span><br><span class="line">|      6 |      20.7500 |</span><br><span class="line">|      7 |      19.6667 |</span><br><span class="line">+--------+--------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>8.2、having: 对分组聚合运算后的结果指定过滤条件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; select classid 组名,avg(age)平均年龄 from students group by classid having avg(age)&gt;30;</span><br><span class="line">+--------+--------------+</span><br><span class="line">| 组名   | 平均年龄       |</span><br><span class="line">+--------+--------------+</span><br><span class="line">|   NULL |      63.5000 |</span><br><span class="line">|      2 |      36.0000 |</span><br><span class="line">|      5 |      46.0000 |</span><br><span class="line">+--------+--------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; select classid 组名,age 年龄 from students <span class="built_in">where</span> age&gt;20 group by classid;      <span class="comment">#先执行过滤条件再进行分组</span></span><br><span class="line">+--------+--------+</span><br><span class="line">| 组名    | 年龄   |</span><br><span class="line">+--------+--------+</span><br><span class="line">|   NULL |     27 |</span><br><span class="line">|      1 |     22 |</span><br><span class="line">|      2 |     22 |</span><br><span class="line">|      3 |     26 |</span><br><span class="line">|      4 |     32 |</span><br><span class="line">|      5 |     46 |</span><br><span class="line">|      6 |     23 |</span><br><span class="line">|      7 |     23 |</span><br><span class="line">+--------+--------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; select classid 组名,age 年龄 from students group by classid having age&gt;20;<span class="comment">#先进行分组再执行过滤条件</span></span><br><span class="line">+--------+--------+</span><br><span class="line">| 组名    | 年龄   |</span><br><span class="line">+--------+--------+</span><br><span class="line">|   NULL |     27 |</span><br><span class="line">|      1 |     22 |</span><br><span class="line">|      2 |     22 |</span><br><span class="line">|      3 |     26 |</span><br><span class="line">|      4 |     32 |</span><br><span class="line">|      5 |     46 |</span><br><span class="line">+--------+--------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>9、ORDER BY: 根据指定的字段对查询结果进行排序</p><ul><li>升序：ASC</li><li>降序：DESC</li></ul><p>10、LIMIT [[offset,]row_count]：对查询的结果进行输出行数数量限制 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; select * from students order by age desc <span class="built_in">limit</span> 10;      </span><br><span class="line">+-------+--------------+-----+--------+---------+-----------+</span><br><span class="line">| StuID | Name         | Age | Gender | ClassID | TeacherID |</span><br><span class="line">+-------+--------------+-----+--------+---------+-----------+</span><br><span class="line">|    25 | Sun Dasheng  | 100 | M      |    NULL |      NULL |</span><br><span class="line">|     3 | Xie Yanke    |  53 | M      |       2 |        16 |</span><br><span class="line">|     6 | Shi Qing     |  46 | M      |       5 |      NULL |</span><br><span class="line">|    13 | Tian Boguang |  33 | M      |       2 |      NULL |</span><br><span class="line">|     4 | Ding Dian    |  32 | M      |       4 |         4 |</span><br><span class="line">|    24 | Xu Xian      |  27 | M      |    NULL |      NULL |</span><br><span class="line">|     5 | Yu Yutong    |  26 | M      |       3 |         1 |</span><br><span class="line">|    17 | Lin Chong    |  25 | M      |       4 |      NULL |</span><br><span class="line">|    23 | Ma Chao      |  23 | M      |       4 |      NULL |</span><br><span class="line">|    18 | Hua Rong     |  23 | M      |       7 |      NULL |</span><br><span class="line">+-------+--------------+-----+--------+---------+-----------+</span><br><span class="line">10 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="select多表查询"><a href="#select多表查询" class="headerlink" title="select多表查询"></a>select多表查询</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">准备两张表</span><br><span class="line">MariaDB [hellodb]&gt; select * from students;                      </span><br><span class="line">+-------+---------------+-----+--------+---------+-----------+</span><br><span class="line">| StuID | Name          | Age | Gender | ClassID | TeacherID |</span><br><span class="line">+-------+---------------+-----+--------+---------+-----------+</span><br><span class="line">|     1 | Shi Zhongyu   |  22 | M      |       2 |         3 |</span><br><span class="line">|     2 | Shi Potian    |  22 | M      |       1 |         7 |</span><br><span class="line">|     3 | Xie Yanke     |  53 | M      |       2 |        16 |</span><br><span class="line">|     4 | Ding Dian     |  32 | M      |       4 |         4 |</span><br><span class="line">|     5 | Yu Yutong     |  26 | M      |       3 |         1 |</span><br><span class="line">|     6 | Shi Qing      |  46 | M      |       5 |      NULL |</span><br><span class="line">|     7 | Xi Ren        |  19 | F      |       3 |      NULL |</span><br><span class="line">|     8 | Lin Daiyu     |  17 | F      |       7 |      NULL |</span><br><span class="line">|     9 | Ren Yingying  |  20 | F      |       6 |      NULL |</span><br><span class="line">|    10 | Yue Lingshan  |  19 | F      |       3 |      NULL |</span><br><span class="line">|    11 | Yuan Chengzhi |  23 | M      |       6 |      NULL |</span><br><span class="line">|    12 | Wen Qingqing  |  19 | F      |       1 |      NULL |</span><br><span class="line">|    13 | Tian Boguang  |  33 | M      |       2 |      NULL |</span><br><span class="line">|    14 | Lu Wushuang   |  17 | F      |       3 |      NULL |</span><br><span class="line">|    15 | Duan Yu       |  19 | M      |       4 |      NULL |</span><br><span class="line">|    16 | Xu Zhu        |  21 | M      |       1 |      NULL |</span><br><span class="line">|    17 | Lin Chong     |  25 | M      |       4 |      NULL |</span><br><span class="line">|    18 | Hua Rong      |  23 | M      |       7 |      NULL |</span><br><span class="line">|    19 | Xue Baochai   |  18 | F      |       6 |      NULL |</span><br><span class="line">|    20 | Diao Chan     |  19 | F      |       7 |      NULL |</span><br><span class="line">|    21 | Huang Yueying |  22 | F      |       6 |      NULL |</span><br><span class="line">|    22 | Xiao Qiao     |  20 | F      |       1 |      NULL |</span><br><span class="line">|    23 | Ma Chao       |  23 | M      |       4 |      NULL |</span><br><span class="line">|    24 | Xu Xian       |  27 | M      |    NULL |      NULL |</span><br><span class="line">|    25 | Sun Dasheng   | 100 | M      |    NULL |      NULL |</span><br><span class="line">+-------+---------------+-----+--------+---------+-----------+</span><br><span class="line">25 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; select * from teachers;</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">| TID | Name          | Age | Gender |</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">|   1 | Song Jiang    |  45 | M      |</span><br><span class="line">|   2 | Zhang Sanfeng |  94 | M      |</span><br><span class="line">|   3 | Miejue Shitai |  77 | F      |</span><br><span class="line">|   4 | Lin Chaoying  |  93 | F      |</span><br><span class="line">+-----+---------------+-----+--------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>1、交叉连接：笛卡尔乘积</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students cross join teachers;</span><br></pre></td></tr></table></figure><p>2、内连接：</p><ul><li>等值连接：让表之间的字段以“等值”建立连接关系；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; select * from students,teachers <span class="built_in">where</span> students.teacherid=teachers.tid;</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+-----+---------------+-----+--------+</span><br><span class="line">| StuID | Name        | Age | Gender | ClassID | TeacherID | TID | Name          | Age | Gender |</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+-----+---------------+-----+--------+</span><br><span class="line">|     5 | Yu Yutong   |  26 | M      |       3 |         1 |   1 | Song Jiang    |  45 | M      |</span><br><span class="line">|     1 | Shi Zhongyu |  22 | M      |       2 |         3 |   3 | Miejue Shitai |  77 | F      |</span><br><span class="line">|     4 | Ding Dian   |  32 | M      |       4 |         4 |   4 | Lin Chaoying  |  93 | F      |</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+-----+---------------+-----+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">MariaDB [hellodb]&gt; select * from students inner join teachers on students.teacherid=teachers.tid;</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+-----+---------------+-----+--------+</span><br><span class="line">| StuID | Name        | Age | Gender | ClassID | TeacherID | TID | Name          | Age | Gender |</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+-----+---------------+-----+--------+</span><br><span class="line">|     5 | Yu Yutong   |  26 | M      |       3 |         1 |   1 | Song Jiang    |  45 | M      |</span><br><span class="line">|     1 | Shi Zhongyu |  22 | M      |       2 |         3 |   3 | Miejue Shitai |  77 | F      |</span><br><span class="line">|     4 | Ding Dian   |  32 | M      |       4 |         4 |   4 | Lin Chaoying  |  93 | F      |</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+-----+---------------+-----+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; select * from students as s inner join teachers as t on s.teacherid=t.tid;</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+-----+---------------+-----+--------+</span><br><span class="line">| StuID | Name        | Age | Gender | ClassID | TeacherID | TID | Name          | Age | Gender |</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+-----+---------------+-----+--------+</span><br><span class="line">|     5 | Yu Yutong   |  26 | M      |       3 |         1 |   1 | Song Jiang    |  45 | M      |</span><br><span class="line">|     1 | Shi Zhongyu |  22 | M      |       2 |         3 |   3 | Miejue Shitai |  77 | F      |</span><br><span class="line">|     4 | Ding Dian   |  32 | M      |       4 |         4 |   4 | Lin Chaoying  |  93 | F      |</span><br><span class="line">+-------+-------------+-----+--------+---------+-----------+-----+---------------+-----+--------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [hellodb]&gt; select * from students as s inner join teachers as t on students.teacherid=teachers.tid;</span><br><span class="line">ERROR 1054 (42S22): Unknown column <span class="string">'students.teacherid'</span> <span class="keyword">in</span> <span class="string">'on clause'</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果我们把表取了别名就一定要用它，否则会报错</strong></p><ul><li>不等值连接</li><li>自然连接:去掉重复列的等值连接</li><li>自连接</li></ul><p>3、外连接：</p><ul><li>左外连接：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students as s left outer join teachers as t on s.teacherid=t.tid;</span><br></pre></td></tr></table></figure><ul><li>右外连接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from students as s right outer join teachers as t on s.teacherid=t.tid;</span><br></pre></td></tr></table></figure><p>4、子查询：在查询语句嵌套着查询语句，性能较差</p><p>​    基于某语句的查询结果再次进行的查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; select name as 姓名 from students <span class="built_in">where</span> age &gt; (select avg(age) from students);<span class="comment">#显示其年龄大于平均年龄的同学的名字</span></span><br><span class="line">+--------------+</span><br><span class="line">| 姓名         |</span><br><span class="line">+--------------+</span><br><span class="line">| Xie Yanke    |</span><br><span class="line">| Ding Dian    |</span><br><span class="line">| Shi Qing     |</span><br><span class="line">| Tian Boguang |</span><br><span class="line">| Sun Dasheng  |</span><br><span class="line">+--------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>5、用在WHERE子句中的子查询</p><ul><li>用于比较表达式中的子查询；子查询仅能返回单个值</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Name,Age FROM students WHERE Age&gt;(SELECT avg(Age) FROM students);</span><br></pre></td></tr></table></figure><ul><li>用于IN中的子查询：子查询应该单键查询并返回一个或多个值从构成列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Name,Age FROM students WHERE Age IN (SELECT Age FROM teachers);</span><br></pre></td></tr></table></figure><ul><li>用于EXISTS多表查询</li></ul><p>6、用于FROM子句中的子查询</p><p>使用格式：SELECT tb_alias.col1,… FROM (SELECT clause) AS tb_alias WHERE Clause;</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT s.aage,s.ClassID FROM (SELECT avg(Age) AS aage,ClassID FROM students WHERE ClassID IS NOT NULL GROUP BY ClassID) AS s WHERE s.aage&gt;30;</span><br></pre></td></tr></table></figure><p>7、联合查询：UNION</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [hellodb]&gt; SELECT Name,Age FROM students UNION SELECT Name,Age FROM teachers;  </span><br><span class="line">+---------------+-----+</span><br><span class="line">| Name          | Age |</span><br><span class="line">+---------------+-----+</span><br><span class="line">| Shi Zhongyu   |  22 |</span><br><span class="line">| Shi Potian    |  22 |</span><br><span class="line">| Xie Yanke     |  53 |</span><br><span class="line">| Ding Dian     |  32 |</span><br><span class="line">| Yu Yutong     |  26 |</span><br><span class="line">| Shi Qing      |  46 |</span><br><span class="line">| Xi Ren        |  19 |</span><br><span class="line">| Lin Daiyu     |  17 |</span><br><span class="line">| Ren Yingying  |  20 |</span><br><span class="line">| Yue Lingshan  |  19 |</span><br><span class="line">| Yuan Chengzhi |  23 |</span><br><span class="line">| Wen Qingqing  |  19 |</span><br><span class="line">| Tian Boguang  |  33 |</span><br><span class="line">| Lu Wushuang   |  17 |</span><br><span class="line">| Duan Yu       |  19 |</span><br><span class="line">| Xu Zhu        |  21 |</span><br><span class="line">| Lin Chong     |  25 |</span><br><span class="line">| Hua Rong      |  23 |</span><br><span class="line">| Xue Baochai   |  18 |</span><br><span class="line">| Diao Chan     |  19 |</span><br><span class="line">| Huang Yueying |  22 |</span><br><span class="line">| Xiao Qiao     |  20 |</span><br><span class="line">| Ma Chao       |  23 |</span><br><span class="line">| Xu Xian       |  27 |</span><br><span class="line">| Sun Dasheng   | 100 |</span><br><span class="line">| Song Jiang    |  45 |</span><br><span class="line">| Zhang Sanfeng |  94 |</span><br><span class="line">| Miejue Shitai |  77 |</span><br><span class="line">| Lin Chaoying  |  93 |</span><br><span class="line">+---------------+-----+</span><br><span class="line">29 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;数据库对象&quot;&gt;&lt;a href=&quot;#数据库对象&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/categories/Mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>DNCP服务</title>
    <link href="http://yoursite.com/2018/11/19/DHCP%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/11/19/DHCP服务/</id>
    <published>2018-11-18T16:00:00.000Z</published>
    <updated>2019-01-26T03:05:31.192Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>&ensp;&ensp;&ensp;&ensp;DHCP前身是BOOTP，在Linux的网卡配置中也能看到显示的BOOTP，DHCP引进一个bootp没有的概念：租约。bootp分配的地址是永久的，而dhcp分配的地址是可以有期限的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#grep -i bootproto /etc/sysconfig/network-scripts/ifcfg-eth0 </span></span><br><span class="line">    BOOTPROTO=dhcp</span><br></pre></td></tr></table></figure></p><p>DHCP可以自动分配IP、子网掩码、网关、DNS。</p><p>DHCP客户端使用的端口68，服务端使用端口67，使用的UDP应用层的协议。</p><p>&ensp;&ensp;&ensp;&ensp;DHCP一般不为服务器分配IP，因为他们要使用固定IP，所以DHCP一般只为办公环境的主机分配IP。服务器一旦开机则自动分配IP，并有一定的租期，租期到了则收回，IP可以续租，续租失败则收回并重新分配，如果服务器关闭则收回IP，先到先得的原则，哪台主机先申请就优先分配，并且基于广播机制(DHCP服务器和客户端需要在一个局域网).但DHCP也可以为其他网段内主机分配IP，只要连接两个网段中间的路由器能转发DHCP配置请求即可，但这要求路由器配置中继功能。</p><h2 id="续租"><a href="#续租" class="headerlink" title="续租"></a>续租</h2><p>&ensp;&ensp;&ensp;&ensp;50%：租赁时间达到50%时来续租，刚向DHCP服务器发向新的DHCPREQUEST请求。如果dhcp服务没有拒绝的理由，则回应DHCPACK信息。当DHCP客户端收到该应答信息后，就重新开始新的租用周期<br>&ensp;&ensp;&ensp;&ensp;87.5%：如果之前DHCP Server没有回应续租请求，等到租约期的7/8时，主机会再发送一次广播请求   </p><h2 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h2><p>用于内部网络和网络服务供应商自动分配IP地址给用户<br>用于内部网络管理员作为对所有电脑作集中管理的手段  </p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>自动化安装系统<br>解决IPV4资源不足问题DHCP服务  </p><h1 id="DHCP的工作原理-前四种经常用到"><a href="#DHCP的工作原理-前四种经常用到" class="headerlink" title="DHCP的工作原理(前四种经常用到)"></a>DHCP的工作原理(前四种经常用到)</h1><ol><li>DHCP DISCOVER：客户端到服务器，客户端设置为自动获取后一开机就会向网络发广播</li><li>DHCP OFFER ：服务器到客户端，如果网络中有DHCP服务器就会分配一个IP并同时在网络中进行标记此IP已被占用</li><li>DHCP REQUEST：客户端到服务器，网络中有多个DHCP同时分配IP，客户端这时就会选择一个最快到达的ip</li><li>DHCP ACK ：服务器到客户端，服务器最终确认</li><li>DHCP NAK：服务器到客户端,通知用户无法分配合适的IP地址</li><li>DHCP DECLINE ：客户端到服务器，指示地址已被使用</li><li>DHCP RELEASE：客户端到服务器，放弃网络地址和取消剩余的租约时间</li><li>DHCP INFORM：客户端到服务器, 客户端如果需要从DHCP服务器端获取更为详细的配置信息，则发送Inform报文向服务器进行请求，极少用到</li></ol><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/DHCP%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png?raw=true" alt="">  </p><h1 id="模拟dhcp的实现过程"><a href="#模拟dhcp的实现过程" class="headerlink" title="模拟dhcp的实现过程"></a>模拟dhcp的实现过程</h1><ol><li>准备：两台虚拟机（centos7模拟DHCP服务器，centos6模拟客户端）<br>centos7本身使用静态获取，centos6为动态获取 并且为仅主机模式<br>关闭防火墙 iptables -vnL<br>清空防火墙 iptables -F<br>关闭SELinux 检查状态getenforce<br>vim /etc/sysconfig/selinux   改为SELinux=disabled   重启后生效<br>对centos7设置，使其成为dhcp服务器  </li></ol><p>打开虚拟机—&gt;编辑—-&gt;虚拟网络设置—&gt;选中仅主机—&gt;取消下面DHCP设置  </p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/DHCP%201.png?raw=true" alt="">  </p><p>取消DHCP服务就意味着网络中没有了DHCP服务器，那么客户端如果设置DHCP获取那么是不能获取到IP  </p><p>在客户机将其获取方式改为DHCP vim /etc/sysconfig/network-scripts/ifcfg-eth0<br><img src="https://github.com/xiejia1215225/Pictures/blob/master/DHCP%202.png?raw=true" alt="">  </p><p>设置完之后重启，客户机将不能获取IP，因为网络中没有DHCP服务器  </p><ol start="2"><li>开始配置DHCP服务器（centos7）<br>配置前首先安装包  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#yum install dhcp -y</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br></pre></td></tr></table></figure></li></ol><p>在其他的服务安装后就可以开启服务，但dhcp比较特殊，所以此时应先复制模板到配置文件进行相关设置，然后再开启服务<br><img src="https://github.com/xiejia1215225/Pictures/blob/master/DHCP%203.png?raw=true" alt="">  </p><p>如果此时开启服务肯定是失败的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#systemctl start httpd</span></span><br><span class="line">Failed to start httpd.service: Unit not found.</span><br></pre></td></tr></table></figure></p><p>复制模板<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#cp /usr/share/doc/dhcp-4.2.5/dhcpd.conf.example /etc/dhcp/dhcpd.conf</span></span><br><span class="line">cp: overwrite <span class="string">'/etc/dhcp/dhcpd.conf'</span>? y</span><br></pre></td></tr></table></figure></p><p>配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#vim /etc/dhcp/dhcpd.conf</span></span><br><span class="line"><span class="comment"># No service will be given on this subnet, but declaring it helps the </span></span><br><span class="line"><span class="comment"># DHCP server to understand the network topology.</span></span><br><span class="line"></span><br><span class="line">subnet 192.168.183.0 netmask 255.255.255.0 &#123;         <span class="comment">#添加网断及子网掩码</span></span><br><span class="line">        range 192.168.183.10 192.168.183.100;        <span class="comment">#指定ip范围                                            </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a very basic subnet declaration.</span></span><br><span class="line"></span><br><span class="line">subnet 10.254.239.0 netmask 255.255.255.224 &#123;</span><br><span class="line">  range 10.254.239.10 10.254.239.20;</span><br></pre></td></tr></table></figure></p><p>重启服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment">#systemctl restart dhcpd</span></span><br></pre></td></tr></table></figure></p><p>重启完之后再次重启客户端(centos6),然后通过ifcongfig就能看见客户端获取到你指定范围内的ip了。至此已经实现一个模拟的DHCP服务器。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;head
      
    
    </summary>
    
      <category term="dhcp" scheme="http://yoursite.com/categories/dhcp/"/>
    
    
      <category term="dhcp" scheme="http://yoursite.com/tags/dhcp/"/>
    
  </entry>
  
  <entry>
    <title>自动化安装系统</title>
    <link href="http://yoursite.com/2018/11/18/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/11/18/自动化安装系统/</id>
    <published>2018-11-17T16:00:00.000Z</published>
    <updated>2019-01-24T09:19:02.092Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="kickstart安装步骤"><a href="#kickstart安装步骤" class="headerlink" title="kickstart安装步骤"></a>kickstart安装步骤</h1><p>    自动化安装之前我们首先要使用相应的工具去生成相应的文件（应答文件），在我们的系统装好之后，在管理员的家目录下都有这样一个文件anaconda-ks.cfg,此文件中的 kickstart就是我们实现自动化安装的重要文件，那么在配置此文件之前首先要安装kickstart所依赖的服务的包system-config-kickstart使用此工具需要在图形界面下进行<br>具体步骤如下：</p><ol><li><p>首先安装包文件system-config-kickstart</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#yum install system-config-kickstart</span></span><br></pre></td></tr></table></figure></li><li><p>安装之后在图形界面下打开system-config-kickstart</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#system-config-kickstart</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart1.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart2.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart3.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart5.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart6.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart7.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart8.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart9.png?raw=true" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">centos7上包安装界面时是空白的，此时需要把yum源的[base]改为[development]</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart10.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart11.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart12.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart13.png?raw=true" alt="img"></p><p>查看下是否生成了<code>ks.cfg</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#ll ks.cfg </span></span><br><span class="line">-rw-r--r-- 1 root root 1345 Nov 18 14:34 ks.cfg</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#mkdir -pv /var/www/html/ksdir/&#123;6,7&#125;</span></span><br><span class="line">mkdir: created directory `/var/www/html/ksdir<span class="string">'</span></span><br><span class="line"><span class="string">mkdir: created directory `/var/www/html/ksdir/6'</span></span><br><span class="line">mkdir: created directory `/var/www/html/ksdir/7<span class="string">'</span></span><br><span class="line"><span class="string">[root@CentOS6 ~]#mv ks.cfg /var/www/html/ksdir/6/ks_mini.cfg  </span></span><br><span class="line"><span class="string">[root@CentOS6 ~]#ll /var/www/html/ksdir/6/ks_mini.cfg</span></span><br><span class="line"><span class="string">-rw-r--r-- 1 root root 1345 Nov 18 14:34 /var/www/html/ksdir/6/ks_mini.cfg</span></span><br></pre></td></tr></table></figure><p>如果对ks_mini.cfg文件进行修改，格式出现错误势必后面的安装也不能正常进行，那么此时我们可以用ksvalidator来进行检查</p><p>格式：ksvalidator ks_mini.cfg</p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart14.png?raw=true" alt="img"></p><p>    如果访问的时候出现没有权限的提示，首先查看该应答文件是否为644权限<br>如果权限不是此时应该修改权限<br>chmod 644 ks6_mini.cfg<br>如果权限是644权限，那么此时应该关闭selinux</p><p>关闭方法：vim /etc/selinux/config 将SELINUX=enabled 改为SELINUX=disabled,重启即可</p><p>此时已经可以通过刚才生成的文件通过网络来实现自动化安装，点击启动，把刚才的虚拟机重启（此时就需要光盘引导）</p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E5%BC%80%E6%9C%BA%E7%95%8C%E9%9D%A2.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E9%85%8D%E7%BD%AEboot.png?raw=true" alt="img"><br>    此时当你按下ENTER之后，就意味着你可以去休息了，剩下的事情完全自动化安装了。</p><h1 id="kickstart文件的格式"><a href="#kickstart文件的格式" class="headerlink" title="kickstart文件的格式"></a>kickstart文件的格式</h1><ol><li><p>命令段：指明各种安装前配置，如键盘类型等</p></li><li><p>程序包段：指明要安装的程序包组或程序包，不安装的程序包等</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%packages  </span><br><span class="line">@group_name  </span><br><span class="line">package  </span><br><span class="line">-package</span><br><span class="line">%end</span><br></pre></td></tr></table></figure></li><li><p>脚本段：</p><blockquote><p>%pre: 安装前脚本<br>运行环境：运行于安装介质上的微型Linux环境</p></blockquote></li></ol><blockquote><p>%post: 安装后脚本<br>运行环境：安装完成的系统</p><ol><li><p>命令段中的命令：</p><p> 必备命令</p><blockquote><p>authconfig: 认证方式配置<br>authconfig –useshadow –passalgo=sha512<br>bootloader：bootloader的安装位置及相关配置<br>bootloader –location=mbr –driveorder=sda –<br>append=”crashkernel=auto rhgb quiet”<br>keyboard: 设定键盘类型<br>lang: 语言类型<br>part: 创建分区<br>rootpw: 指明root的密码<br>timezone: 时区</p></blockquote></li></ol></blockquote><blockquote><p>可选命令</p><blockquote><p>install OR upgrade<br>text: 文本安装界面<br>network<br>firewall<br>selinux<br>halt<br>poweroff<br>reboot<br>repo<br>user：安装完成后为系统创建新用户<br>url: 指明安装源<br>key –skip 跳过安装号码,适用于rhel版本</p></blockquote></blockquote><h1 id="制作引导光盘和U盘"><a href="#制作引导光盘和U盘" class="headerlink" title="制作引导光盘和U盘"></a>制作引导光盘和U盘</h1><p>创建引导光盘：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir –pv /app/myiso</span><br><span class="line">cp -r /misc/<span class="built_in">cd</span>/isolinux/ /app/myiso/</span><br><span class="line">vim /app/myiso/isolinux/isolinux.cfg</span><br><span class="line">initrd=initrd.img text ks=cdrom:/myks.cfg</span><br><span class="line">cp /root/myks.cfg /app/myiso/</span><br><span class="line">mkisofs -R -J -T -v --no-emul-boot --boot-load-size 4 --boot-info-table -V <span class="string">"CentOS 6.9 x86_64 boot"</span> -b isolinux/isolinux.bin -c isolinux/boot.cat -o /root/boot.iso /app/myiso/</span><br></pre></td></tr></table></figure><p>注意：以上相对路径都是相对于光盘的根，和工作目录无关</p><p>创建U盘启动盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/sr0 of=/dev/sdb</span><br></pre></td></tr></table></figure><h1 id="mkisofs选项"><a href="#mkisofs选项" class="headerlink" title="mkisofs选项"></a>mkisofs选项</h1><p>​    -o 指定映像文件的名称。<br>​    -b 指定在制作可开机光盘时所需的开机映像文件。<br>​    -c 制作可开机光盘时，会将开机映像文件中的 no-eltorito-catalog 全部内容作成一个文件。<br>​    -no-emul-boot 非模拟模式启动。<br>​    -boot-load-size 4 设置载入部分的数量<br>​    -boot-info-table 在启动的图像中现实信息<br>​    -R 或 -rock 使用 Rock RidgeExtensions<br>​    -J 或 -joliet 使用 Joliet 格式的目录与文件名称<br>​    -v 或 -verbose 执行时显示详细的信息<br>​    -T 或 -translation-table 建立文件名的转换表，适用于不支持 Rock Ridge Extensions 的系统上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#mkdir /data/iso</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cp -r /misc/cd/isolinux/ /data/iso</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#tree /data/iso</span></span><br><span class="line">/data/iso</span><br><span class="line">└── isolinux</span><br><span class="line">├── boot.cat</span><br><span class="line">├── boot.msg</span><br><span class="line">├── grub.conf</span><br><span class="line">├── initrd.img</span><br><span class="line">├── isolinux.bin</span><br><span class="line">├── isolinux.cfg</span><br><span class="line">├── memtest</span><br><span class="line">├── splash.jpg</span><br><span class="line">├── TRANS.TBL</span><br><span class="line">├── vesamenu.c32</span><br><span class="line">└── vmlinuz</span><br><span class="line"></span><br><span class="line">1 directory, 11 files</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cp /var/www/html/ksdir/6/ks_mini.cfg /data/iso/</span></span><br><span class="line">[root@CentOS6 iso]<span class="comment">#mkdir ksdir</span></span><br><span class="line">[root@CentOS6 iso]<span class="comment">#mv ks_mini.cfg ksdir/</span></span><br><span class="line">[root@CentOS6 iso]<span class="comment">#ls</span></span><br><span class="line">isolinux ksdir</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;kickstart安装步骤&quot;&gt;&lt;a href=&quot;#kickstar
      
    
    </summary>
    
      <category term="kickstart" scheme="http://yoursite.com/categories/kickstart/"/>
    
    
      <category term="kickstart" scheme="http://yoursite.com/tags/kickstart/"/>
    
      <category term="mkisofs" scheme="http://yoursite.com/tags/mkisofs/"/>
    
  </entry>
  
  <entry>
    <title>加密和安全</title>
    <link href="http://yoursite.com/2018/11/13/%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2018/11/13/加密和安全/</id>
    <published>2018-11-12T16:00:00.000Z</published>
    <updated>2019-01-26T09:31:44.037Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h1><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png?raw=true" alt="img"></p><p>加密和解密使用同一个密钥<br>特性：</p><blockquote><p>加密、解密使用同一个密钥，效率高<br>将原始数据分割成固定大小的块，逐个进行加密</p></blockquote><p>缺陷：</p><blockquote><p>密钥过多<br>密钥分发<br>数据来源无法确认</p></blockquote><h1 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h1><h2 id="公钥加密-密钥是成对出现"><a href="#公钥加密-密钥是成对出现" class="headerlink" title="公钥加密:密钥是成对出现"></a>公钥加密:密钥是成对出现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]#cd /etc/ssh</span><br><span class="line">[root@cetos7 ssh]#ll</span><br><span class="line">-rw-r-----. 1 root ssh_keys   1679 Sep 25 11:01 ssh_host_rsa_key</span><br><span class="line">-rw-r--r--. 1 root root        382 Sep 25 11:01 ssh_host_rsa_key.pub</span><br></pre></td></tr></table></figure><blockquote><p>公钥：公开给所有人；public key<br>私钥：自己留存，必须保证其私密性；secret key</p></blockquote><p>特点：用公钥加密数据，只能使用与之配对的私钥解密；反之亦然</p><p>功能：</p><blockquote><p>数字签名：主要在于让接收方确认发送方身份<br>对称密钥交换：发送方用对方的公钥加密一个对称密钥后发送给对方<br>数据加密：适合加密较小数据</p></blockquote><p>缺点：密钥长，加密解密效率低下</p><h2 id="非对称加密-基于一对公钥-密钥对"><a href="#非对称加密-基于一对公钥-密钥对" class="headerlink" title="非对称加密:基于一对公钥/密钥对"></a>非对称加密:基于一对公钥/密钥对</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png?raw=true" alt="img"><br>用密钥对中的一个加密，另一个解密</p><ol><li><p>实现加密：</p><blockquote><p>接收者生成公钥/密钥对：P和S ;公开公钥P，保密密钥S<br>发送者使用接收者的公钥来加密消息M ;将P(M)发送给接收者<br>接收者使用密钥S来解密：M=S(P(M))</p></blockquote></li><li><p>实现数字签名</p><blockquote><p>发送者生成公钥/密钥对：P和S ;公开公钥P，保密密钥S ;使用密钥S来加密消息M ;发送给接收者S(M)<br>接收者使用发送者的公钥来解密M=P(S(M))</p></blockquote></li></ol><p>数字签名<br><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png?raw=true" alt="数字签名"></p><ol><li>结合签名和加密</li><li>分离签名</li></ol><h1 id="单向散列-数字指纹"><a href="#单向散列-数字指纹" class="headerlink" title="单向散列(数字指纹)"></a>单向散列(数字指纹)</h1><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97.png?raw=true" alt="img"></p><ol><li><p>将任意数据缩小成固定大小的“指纹”</p><blockquote><p>任意长度输入<br>固定长度输出<br>若修改数据，指纹也会改变（“不会产生冲突”）<br>无法从指纹中重新生成数据（“单向”）</p></blockquote></li><li><p>功能：数据完整性</p></li><li><p>常见算法<br> md5: 128bits、<br> sha1: 160bits、 sha224、sha256、 sha384、 sha512</p></li><li><p>常用工具</p><blockquote><p>md5sum | sha1sum [ –check ] file<br>openssl、 gpg<br>rpm -V</p></blockquote></li></ol><p>加密类型对比</p><table><thead><tr><th></th><th><code>加密速度</code></th><th><code>密钥数</code></th><th><code>分发难度</code></th><th><code>密钥安全性</code></th></tr></thead><tbody><tr><td>对称加密</td><td>中</td><td>多</td><td>难，方式很多，很混乱</td><td>安全机制很不健全</td></tr><tr><td>单向加密</td><td>快</td><td>无</td><td>最简单，官网公布</td><td>不需要安全性</td></tr><tr><td>非对称加密</td><td>慢</td><td>少</td><td>中，通过CA分发</td><td>有健全的安全机制</td></tr></tbody></table><h1 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h1><p>密钥交换：IKE（ Internet Key Exchange ）</p><blockquote><p>公钥加密<br>DH (Deffie-Hellman)：生成会话密钥，</p><blockquote><p>DH</p><blockquote><p>A: g,p 协商生成公开的整数g, 大素数p<br>B: g,p<br>A:生成隐私数据 :a (a&lt;p )，计算得出 g^a%p，发送给B<br>B:生成隐私数据 :b,计算得出 g^b%p，发送给A<br>A:计算得出 [(g^b%p)^a] %p = g^ab%p，生成为密钥<br>B:计算得出 [(g^a%p)^b] %p = g^ab%p，生成为密钥</p></blockquote></blockquote></blockquote><h1 id="使用gpg实现对称加密"><a href="#使用gpg实现对称加密" class="headerlink" title="使用gpg实现对称加密"></a>使用gpg实现对称加密</h1><ol><li><p>对称加密file文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg -c filename</span><br><span class="line">ls filename.gpg</span><br></pre></td></tr></table></figure></li><li><p>在另一台主机上解密filename</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg -o file -d filename.gpg</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用gpg工具实现公钥加密"><a href="#使用gpg工具实现公钥加密" class="headerlink" title="使用gpg工具实现公钥加密"></a>使用gpg工具实现公钥加密</h1><p>在hostB主机上用公钥加密，在hostA主机上解密</p><ol><li><p>在hostA主机上生成公钥/私钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg –gen-key</span><br></pre></td></tr></table></figure></li><li><p>在hostA主机上查看公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg –list-keys</span><br></pre></td></tr></table></figure></li><li><p>在hostA主机上导出公钥到/data/magedupubkey</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg -a –<span class="built_in">export</span> -o /data/magedupubkey</span><br></pre></td></tr></table></figure></li><li><p>从hostA主机上复制公钥文件到需加密的B主机上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp magedupubkey hostB:</span><br></pre></td></tr></table></figure></li><li><p>在需加密数据的hostB主机上生成公钥/私钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg –list-keys</span><br><span class="line">gpg –gen-key</span><br></pre></td></tr></table></figure></li><li><p>在hostB主机上导入公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg –import magedupubkey</span><br><span class="line">gpg –list-keys</span><br></pre></td></tr></table></figure></li><li><p>用从hostA主机导入的公钥，加密hostB主机的文件file,生成file.gpg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg -e -r magedu f1.txt</span><br><span class="line">f1.txt.gpg</span><br></pre></td></tr></table></figure></li><li><p>复制加密文件到hostA主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp f1.txt.gpg hostA:</span><br></pre></td></tr></table></figure></li><li><p>在hostA主机解密文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg -o f1.txt -d f1.txt.gpg</span><br></pre></td></tr></table></figure></li><li><p>删除公钥和私钥(先删除私钥再删公钥)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg –delete-secret-keys wange</span><br><span class="line">gpg –delete-keys wange</span><br></pre></td></tr></table></figure></li></ol><h1 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h1><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB.png?raw=true" alt="img"></p><h1 id="CA和证书"><a href="#CA和证书" class="headerlink" title="CA和证书"></a>CA和证书</h1><p>PKI: Public Key Infrastructure</p><blockquote><p>签证机构：CA（Certificate Authority）<br>注册机构：RA<br>证书吊销列表：CRL<br>证书存取库：</p></blockquote><h2 id="证书获取"><a href="#证书获取" class="headerlink" title="证书获取"></a>证书获取</h2><p>证书类型：</p><blockquote><p>证书授权机构的证书<br>服务器<br>用户证书<br>获取证书两种方法：</p><ol><li>使用证书授权机构<br> 生成证书请求（csr）<br> 将证书请求csr发送给CA<br> CA签名颁发证书</li><li>自签名的证书<br> 自已签发自己的公钥</li></ol></blockquote><h1 id="安全协议"><a href="#安全协议" class="headerlink" title="安全协议"></a>安全协议</h1><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><p>功能：机密性，认证，完整性，重放保护<br>两阶段协议，分为握手阶段和应用阶段</p><ol><li><p>握手阶段(协商阶段):客户端和服务器端认证对方身份（依赖于PKI体系，利用数字证书进行身份认证），并协商通信中使用的安全参数、密码套件以及主密钥。 后续通信使用的所有密钥都是通过MasterSecret生成。</p></li><li><p>应用阶段:在握手阶段完成后进入，在应用阶段通信双方使用握手阶段协商好的密钥进行安全通信</p></li></ol><h2 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/SSL%E5%92%8CTLS.png?raw=true" alt="SSL和TLS.png"></p><ul><li>Handshake协议：包括协商安全参数和密码套件、服务器身份认证（客户端身份认证可选）、密钥交换</li><li>ChangeCipherSpec 协议：一条消息表明握手协议已经完成</li><li>Alert 协议：对握手协议中一些异常的错误提醒，分为fatal和warning两个级别，fatal类型错误会直接中断SSL链接，而warning级别的错误SSL链接仍可继续，只是会给出错误警告</li><li>Record 协议：包括对消息的分段、压缩、消息认证和完整性保护、加密等</li><li>HTTPS 协议：就是“HTTP 协议”和“SSL/TLS 协议”的组合。 HTTP overSSL” 或“HTTP over TLS” ，对http协议的文本数据进行加密处理后，成为二进制形式传输</li></ul><h1 id="openssl命令"><a href="#openssl命令" class="headerlink" title="openssl命令"></a>openssl命令</h1><p>两种运行模式：交互模式和批处理模式<br>openssl version：程序版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#openssl version</span></span><br><span class="line">OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><ol><li><p>对称加密：</p><p>工具：openssl enc, gpg</p><p>算法：3des, aes, blowfish, twofish</p><blockquote><p>enc命令<br>加密：<br>openssl enc -e -des3 -a -salt -in filename -out filename.enc<br>解密：<br>openssl enc -d -des3 -a -salt –in filename.enc -out filename</p></blockquote></li><li><p>单向加密：</p><p>工具：md5sum, sha1sum, sha224sum,sha256sum…</p><blockquote><p>dgst命令：<br>openssl dgst -md5 [-hex默认] filename<br>md5sum filename</p></blockquote></li><li><p>生成用户密码<br> passwd命令:<br> openssl passwd -1<br> openssl passwd -1 -salt “SALT(最多8位)”</p></li><li><p>生成随机数<br> openssl rand -base64|-hex NUM<br> NUM: 表示字节数,使用-hex,每个字符为十六进制,相当于4位二进制,出现的字符数为NUM*2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#openssl rand -base64 3</span></span><br><span class="line">n5c0</span><br><span class="line">[root@cetos7 ~]<span class="comment">#openssl rand -hex 3</span></span><br><span class="line">a8e1d2</span><br></pre></td></tr></table></figure></li><li><p>公钥加密<br> 算法：RSA, ELGamal<br> 工具：gpg, openssl rsautl（man rsautl）</p></li><li><p>数字签名<br> 算法：RSA, DSA, ELGamal</p></li><li><p>密钥交换：</p><p>算法：dh</p><p>生成私钥<br>openssl genrsa -out /PATH/TO/PRIVATEKEY.FILE NUM_BITS</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos~]<span class="comment">#openssl genrsa -out test.key 1024</span></span><br></pre></td></tr></table></figure><p>(umask 077; openssl genrsa –out test.key –des 2048) 加密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos~]<span class="comment">#(umask 077;openssl genrsa -out test.key -des 2048)</span></span><br></pre></td></tr></table></figure><p>openssl rsa -in test.key –out test.bak 将加密key解密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos~]<span class="comment">#openssl rsa -in test.key -out test.bak</span></span><br></pre></td></tr></table></figure><p>从私钥中提取出公钥</p><blockquote><p>openssl rsa –in test.key –pubout –out test.key.pub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@centos~]<span class="comment">#openssl rsa -in test.key -pubout -out test.key.pub</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>随机数生成器：伪随机数字</p><p>  键盘和鼠标，块设备中断</p><blockquote><p>/dev/random：仅从熵池返回随机数；随机数用尽，阻塞</p><blockquote><p>/dev/urandom：从熵池返回随机数；随机数用尽，会利用软件生成伪随机数,非阻塞OpenSSL</p></blockquote></blockquote><h1 id="创建CA和申请证书"><a href="#创建CA和申请证书" class="headerlink" title="创建CA和申请证书"></a>创建CA和申请证书</h1><p>1、创建所需要的文件</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/pki/CA/index.txt 生成证书索引数据库文件</span><br><span class="line"><span class="built_in">echo</span> 01 &gt; /etc/pki/CA/serial 指定第一个颁发证书的序列号</span><br></pre></td></tr></table></figure><p>2、CA自签证书<br>2.1、生成私钥</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pki/CA/</span><br><span class="line">(<span class="built_in">umask</span> 066; openssl genrsa -out private/cakey.pem 2048)</span><br></pre></td></tr></table></figure><p>2.2、生成自签名证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 3650 -out /etc/pki/CA/cacert.pem</span><br></pre></td></tr></table></figure><p>选项说明：</p><ul><li>​    -new：生成新证书签署请求</li><li>​    -x509：专用于CA生成自签证书</li><li>​    -key：生成请求时用到的私钥文件</li><li>​    -days n：证书的有效期限</li><li>​    -out /PATH/TO/SOMECERTFILE: 证书的保存路径  </li></ul><p>3、颁发证书</p><p>3.1、在需要使用证书的主机生成证书请求<br>给web服务器生成私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">umask</span> 066; openssl genrsa –out /data/test.key 2048)</span><br></pre></td></tr></table></figure><p>3.2、生成证书申请文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key /data/test.key -out /data/test.csr</span><br></pre></td></tr></table></figure><p>3.3、将证书请求文件传输给CA</p><p>3.4、CA签署证书，并将证书颁发给请求者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ca -<span class="keyword">in</span> /tmp/test.csr –out /etc/pki/CA/certs/test.crt -days 100</span><br></pre></td></tr></table></figure><p><strong>注意：默认要求 国家，省，公司名称三项必须和CA一致创建CA和证书管理</strong></p><p>3.5、查看证书中的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> /PATH/FROM/CERT_FILE -noout -text|issuer|subject|serial|dates</span><br><span class="line">openssl ca -status SERIAL 查看指定编号的证书状态</span><br></pre></td></tr></table></figure><p>4、吊销证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl ca -revoke /etc/pki/CA/newcerts/SERIAL.pem</span><br><span class="line">指定第一个吊销证书的编号,注意：第一次更新证书吊销列表前，才需要执行</span><br><span class="line"><span class="built_in">echo</span> 01 &gt; /etc/pki/CA/crlnumber</span><br></pre></td></tr></table></figure><p>更新证书吊销列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ca -gencrl -out /etc/pki/CA/crl.pem</span><br></pre></td></tr></table></figure><p>查看crl文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl crl -<span class="keyword">in</span> /etc/pki/CA/crl.pem -noout -text</span><br></pre></td></tr></table></figure><h1 id="SSH-22-tcp"><a href="#SSH-22-tcp" class="headerlink" title="SSH(22/tcp)"></a>SSH(22/tcp)</h1><ol><li><p>具体的软件实现：</p><blockquote><p>OpenSSH: ssh协议的开源实现，CentOS默认安装<br>dropbear：另一个开源实现</p></blockquote></li><li><p>两种方式的用户登录认证：</p><blockquote><p>基于password<br>基于key</p></blockquote></li><li><p>Openssh软件组成<br> 相关包：<br> openssh<br> openssh-clients<br> openssh-server</p></li><li><p>工具：<br> 基于C/S结构</p><blockquote><p>Client: ssh, scp, sftp，slogin<br>Windows客户端:xshell, putty, securecrt, sshsecureshellclient<br>Server: sshd</p></blockquote></li></ol><h2 id="ssh客户端"><a href="#ssh客户端" class="headerlink" title="ssh客户端"></a>ssh客户端</h2><ol><li>允许实现对远程系统经验证地加密安全访问</li><li>当用户远程连接ssh服务器时，会复制ssh服务器/etc/ssh/ssh_host*key.pub（CentOS7默认是ssh_host_ecdsa_key.pub）文件中的公钥到客户机的~./ssh/know_hosts中。下次连接时，会自动匹配相应私钥，不能匹配，将拒绝连接</li></ol><p>客户端组件：</p><p>​    ssh, 配置文件：/etc/ssh/ssh_config<br>​    Host PATTERN<br>​    StrictHostKeyChecking no 首次登录不显示检查提示<br>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh [user@]host [COMMAND]</span><br><span class="line">ssh [-l user] host [COMMAND]</span><br></pre></td></tr></table></figure><p>常见选项</p><p>​    -p port：远程服务器监听的端口<br>​    -b：指定连接的源IP<br>​    -v：调试模式<br>​    -C：压缩方式<br>​    -X：支持x11转发<br>​    -t：强制伪tty分配<br>ssh -t remoteserver1 ssh -t remoteserver2 ssh remoteserver3</p><h2 id="ssh服务登录验证方式："><a href="#ssh服务登录验证方式：" class="headerlink" title="ssh服务登录验证方式："></a>ssh服务登录验证方式：</h2><h3 id="基于用户和口令登录验证"><a href="#基于用户和口令登录验证" class="headerlink" title="基于用户和口令登录验证"></a>基于用户和口令登录验证</h3><blockquote><p>客户端发起ssh请求，服务器会把自己的公钥发送给用户<br>用户会根据服务器发来的公钥对密码进行加密<br>加密后的信息回传给服务器，服务器用自己的私钥解密，如果密码正确，则用户登录成功</p></blockquote><h3 id="基于密钥的登录方式"><a href="#基于密钥的登录方式" class="headerlink" title="基于密钥的登录方式"></a>基于密钥的登录方式</h3><blockquote><p>首先在客户端生成一对密钥（ssh-keygen）<br>并将客户端的公钥ssh-copy-id 拷贝到服务端<br>当客户端再次发送一个连接请求，包括ip、用户名<br>服务端得到客户端的请求后，会到authorized_keys中查找，如果有响应的IP和用户，就会随机生成一个字符串，例如：magedu<br>服务端将使用客户端拷贝过来的公钥进行加密，然后发送给客户端<br>得到服务端发来的消息后，客户端会使用私钥进行解密，然后将解密后的字符串发送给服务端<br>服务端接受到客户端发来的字符串后，跟之前的字符串进行对比，如果一致，就允许免密码登录</p></blockquote><p>基于key认证</p><ol><li><p>在客户端生成密钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa [-P ‘’][-f “~/.ssh/id_rsa”]</span><br></pre></td></tr></table></figure></li><li><p>把公钥文件传输至远程服务器对应用户的家目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id [-i [identity_file]][user@]host</span><br></pre></td></tr></table></figure></li><li><p>重设私钥口令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen –p</span><br></pre></td></tr></table></figure></li><li><p>验证代理（authentication agent）保密解密后的密钥<br> • 这样口令就只需要输入一次<br> • 在GNOME中，代理被自动提供给root用户<br> • 否则运行ssh-agent bash</p></li><li><p>钥匙通过命令添加给代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add</span><br></pre></td></tr></table></figure></li></ol><h1 id="rsync命令"><a href="#rsync命令" class="headerlink" title="rsync命令"></a>rsync命令</h1><p>基于ssh和rsh服务实现高效率的远程系统之间复制文件<br>使用安全的shell连接做为传输方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av /etc server1:/tmp 复制目录和目录下文件</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 data]<span class="comment">#ll ssl</span></span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--. 1 root root 3715 Nov 14 12:27 app.crt</span><br><span class="line">-rw-r--r--. 1 root root  655 Nov 14 08:52 app.csr</span><br><span class="line">-rw-------. 1 root root  887 Nov 14 08:48 app.key</span><br><span class="line">[root@CentOS6 data]<span class="comment">#rsync -av /data/ssl 192.168.183.148:/data</span></span><br><span class="line">root@192.168.183.148<span class="string">'s password: </span></span><br><span class="line"><span class="string">sending incremental file list</span></span><br><span class="line"><span class="string">ssl/</span></span><br><span class="line"><span class="string">ssl/app.crt</span></span><br><span class="line"><span class="string">ssl/app.csr</span></span><br><span class="line"><span class="string">ssl/app.key</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sent 5472 bytes  received 73 bytes  528.10 bytes/sec</span></span><br><span class="line"><span class="string">total size is 5257  speedup is 0.95</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av /etc/ server1:/tmp 只复制目录下文件</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 data]<span class="comment">#rsync -av /data/ssl/ 192.168.183.148:/data</span></span><br><span class="line">root@192.168.183.148<span class="string">'s password: </span></span><br><span class="line"><span class="string">sending incremental file list</span></span><br><span class="line"><span class="string">./</span></span><br><span class="line"><span class="string">app.crt</span></span><br><span class="line"><span class="string">app.csr</span></span><br><span class="line"><span class="string">app.key</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sent 5460 bytes  received 72 bytes  1229.33 bytes/sec</span></span><br><span class="line"><span class="string">total size is 5257  speedup is 0.95</span></span><br></pre></td></tr></table></figure><p><strong>比scp更快，只复制不同的文件</strong><br>常用选项：</p><p>​    -n 模拟复制过程<br>​    -v 显示详细过程<br>​    -r 递归复制目录树<br>​    -p 保留权限<br>​    -t 保留时间戳<br>​    -g 保留组信息<br>​    -o 保留所有者信息<br>​    -l 将软链接文件本身进行复制（默认）<br>​    -L 将软链接文件指向的文件复制<br>​    -a 存档，相当于–rlptgoD，但不保留ACL（-A）和SELinux属性（-X）</p><h1 id="pssh工具"><a href="#pssh工具" class="headerlink" title="pssh工具"></a>pssh工具</h1><p>pssh是一个python编写可以在多台服务器上执行命令的工具，也可实现文件复制<br>选项如下：<br>​    –version：查看版本<br>​    -h：主机文件列表，内容格式” [user@]host[:port]”<br>​    -H：主机字符串，内容格式” [user@]host[:port]”<br>​    -A：手动输入密码模式<br>​    -i：每个服务器内部处理信息输出<br>​    -l：登录使用的用户名<br>​    -p：并发的线程数【可选】<br>​    -o：输出的文件目录【可选】<br>​    -e：错误输入文件【可选】<br>​    -t：TIMEOUT 超时时间设置，0无限制【可选】<br>​    -O：SSH的选项<br>​    -P：打印出服务器返回信息<br>​    -v：详细模式</p><p>pssh示例</p><ol><li><p>通过pssh批量关闭seLinux</p><blockquote><p>pssh -H <a href="mailto:root@192.168.183.158" target="_blank" rel="noopener">root@192.168.183.158</a> -i “sed-i “s/SELINUX=enforcing/SELINUX=disabled/“ /etc/selinux/config”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#pssh -H root@192.168.183.158 -i "sed -i "s/SELINUX=enforcing/SELINUX=disabled/" /etc/selinux/config"</span></span><br><span class="line">&gt; [1] 20:25:13 [SUCCESS] root@192.168.183.158</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>批量发送指令</p><blockquote><p>pssh -H <a href="mailto:root@192.168.1.10" target="_blank" rel="noopener">root@192.168.1.10</a> -i setenforce 0<br>pssh -H <a href="mailto:wang@192.168.1.10" target="_blank" rel="noopener">wang@192.168.1.10</a> -i hostname</p></blockquote></li><li><p>当不支持ssh的key认证时，通过 -A选项，使用密码认证批量执行指令</p><blockquote><p>pssh -H <a href="mailto:wang@192.168.1.10" target="_blank" rel="noopener">wang@192.168.1.10</a> -A -i hostname</p></blockquote></li><li><p>将标准错误和标准正确重定向都保存至/app目录下</p><blockquote><p>pssh -H 192.168.1.10 -o /app -e /app -i “hostname”</p></blockquote></li></ol><h1 id="SSH端口转发"><a href="#SSH端口转发" class="headerlink" title="SSH端口转发"></a>SSH端口转发</h1><p>    SSH会自动加密和解密所有SSH客户端与服务端之间的网络数据。但是SSH还能够将其他TCP端口的网络数据通过SSH链接来转发，并且自动提供了相应的加密及解密服务。这一过程也被叫做“隧道”（tunneling),这是因为 SSH 为其他TCP链接提供了一个安全的通道来进行传输而得名。例如Telnet，SMTP，LDAP这些TCP应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果工作环境中的防火墙限制了一些网络端口的使用，但是允许SSH的连接，也能够通过将TCP端口转发来使用SSH进行通讯</p><p>SSH 端口转发能够提供两大功能：</p><blockquote><p>加密 SSH Client 端至 SSH Server 端之间的通讯数据<br>突破防火墙的限制完成一些之前无法建立的 TCP 连接SSH端口转发</p></blockquote><ol><li><p>本地转发：</p><p> -L localport:remotehost:remotehostport sshserver</p><p> 选项：</p><p> ​    -f 后台启用</p><p> ​    -N 不打开远程shell，处于等待状态</p><p> ​    -g 启用网关功能</p><p> 示例</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ssh –L 9527:telnetsrv:23 -Nfg sshsrv</span><br><span class="line">telnet 127.0.0.1 9527 </span><br><span class="line">​``` </span><br><span class="line">当访问本机的9527的端口时，被加密后转发到sshsrv的ssh服务，再解密被转发到telnetsrv:23</span><br><span class="line">&gt;data &lt;--&gt; localhost:9527 &lt;--&gt; localhost:XXXXX &lt;--&gt; sshsrv:22 &lt;--&gt; sshsrv:YYYYY &lt;--&gt; telnetsrv:23</span><br><span class="line"></span><br><span class="line">2. 远程转发:</span><br><span class="line">-R sshserverport:remotehost:remotehostport sshserver  </span><br><span class="line">示例：</span><br><span class="line">​```bash</span><br><span class="line">ssh –R 9527:telnetsrv:23 –Nf sshsrv</span><br></pre></td></tr></table></figure></li></ol><p>让sshsrv侦听9527端口的访问，如有访问，就加密后通过ssh服务转发请求到本机ssh客户端，再由本机解密后转发到telnetsrv:23</p><blockquote><p>Data <--> sshsrv:9527 <--> sshsrv:22 <--> localhost:XXXXX <-->localhost:YYYYY <--> telnetsrv:23</--></--></--></--></--></p></blockquote><ol><li><p>动态端口转发：<br> 当用firefox访问internet时，本机的1080端口做为代理服务器，firefox的访问请求被转发到sshserver上，由sshserver替之访问internet</p><blockquote><p>ssh -D 1080 root@sshserver -fNg<br>在本机firefox设置代理socket proxy:127.0.0.1:1080<br>curl –socks5 127.0.0.1:1080 <a href="http://www.qq.com" target="_blank" rel="noopener">http://www.qq.com</a></p></blockquote></li><li><p>X 协议转发<br> 所有图形化应用程序都是X客户程序</p><blockquote><p>能够通过tcp/ip连接远程X服务器<br>数据没有加密机，但是它通过ssh连接隧道安全进行</p></blockquote></li></ol><p>ssh -X user@remotehost gedit<br>remotehost主机上的gedit工具，将会显示在本机的X服务器上<br>传输的数据将通过ssh连接加密</p><h1 id="ssh服务器"><a href="#ssh服务器" class="headerlink" title="ssh服务器"></a>ssh服务器</h1><p>服务器端：sshd</p><h2 id="配置文件-etc-ssh-sshd-config"><a href="#配置文件-etc-ssh-sshd-config" class="headerlink" title="配置文件: /etc/ssh/sshd_config"></a>配置文件: /etc/ssh/sshd_config</h2><p>常用参数：<br>Port<br>ListenAddress ip<br>LoginGraceTime 2m<br>PermitRootLogin yes<br>StrictModes yes 检查.ssh/文件的所有者，权限等<br>MaxAuthTries 6<br>MaxSessions 10 同一个连接最大会话<br>PubkeyAuthentication yes<br>PermitEmptyPasswords no<br>PasswordAuthentication yes<br>GatewayPorts no<br>ClientAliveInterval 单位:秒<br>ClientAliveCountMax 默认3<br>UseDNS yes<br>GSSAPIAuthentication yes 提高速度可改为no<br>MaxStartups 未认证连接最大值，默认值10<br>Banner /path/file 登录提示信息<br>限制可登录用户的办法：</p><blockquote><p>AllowUsers user1 user2 user3<br>DenyUsers<br>AllowGroups<br>DenyGroup</p></blockquote><h2 id="sssh服务的最佳实践"><a href="#sssh服务的最佳实践" class="headerlink" title="sssh服务的最佳实践"></a>sssh服务的最佳实践</h2><p>建议使用非默认端口<br>禁止使用protocol version 1<br>限制可登录用户<br>设定空闲会话超时时长<br>利用防火墙设置ssh访问策略<br>仅监听特定的IP地址<br>基于口令认证时，使用强密码策略</p><blockquote><p>tr -dc A-Za-z0-9_ &lt; /dev/urandom | head -c 12| xargs<br>使用基于密钥的认证<br>禁止使用空密码<br>禁止root用户直接登录<br>限制ssh的访问频度和并发在线数<br>经常分析日志</p></blockquote><h1 id="编译安装dropbear"><a href="#编译安装dropbear" class="headerlink" title="编译安装dropbear"></a>编译安装dropbear</h1><p>ssh协议的另一个实现：dropbear</p><h2 id="源码编译安装："><a href="#源码编译安装：" class="headerlink" title="源码编译安装："></a>源码编译安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 安装开发包组:yum groupinstall <span class="string">"Development tools"</span>    </span><br><span class="line">2. 下载dropbear-2017.75.tar.bz2 </span><br><span class="line"></span><br><span class="line">wget https://matt.ucc.asn.au/dropbear/dropbear-2017.75.tar.bz2</span><br><span class="line"></span><br><span class="line">3. tar xf dropbear-2017.75.tar.bz2  </span><br><span class="line">4.  cat INSTALL </span><br><span class="line">    cat README  </span><br><span class="line">5. ./configure --prefix=/app/dropbear --sysconfdir=/etc/dropbear</span><br><span class="line">6. make PROGRAMS=<span class="string">"dropbear dbclient dropbearkey dropbearconvert scp"</span>  </span><br><span class="line">7. make PROGRAMS=<span class="string">"dropbear dbclient dropbearkey dropbearconvert scp"</span> install</span><br></pre></td></tr></table></figure><h2 id="启动ssh服务："><a href="#启动ssh服务：" class="headerlink" title="启动ssh服务："></a>启动ssh服务：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. ls /app/dropbear/sbin/ /app/dropbear/bin/  </span><br><span class="line">2. /app/dropbear/sbin/dropbear -h  </span><br><span class="line">3. mkdir /etc/dropbear  </span><br><span class="line">4. <span class="built_in">cd</span> /app/dropbear/bin</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'PATH=$PATH:/app/dropbear/bin:/app/dropbear/sbin'</span> &gt; /etc/profile.d/dropbear.sh</span><br><span class="line">dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key   </span><br><span class="line">5.  <span class="built_in">cd</span> /app/dropbear/sbin</span><br><span class="line">dropbear -p :2222 -F –E  <span class="comment">#前台运行  </span></span><br><span class="line">dropbear -p :2222        <span class="comment">#后台运行</span></span><br><span class="line">6. 客户端访问：</span><br><span class="line">ssh -p 2222 root@127.0.0.1  </span><br><span class="line">或者</span><br><span class="line"><span class="built_in">cd</span> /app/dropbear/bin</span><br><span class="line">dbclient 127.0.0.1</span><br></pre></td></tr></table></figure><h1 id="AIDE"><a href="#AIDE" class="headerlink" title="AIDE"></a>AIDE</h1><p>    当一个入侵者进入了你的系统并且种植了木马，通常会想办法来隐蔽这个木马（除了木马自身的一些隐蔽特性外,他会尽量给你检查系统的过程设置障碍),通常入侵者会修改一些文件,比如管理员通常用<code>ps -aux</code>来查看系统进程，那么入侵者很可能用自己经过修改的ps程序来替换掉你系统上的ps程序，以使用ps命令查不到正在运行的木马程序。如果入侵者发现管理员正在运行crontab作业,也有可能替换掉crontab程序等等。所以由此可以看出对于系统文件或是关键文件的检查是很必要的.目前就系统完整性检查的工具用的比较多的有两款:Tripwire和AIDE，前者是一款商业软件,后者是一款免费的但功能也很强大的工具.</p><ul><li>AIDE:高级入侵检测环境)是一个入侵检测工具，主要用途是检查文件的完整性，审计计算机上的那些文件被更改过了.</li><li>AIDE能够构造一个指定文件的数据库，它使用aide.conf作为其配置文件。 AIDE数据库能够保存文件的各种属性，包括：权限(permission)、索引节点序号(inode number)、所属用户(user)、所属用户组(group)、文件大小、最后修改时间(mtime)、创建时间(ctime)、最后访问时间(atime)、增加的大小以及连接数。 AIDE还能够使用下列算法：sha1、 md5、 rmd160、 tiger，以密文形式建立每个文件的校验码或散列号</li><li>这个数据库不应该保存那些经常变动的文件信息，例如：日志文件、邮件、 /proc文件系统、用户起始目录以及临时目录.</li></ul><ol><li><p>安装<br> yum install aide</p></li><li><p>修改配置文件</p><p> vim /etc/aide.conf (指定对哪些文件进行检测)</p><blockquote><p>/test/chameleon R<br>/bin/ps R+a<br>/usr/bin/crontab R+a<br>/etc PERMS<br>!/etc/mtab #“!” 表示忽略这个文件的检查<br>R=p+i+n+u+g+s+m+c+md5<br>权限+索引节点+链接数+用户+组+大小+最后一次修改时间+创建时间+md5校验值<br>NORMAL = R+rmd60+sha256</p></blockquote></li><li><p>初始化默认的AIDE的库：</p><blockquote><p>aide –init</p></blockquote></li><li><p>生成检查数据库（建议初始数据库存放到安全的地方）</p><blockquote><p>cd /var/lib/aide<br>mv aide.db.new.gz aide.db.gz</p></blockquote></li><li><p>检测：</p><blockquote><p>aide –check/-C</p></blockquote></li><li><p>更新数据库</p><blockquote><p>aide –update</p></blockquote></li></ol><h1 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h1><ul><li><p>sudo能够授权指定用户在指定主机上运行某些命令。 如果未授权用户尝试使用 sudo，会提示联系管理员</p></li><li><p>sudo可以提供日志，记录每个用户使用sudo操作</p></li><li><p>sudo为系统管理员提供配置文件，允许系统管理员集中地管理用户的使用权限和使用的主机</p></li><li><p>sudo使用时间戳文件来完成类似“检票”的系统，默认存活期为5分钟的“入场券”</p></li><li><p>通过visudo命令编辑配置文件，具有语法检查功能</p><blockquote><p>visudo –c 检查语法<br>visudo -f /etc/sudoers.d/test</p></blockquote></li><li><p>配置文件：/etc/sudoers, /etc/sudoers.d/</p></li><li><p>时间戳文件：/var/db/sudo</p></li><li><p>日志文件：/var/log/secure</p></li><li><p>配置文件支持使用通配符glob</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">？:任意单一字符</span><br><span class="line">*：匹配任意长度字符</span><br><span class="line">[wxc]: 匹配其中一个字符</span><br><span class="line">[!wxc]: 除了这三个字符的其它字符</span><br><span class="line">\x : 转义</span><br><span class="line">[[alpha]] :字母 示例： /bin/ls [[alpha]]*</span><br></pre></td></tr></table></figure></li></ul><p>配置文件规则有两类</p><p>​    1、别名定义:不是必须的<br>​    2、授权规则:必须的<br>授权规则格式 ：</p><p>​    用户 登入主机=(代表用户) 命令<br>示例：</p><p>​    root ALL=(ALL) ALL<br>格式说明：</p><p>​    user: 运行命令者的身份<br>​    host: 通过哪些主机<br>​    (runas)：以哪个用户的身份<br>​    command: 运行哪些命令</p><ul><li><p>别名</p><blockquote><p>Users和runas:</p><blockquote><p>username<br>#uid<br>%group_name<br>%#gid<br>user_alias|runas_alias</p></blockquote></blockquote></li><li><p>host:</p><blockquote><p>ip或hostname<br>network(/netmask)<br>host_alias</p></blockquote></li></ul><p>*command:</p><blockquote><p>command name<br>directory<br>sudoedit<br>Cmnd_Alias</p></blockquote><h2 id="sudo别名和示例"><a href="#sudo别名和示例" class="headerlink" title="sudo别名和示例"></a>sudo别名和示例</h2><ul><li>别名有四种类型：User_Alias, Runas_Alias, Host_Alias ，Cmnd_Alias</li><li>别名格式：<a href="[A-Z][0-9]_">A-Z</a>*</li><li>别名定义：<br>  Alias_Type NAME1 = item1, item2, item3 : NAME2 = item4, item5</li></ul><p>示例1：</p><blockquote><p>Student ALL=(ALL) ALL<br>%wheel ALL=(ALL) ALL</p></blockquote><p>示例2：</p><blockquote><p>student ALL=(root) /sbin/pidof,/sbin/ifconfig<br>%wheel ALL=(ALL) NOPASSWD: ALL</p></blockquote><p>示例3</p><blockquote><p>User_Alias NETADMIN= netuser1,netuser2<br>Cmnd_Alias NETCMD = /usr/sbin/ip<br>NETADMIN ALL=（root） NETCMD</p></blockquote><p>示例4</p><blockquote><p>User_Alias SYSADER=wang,mage,%admins<br>User_Alias DISKADER=tom<br>Host_Alias SERS=<a href="http://www.magedu.com,172.16.0.0/24" target="_blank" rel="noopener">www.magedu.com,172.16.0.0/24</a><br>Runas_Alias OP=root<br>Cmnd_Alias SYDCMD=/bin/chown,/bin/chmod<br>Cmnd_Alias DSKCMD=/sbin/parted,/sbin/fdisk<br>SYSADER SERS= SYDCMD,DSKCMD<br>DISKADER ALL=(OP) DSKCMD</p></blockquote><p>示例5</p><blockquote><p>User_Alias ADMINUSER = adminuser1,adminuser2<br>Cmnd_Alias ADMINCMD = /usr/sbin/useradd，/usr/sbin/usermod,<br>/usr/bin/passwd [a-zA-Z]*, !/usr/bin/passwd root<br>ADMINUSER ALL=(root) NOPASSWD:ADMINCMD，<br>PASSWD:/usr/sbin/userdel</p></blockquote><p>示例6</p><blockquote><p>Defaults:wang runas_default=tom<br>wang ALL=(tom,jerry) ALL</p></blockquote><p>示例7</p><blockquote><p>wang 192.168.1.6,192.168.1.8=(root) /usr/sbin/,!/usr/sbin/useradd</p></blockquote><p>示例8</p><blockquote><p>wang ALL=(ALL) /bin/cat /var/log/messages*</p></blockquote><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p>ls -l /usr/bin/sudo<br>sudo –i –u wang 切换身份<br>sudo [-u user] COMMAND</p><blockquote><p>-V 显示版本信息等配置信息<br>-u user 默认为root<br>-l,ll 列出用户在主机上可用的和被禁止的命令<br>-v 再延长密码有效期限5分钟,更新时间戳<br>-k 清除时间戳（1970-01-01），下次需要重新输密码<br>-K 与-k类似，还要删除时间戳文件<br>-b 在后台执行指令<br>-p 改变询问密码的提示符号<br>示例：-p “password on %h for user %p:”</p></blockquote><h1 id="TCP-Wrappers"><a href="#TCP-Wrappers" class="headerlink" title="TCP_Wrappers"></a>TCP_Wrappers</h1><ol><li><p>工作在第四层（传输层）的TCP协议</p></li><li><p>对有状态连接的特定服务进行安全检测并实现访问控制</p></li><li><p>以库文件形式实现</p></li><li><p>某进程是否接受libwrap的控制取决于发起此进程的程序在编译时是否针对libwrap进行编译的</p></li><li><p>判断服务程序是否能够由tcp_wrapper进行访问控制的方法：</p><blockquote><p>ldd /PATH/TO/PROGRAM|grep libwrap.so<br>strings PATH/TO/PROGRAM|grep libwrap.so</p></blockquote></li></ol><h2 id="TCP-Wrappers的使用"><a href="#TCP-Wrappers的使用" class="headerlink" title="TCP_Wrappers的使用"></a>TCP_Wrappers的使用</h2><ol><li>配置文件：/etc/hosts.allow, /etc/hosts.deny</li><li>检查顺序：hosts.allow，hosts.deny<br> 注意：一旦前面规则匹配，直接生效，将不再继续（默认允许）</li><li>基本语法:<br> daemon_list@host: client_list [ :options :option… ]</li><li>Daemon_list@host格式<br> 单个应用程序的二进制文件名，而非服务名，例如vsftpd<br> 以逗号或空格分隔的应用程序文件名列表，如:sshd,vsftpd<br> ALL表示所有接受tcp_wrapper控制的服务程序<br> 主机有多个IP，可用@hostIP来实现控制<br> 如：<a href="mailto:in.telnetd@192.168.0.254" target="_blank" rel="noopener">in.telnetd@192.168.0.254</a></li></ol><h2 id="客户端Client-list格式"><a href="#客户端Client-list格式" class="headerlink" title="客户端Client_list格式"></a>客户端Client_list格式</h2><blockquote><p>以逗号或空格分隔的客户端列表<br>基于IP地址：192.168.10.1 192.168.1.<br>基于主机名：<a href="http://www.magedu.com" target="_blank" rel="noopener">www.magedu.com</a> .magedu.com 较少用<br>基于网络/掩码：192.168.0.0/255.255.255.0<br>基于net/prefixlen: 192.168.1.0/24（CentOS7）<br>基于网络组（NIS 域）：@mynetwork<br>内置ACL：ALL，LOCAL，KNOWN，UNKNOWN，PARANOID<br>EXCEPT用法：<br>示例：<br>vsftpd: 172.16. EXCEPT 172.16.100.0/24 EXCEPT 172.16.100.1<br>示例：只允许192.168.1.0/24的主机访问sshd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; /etc/hosts.allow    </span><br><span class="line">&gt; sshd: 192.168.1.    </span><br><span class="line">&gt; /etc/hosts.deny    </span><br><span class="line">&gt; sshd :ALL</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>示例：只允许192.168.1.0/24的主机访问telnet和vsftpd服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/hosts.allow</span><br><span class="line">vsftpd,in.telnetd: 192.168.1.</span><br><span class="line">/etc/host.deny  </span><br><span class="line">vsftpd,in.telnetd: ALL</span><br></pre></td></tr></table></figure><h2 id="options-选项："><a href="#options-选项：" class="headerlink" title="[:options]选项："></a>[:options]选项：</h2><ol><li><p>deny 主要用在/etc/hosts.allow定义“拒绝”规则<br> 如：vsftpd: 172.16. :deny</p></li><li><p>allow 主要用在/etc/hosts.deny定义“允许” 规则<br> 如：vsftpd:172.16. :allow</p></li><li><p>spawn 启动一个外部程序完成执行的操作<br> 示例</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshd: ALL :spawn <span class="built_in">echo</span> <span class="string">"<span class="variable">$(date +%%F)</span> login attempt from %c to %s,%d"</span> &gt;&gt; /var/<span class="built_in">log</span>/sshd.log</span><br></pre></td></tr></table></figure></li></ol><p>说明：<br>在/etc/hosts.allow中添加，允许登录，并记录日志<br>在/etc/hosts.deny中添加，拒绝登录，并记录日志</p><blockquote><p>%c 客户端信息<br>%s 服务器端信息<br>%d 服务名<br>%p 守护进程的PID<br>%% 表示%</p><ol><li><p>twist 实际动作是拒绝访问,使用指定操作替换当前服务,标准输出和ERROR</p><p> 发送到客户端,默认至/dev/null</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; vsftpd: 172.16. :twist /bin/<span class="built_in">echo</span> <span class="string">"connection prohibited"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h1 id="PAM模块"><a href="#PAM模块" class="headerlink" title="PAM模块"></a>PAM模块</h1><ol><li><p>认证库：文本文件，MySQL，NIS，LDAP等</p></li><li><p>Sun公司于1995 年开发的一种与认证相关的通用框架机制</p></li><li><p>PAM 是关注如何为服务验证用户的 API，通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开.使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序</p></li><li><p>一种认证框架，自身不做认证</p></li><li><p>它提供了对所有服务进行认证的中央机制，适用于本地登录，远程登录，如：telnet,rlogin,fsh,ftp,点对点协议PPP，su等应用程序中，系统管理员通过PAM配置文件来制定不同应用程序的不同认证策略；应用程序开发者通过在服务程序中使用PAM API(pam_xxxx( ))来实现对认证方法的调用；而PAM服务模块的开发者则利用PAM SPI来编写模块（主要调用函数pam_sm_xxxx( )供PAM接口库调用，将不同的认证机制加入到系统中；PAM接口库（libpam）则读取配置文件，将应用程序和相应的PAM服务模块联系起来</p></li></ol><h2 id="PAM架构"><a href="#PAM架构" class="headerlink" title="PAM架构"></a>PAM架构</h2><p>  <img src="https://github.com/xiejia1215225/Pictures/blob/master/PAM%E6%9E%B6%E6%9E%84.png?raw=true" alt="PAM架构.png"></p><h2 id="PAM相关文件"><a href="#PAM相关文件" class="headerlink" title="PAM相关文件"></a>PAM相关文件</h2><ol><li><p>模块文件目录：/lib64/security/*.so</p></li><li><p>环境相关的设置：/etc/security/</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 bin]<span class="comment">#cd /lib64/security/</span></span><br><span class="line">[root@cetos7 security]<span class="comment">#ls</span></span><br><span class="line">pam_access.so     pam_gdm.so               pam_permit.so          pam_time.so</span><br><span class="line">pam_cap.so        pam_gnome_keyring.so     pam_postgresok.so      pam_timestamp.so</span><br><span class="line">pam_chroot.so     pam_group.so             pam_pwhistory.so       pam_tty_audit.so</span><br><span class="line">pam_console.so    pam_issue.so             pam_pwquality.so       pam_umask.so</span><br><span class="line">pam_cracklib.so   pam_keyinit.so           pam_rhosts.so          pam_unix_acct.so</span><br><span class="line">pam_debug.so      pam_lastlog.so           pam_rootok.so          pam_unix_auth.so</span><br><span class="line">pam_deny.so       pam_limits.so            pam_securetty.so       pam_unix_passwd.so</span><br><span class="line">pam_echo.so       pam_listfile.so          pam_selinux_permit.so  pam_unix_session.so</span><br><span class="line">pam_env.so        pam_localuser.so         pam_selinux.so         pam_unix.so</span><br><span class="line">pam_exec.so       pam_loginuid.so          pam_sepermit.so        pam_userdb.so</span><br><span class="line">pam_faildelay.so  pam_mail.so              pam_shells.so          pam_warn.so</span><br><span class="line">pam_faillock.so   pam_mkhomedir.so         pam_sss.so             pam_wheel.so</span><br><span class="line">pam_filter        pam_motd.so              pam_stress.so          pam_xauth.so</span><br><span class="line">pam_filter.so     pam_namespace.so         pam_succeed_if.so</span><br><span class="line">pam_fprintd.so    pam_nologin.so           pam_systemd.so</span><br><span class="line">pam_ftp.so        pam_oddjob_mkhomedir.so  pam_tally2.so</span><br></pre></td></tr></table></figure></li><li><p>主配置文件:/etc/pam.conf，默认不存在</p></li><li><p>为每种应用模块提供一个专用的配置文件：/etc/pam.d/APP_NAME</p><p> 注意：如/etc/pam.d存在，/etc/pam.conf将失效pam认证原理</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 security]<span class="comment">#cd /etc/pam.d/</span></span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#ls</span></span><br><span class="line">atd                  gdm-launch-environment  pluto         smartcard-auth     system-auth-ac</span><br><span class="line">chfn                 gdm-password            polkit-1      smartcard-auth-ac  systemd-user</span><br><span class="line">chsh                 gdm-pin                 postlogin     smtp               vlock</span><br><span class="line">config-util          gdm-smartcard           postlogin-ac  smtp.postfix       vmtoolsd</span><br><span class="line">crond                liveinst                ppp           sshd               vsftpd</span><br><span class="line">cups                 login                   remote        su                 xserver</span><br><span class="line">fingerprint-auth     other                   runuser       sudo</span><br><span class="line">fingerprint-auth-ac  passwd                  runuser<span class="_">-l</span>     sudo-i</span><br><span class="line">gdm-autologin        password-auth           screen        su<span class="_">-l</span></span><br><span class="line">gdm-fingerprint      password-auth-ac        setup         system-auth</span><br></pre></td></tr></table></figure></li></ol><h2 id="PAM认证原理"><a href="#PAM认证原理" class="headerlink" title="PAM认证原理"></a>PAM认证原理</h2><ol><li>PAM认证一般遵循这样的顺序：Service(服务)→PAM(配置文件)→pam_*.so</li><li>PAM认证首先要确定那一项服务，然后加载相应的PAM的配置文件(位于/etc/pam.d下)，最后调用认证文件(位于/lib/security下)进行安全认证</li></ol><h2 id="PAM配置文件详解"><a href="#PAM配置文件详解" class="headerlink" title="PAM配置文件详解"></a>PAM配置文件详解</h2><p>专用配置文件/etc/pam.d/* 格式<br>type control module-path arguments<br>说明：</p><h3 id="模块类型（module-type）"><a href="#模块类型（module-type）" class="headerlink" title="模块类型（module-type）"></a>模块类型（module-type）</h3><blockquote><p>Auth 账号的认证和授权<br>Account 与账号管理相关的非认证类的功能，如：用来限制/允许用户对某个服务的访问时间，当前有效的系统资源(最多可以有多少个用户)，限制用户的位置(例如：root用户只能从控制台登录)<br>Password 用户修改密码时密码复杂度检查机制等功能<br>Session 用户获取到服务之前或使用服务完成之后需要进行一些附加的操作，如：记录打开/关闭数据的信息，监视目录等<br>-type 表示因为缺失而不能加载的模块将不记录到系统日志,对于那些不总是安装在系统上的模块有用</p></blockquote><h3 id="Control"><a href="#Control" class="headerlink" title="Control:"></a>Control:</h3><ol><li><p>PAM库如何处理与该服务相关的PAM模块成功或失败情况</p></li><li><p>两种方式实现：简单和复杂</p><blockquote><blockquote><p>简单方式实现：一个关健词实现</p><blockquote><p>required ：一票否决，表示本模块必须返回成功才能通过认证，但是如果该模块返回失败，失败结果也不会立即通知用户，而是要等到同一type中的所有模块全部执行完毕再将失败结果返回给应用程序，即为必要条件<br>requisite ：一票否决，该模块必须返回成功才能通过认证，但是一旦该模块返回失败，将不再执行同一type内的任何模块，而是直接将控制权返回给应用程序。是一个必要条件<br>sufficient ：一票通过，表明本模块返回成功则通过身份认证的要求，不必再执行同一type内的其它模块，但如果本模块返回失败可忽略，即为充分条件<br>optional ：表明本模块是可选的，它的成功与否不会对身份认证起关键作用，其返回值一般被忽略<br>include： 调用其他的配置文件中定义的配置信息</p></blockquote></blockquote></blockquote></li></ol><blockquote><blockquote><p>复杂详细实现：使用一个或多个“status=action”<br>[status1=action1 status2=action …]<br>Status:检查结果的返回状态<br>Action:采取行为 ok，done，die，bad，ignore，reset</p><blockquote><p>ok 模块通过，继续检查<br>done 模块通过，返回最后结果给应用<br>bad 结果失败，继续检查<br>die 结果失败，返回失败结果给应用<br>ignore 结果忽略，不影响最后结果<br>reset 忽略已经得到的结果PAM认证机制</p></blockquote></blockquote></blockquote><h3 id="module-path-模块路径"><a href="#module-path-模块路径" class="headerlink" title="module-path: 模块路径"></a>module-path: 模块路径</h3><ol><li><p>相对路径：<br> /lib64/security目录下的模块可使用相对路径<br> 如：pam_shells.so、 pam_limits.so</p></li><li><p>绝对路径：</p><p> 模块通过读取配置文件完成用户对系统资源的使用控制</p><p> /etc/security/*.conf</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：修改PAM配置文件将马上生效</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编辑pam规则时，保持至少打开一个root会话，以防止root身份验证错误</span><br></pre></td></tr></table></figure><h3 id="Arguments-用来传递给该模块的参数"><a href="#Arguments-用来传递给该模块的参数" class="headerlink" title="Arguments 用来传递给该模块的参数"></a>Arguments 用来传递给该模块的参数</h3></li></ol><h2 id="PAM模块示例"><a href="#PAM模块示例" class="headerlink" title="PAM模块示例"></a>PAM模块示例</h2><h3 id="模块：pam-shells"><a href="#模块：pam-shells" class="headerlink" title="模块：pam_shells"></a>模块：pam_shells</h3><p>功能：检查有效shell<br>man pam_shells<br>例：不允许使用/bin/csh的用户进行切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#vim /etc/pam.d/su  </span></span><br><span class="line">auth required pam_shells.so  </span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#cat /etc/shells </span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/usr/sbin/nologin</span><br><span class="line">/bin/tcsh</span><br><span class="line"><span class="comment">#/bin/csh                                 用#把/bin/csh注释掉</span></span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#getent passwd mage</span></span><br><span class="line">mage:x:1242:1244::/home/mage:/bin/bash</span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#usermod -s /bin/csh mage</span></span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#getent passwd mage      </span></span><br><span class="line">mage:x:1242:1244::/home/mage:/bin/csh       把账号xie的shell类型改成 /bin/csh</span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#su - mage</span></span><br><span class="line">Password: </span><br><span class="line">su: Authentication failure                   mage账号将不可切换，其它不受影响 </span><br><span class="line">tail /var/<span class="built_in">log</span>/secure</span><br></pre></td></tr></table></figure><h3 id="模块：pam-securetty-so"><a href="#模块：pam-securetty-so" class="headerlink" title="模块：pam_securetty.so"></a>模块：pam_securetty.so</h3><p>功能：只允许root用户在/etc/securetty列出的安全终端上登陆<br>示例：允许root在telnet登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]vim /etc/pam.d/remote  </span><br><span class="line"><span class="comment">#auth required pam_securetty.so #将这一行加上注释  </span></span><br><span class="line">或者/etc/securetty文件中加入  </span><br><span class="line">pts/0,pts/1…pts/n</span><br></pre></td></tr></table></figure><h3 id="模块：pam-nologin-so"><a href="#模块：pam-nologin-so" class="headerlink" title="模块：pam_nologin.so"></a>模块：pam_nologin.so</h3><p>功能：</p><ol><li>如果/etc/nologin文件存在,将导致非root用户不能登陆</li><li>如果用户shell是/sbin/nologin 时，当该用户登陆时，会显示/etc/nologin文件内容，并拒绝登陆</li></ol><h3 id="模块：pam-limits-so"><a href="#模块：pam-limits-so" class="headerlink" title="模块：pam_limits.so"></a>模块：pam_limits.so</h3><p>功能：在用户级别实现对其可使用的资源的限制，例如：可打开的文件数量，可运行的进程数量，可用内存空间<br>修改限制的实现方式：</p><ol><li><p>ulimit命令，立即生效，但无法保存</p><blockquote><p>-n 每个进程最多的打开的文件描述符个数<br>-u 最大用户进程数<br>-S 使用 soft（软）资源限制<br>-H 使用 hard（硬）资源限制</p></blockquote></li><li><p>配置文件：/etc/security/limits.conf, /etc/security/limits.d/*.conf<br> 配置文件：每行一个定义</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;domain&gt;  &lt;<span class="built_in">type</span>&gt;  &lt;item&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>\ 应用于哪些对象</p><blockquote><p>Username 单个用户<br>@group 组内所有用户<br>* 所有用户</p></blockquote></blockquote><blockquote><p>\ 限制的类型</p><blockquote><p>Soft 软限制,普通用户自己可以修改<br>Hard 硬限制,由root用户设定，且通过kernel强制生效<br>- 二者同时限定</p></blockquote></blockquote><blockquote><p>\ 限制的资源</p><blockquote><p>nofile 所能够同时打开的最大文件数量,默认为1024<br>nproc 所能够同时运行的进程的最大数量,默认为1024</p></blockquote></blockquote><blockquote><p>\ 指定具体值</p><blockquote><p>限制用户最多打开的文件数和运行进程数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; /etc/pam.d/system-auth  </span><br><span class="line">&gt; &gt; session required pam_limits.so  </span><br><span class="line">&gt; &gt; </span><br><span class="line">&gt; &gt; vim /etc/security/limits.conf  </span><br><span class="line">&gt; &gt; apache – nofile 10240   用户apache可打开10240个文件  </span><br><span class="line">&gt; &gt; student hard nproc 20   用户student不能运行超过20个进程</span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;对称加密算法&quot;&gt;&lt;a href=&quot;#对称加密算法&quot; class=&quot;
      
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="模块" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97/"/>
    
      <category term="加密" scheme="http://yoursite.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="openssl" scheme="http://yoursite.com/tags/openssl/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
      <category term="CA" scheme="http://yoursite.com/tags/CA/"/>
    
  </entry>
  
  <entry>
    <title>Centos6系统启动流程与grub</title>
    <link href="http://yoursite.com/2018/11/06/Centos6%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B8%8Egrub/"/>
    <id>http://yoursite.com/2018/11/06/Centos6系统启动流程与grub/</id>
    <published>2018-11-05T16:00:00.000Z</published>
    <updated>2019-01-12T05:03:52.758Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Centos6启动流程"><a href="#Centos6启动流程" class="headerlink" title="Centos6启动流程"></a>Centos6启动流程</h1><ol><li>POST加电自检,即加载BIOS的硬件信息，获取第一个启动设备</li><li>读取第一个启动设备MBR的引导加载程序(grub)的启动信息</li><li>加载核心操作系统的核心信息，核心开始解压缩，并尝试驱动所有的硬件设备</li><li>核心执行init程序，并获取默认的运行信息</li><li>init程序执行/etc/rc.d/rc.sysinit文件</li><li>启动核心的外挂模块</li><li>init执行运行的各个批处理文件(scripts)</li><li>执行/bin/login程序，等待用户登录</li><li>登录之后开始以Shell控制主机启动流程</li></ol><h2 id="加电自检：power-on-system-test-POST"><a href="#加电自检：power-on-system-test-POST" class="headerlink" title="加电自检：power on system test(POST)"></a>加电自检：power on system test(POST)</h2><p>    自检主要是检测一下硬件设备是否存在并能正常运行，如：CPU、内存、硬盘是否存在并能正常运行。这些自检的功能是有一个软件程序来实现的，这个软件程序叫做：BIOS。BIOS （Basic Input Output System）即基本输入输出系统。它是装载在一个硬件芯片CMOS之上，显然CMOS是一个硬件设备。加电过程就是给CMOS通电，然后启动其上的BIOS程序，BIOS程序会根据CMOS上面的一些配置信息去读取其他的硬件设备信息并检测其是否存在并能正常运行，之后进行硬件设备的初始化。</p><h2 id="读取MBR"><a href="#读取MBR" class="headerlink" title="读取MBR"></a>读取MBR</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/MBR.gif?raw=true" alt="img"><br>    众所周知，硬盘上第0磁道第一个扇区被称为MBR，也就是Master Boot Record，即主引导记录，它的大小是512字节，别看地方不大，可里面却存放了预启动信息、分区表信息。前446字节存放grub的空间，中间64字节是分区表，最后2字节 55AA的标识。<br>系统找到BIOS所指定的硬盘的MBR后，就会将其复制到0×7c00地址所在的物理内存中。其实被复制到物理内存的内容就是Boot Loader。Boot Loader 就是在操作系统内核运行之前运行的一段小程序。</p><h2 id="Grub启动引导阶段"><a href="#Grub启动引导阶段" class="headerlink" title="Grub启动引导阶段"></a>Grub启动引导阶段</h2><p>    grub引导也分为三个阶段stage1阶段、stage1.5阶段和stage2阶段。</p><p>阶段 1<br>    如上文 POST（上电自检）阶段提到的，在 POST 阶段结束时，BIOS 将查找在接入的磁盘中查找引导记录，其通常位于 MBR（主引导记录Master Boot Record），它加载它找到的第一个引导记录中到内存中，并开始执行此代码。引导代码（及阶段 1 代码）必须非常小，因为它必须连同分区表放到硬盘的第一个 512 字节的扇区中。 在传统的常规 MBR 中，引导代码实际所占用的空间大小为 446 字节。这个阶段 1 的 446 字节的文件通常被叫做引导镜像（boot.img），其中不包含设备的分区信息，分区是一般单独添加到引导记录中。</p><p>由于引导记录必须非常的小，它不可能非常智能，且不能理解文件系统结构。因此阶段 1 的唯一功能就是定位并加载阶段 1.5 的代码。为了完成此任务，阶段 1.5 的代码必须位于引导记录与设备第一个分区之间的位置。在加载阶段 1.5 代码进入内存后，控制权将由阶段 1 转移到阶段 1.5。</p><p>阶段 1.5<br>    如上所述，阶段 1.5 的代码必须位于引导记录与设备第一个分区之间的位置。该空间由于历史上的技术原因而空闲。第一个分区的开始位置在扇区 63 和 MBR（扇区 0）之间遗留下 62 个 512 字节的扇区（共 31744 字节），该区域用于存储阶段 1.5 的代码镜像 core.img 文件。该文件大小为 25389 字节，故此区域有足够大小的空间用来存储 core.img。</p><p>因为有更大的存储空间用于阶段 1.5，且该空间足够容纳一些通用的文件系统驱动程序，如标准的 EXT 和其它的 Linux 文件系统，如 FAT 和 NTFS 等。故阶段 2 的文件可以存放于 /boot 文件系统中，一般在 /boot/grub 目录下。</p><p><strong>注意 /boot 目录必须放在一个 GRUB 所支持的文件系统（并不是所有的文件系统均可）。阶段 1.5 的功能是开始执行存放阶段 2 文件的 /boot 文件系统的驱动程序，并加载相关的驱动程序。</strong></p><p>阶段 2<br>    GRUB 阶段 2 所有的文件都已存放于 /boot/grub 目录及其几个子目录之下。该阶段没有一个类似于阶段 1 与阶段 1.5 的镜像文件。相应地，该阶段主要需要从 /boot/grub2/i386-pc 目录下加载一些内核运行时模块。</p><p>GRUB 阶段 2 的主要功能是定位和加载 Linux 内核到内存中，并转移控制权到内核。内核的相关文件位于 /boot 目录下，这些内核文件可以通过其文件名进行识别，其文件名均带有前缀 vmlinuz。你可以列出 /boot 目录中的内容来查看操作系统中当前已经安装的内核。</p><p>Red Hat 包管理器（DNF）支持保留多个内核版本，以防最新版本内核发生问题而无法启动时，可以恢复老版本的内核。默认情况下，GRUB 提供了一个已安装内核的预引导菜单，其中包括问题诊断菜单（recuse）以及恢复菜单（如果配置已经设置恢复镜像）。</p><p>阶段 2 加载选定的内核到内存中，并转移控制权到内核代码。</p><h2 id="加载内核"><a href="#加载内核" class="headerlink" title="加载内核"></a>加载内核</h2><p>    根据grub设定的内核映像所在路径，系统读取内存映像，并进行解压缩操作。此时，屏幕一般会输出“Uncompressing Linux”的提示。当解压缩内核完成后，屏幕输出“OK, booting the kernel”。<br>系统将解压后的内核放置在内存之中，并调用start_kernel()函数来启动一系列的初始化函数并初始化各种设备，完成Linux核心环境的建立。至此，Linux内核已经建立起来了，基于Linux的程序应该可以正常运行了。</p><h2 id="用户层init依据inittab文件来设定运行等级"><a href="#用户层init依据inittab文件来设定运行等级" class="headerlink" title="用户层init依据inittab文件来设定运行等级"></a>用户层init依据inittab文件来设定运行等级</h2><p>    内核被加载后，第一个运行的程序便是/sbin/init，该文件会读取/etc/inittab文件，并依据此文件来进行初始化工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 rc5.d]<span class="comment">#cat /etc/inittab</span></span><br><span class="line"><span class="comment"># inittab is only used by upstart for the default runlevel.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">  ADDING OTHER CONFIGURATION HERE WILL HAVE NO EFFECT ON YOUR SYSTEM.</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># System initialization is started by /etc/init/rcS.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Individual runlevels are started by /etc/init/rc.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Ctrl-Alt-Delete is handled by /etc/init/control-alt-delete.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Terminal gettys are handled by /etc/init/tty.conf and /etc/init/serial.conf,</span></span><br><span class="line"><span class="comment"># with configuration in /etc/sysconfig/init.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For information on how to write upstart event handlers, or how</span></span><br><span class="line"><span class="comment"># upstart works, see init(5), init(8), and initctl(8).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default runlevel. The runlevels used are:</span></span><br><span class="line"><span class="comment">#   0 - halt (Do NOT set initdefault to this)</span></span><br><span class="line"><span class="comment">#   1 - Single user mode</span></span><br><span class="line"><span class="comment">#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</span></span><br><span class="line"><span class="comment">#   3 - Full multiuser mode</span></span><br><span class="line"><span class="comment">#   4 - unused</span></span><br><span class="line"><span class="comment">#   5 - X11</span></span><br><span class="line"><span class="comment">#   6 - reboot (Do NOT set initdefault to this)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">id:5:initdefault:</span><br></pre></td></tr></table></figure><p>其实/etc/inittab文件最主要的作用就是设定Linux的运行等级，</p><ul><li>运行级别：为系统运行或维护等目的而设定；0-6：7个级别<br>  0：关机<br>  1：单用户模式(root自动登录), single, 维护模式<br>  2：多用户模式，启动网络功能，但不会启动NFS；维护模式<br>  3：多用户模式，正常模式；文本界面<br>  4：保留，未使用<br>  5：多用户模式，正常模式；图形界面<br>  6：重启</li><li>默认级别：3, 5</li><li>切换级别：init #</li><li>查看级别：runlevel ; who -r</li></ul><p>每一行格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id:runlevel:action:process</span><br></pre></td></tr></table></figure><ul><li><p>id：是惟一标识该项的字符序列</p></li><li><p>runlevels： 定义了操作所使用的运行级别</p></li><li><p>action： 指定了要执行的特定操作</p><blockquote><blockquote><blockquote><blockquote><p>wait: 切换至此级别运行一次<br>respawn：此process终止，就重新启动之<br>initdefault：设定默认运行级别；process省略<br>sysinit：设定系统初始化方式</p></blockquote></blockquote></blockquote></blockquote></li><li><p>process：定义了要执行的进程</p></li></ul><p>故</p><p>id:5:initdefault:</p><p>这就表明Linux需要开机运行在5模式  </p><ul><li>破解CentOS5和6的root口令<br>进入单用户模式即可</li></ul><h2 id="init进程执行rc-sysinit"><a href="#init进程执行rc-sysinit" class="headerlink" title="init进程执行rc.sysinit"></a>init进程执行rc.sysinit</h2><p>/etc/rc.d/rc.sysinit: 系统初始化脚本（一般情况下，我们不需要改）  </p><ol><li>设置主机名  </li><li>设置欢迎信息  </li><li>激活udev和selinux  </li><li>挂载/etc/fstab文件中定义的文件系统  </li><li>检测根文件系统，并以读写方式重新挂载根文件系统  </li><li>设置系统时钟  </li><li>激活swap设备  </li><li>根据/etc/sysctl.conf文件设置内核参数  </li><li>激活lvm及software raid设备  </li><li>加载额外设备的驱动程序  </li><li>清理操作启动流程  </li></ol><h2 id="执行不同运行级别的脚本程序"><a href="#执行不同运行级别的脚本程序" class="headerlink" title="执行不同运行级别的脚本程序"></a>执行不同运行级别的脚本程序</h2><p>根据运行级别的不同，系统会运行rc0.d到rc6.d中的相应的脚本程序，来完成相应的初始化工作和启动相应的服务。<br>说明：rc N –&gt; 意味着读取/etc/rc.d/rcN.d/<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 rc.d]<span class="comment">#ll</span></span><br><span class="line">total 60</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Nov  6 09:32 init.d</span><br><span class="line">-rwxr-xr-x. 1 root root  2617 Jun 20 00:12 rc</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc0.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc1.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc2.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc3.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc4.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Nov  7 11:26 rc5.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc6.d</span><br><span class="line">-rwxr-xr-x. 1 root root   220 Jun 20 00:12 rc.local</span><br><span class="line">-rwxr-xr-x. 1 root root 20199 Jun 20 00:12 rc.sysinit</span><br></pre></td></tr></table></figure></p><p>K<em>: K##</em>：##运行次序；数字越小，越先运行；数字越小的服务，通常为依赖到别的服务<br>S<em>: S##</em>：##运行次序；数字越小，越先运行；数字越小的服务，通常为被依赖到的服务  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> srv <span class="keyword">in</span> /etc/rc.d/rcN.d/K*; <span class="keyword">do</span></span><br><span class="line"><span class="variable">$srv</span> stop</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> srv <span class="keyword">in</span> /etc/rc.d/rcN.d/S*; <span class="keyword">do</span></span><br><span class="line"><span class="variable">$srv</span> start</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="执行-etc-rc-d-rc-local"><a href="#执行-etc-rc-d-rc-local" class="headerlink" title="执行/etc/rc.d/rc.local"></a>执行/etc/rc.d/rc.local</h2><p>你如果打开了此文件，里面有一句话，读过之后，你就会对此命令的作用一目了然：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 rc.d]<span class="comment">#cat /etc/rc.d/rc.local </span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script will be executed *after* all the other init scripts.</span></span><br><span class="line"><span class="comment"># You can put your own initialization stuff in here if you don't</span></span><br><span class="line"><span class="comment"># want to do the full Sys V style init stuff.</span></span><br><span class="line"></span><br><span class="line">touch /var/lock/subsys/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p><code>注意：</code>正常级别下，最后启动一个服务S99local没有链接至/etc/rc.d/init.d一个服务脚本，而是指向了/etc/rc.d/rc.local脚本<br>不便或不需写为服务脚本放置于/etc/rc.d/init.d/目录，且又想开机时自动运行的命令，可直接放置于/etc/rc.d/rc.local文件中<br>/etc/rc.d/rc.local在指定运行级别脚本后运行<br>可以根据情况，进行自定义修改</p><h2 id="执行-bin-login程序，进入登录状态"><a href="#执行-bin-login程序，进入登录状态" class="headerlink" title="执行/bin/login程序，进入登录状态"></a>执行/bin/login程序，进入登录状态</h2><p>此时，系统已经进入到了等待用户输入username和password的时候了，你已经可以用自己的帐号登入系统了。</p><h1 id="Grub"><a href="#Grub" class="headerlink" title="Grub"></a>Grub</h1><h2 id="Grub-GRand-Unified-Bootloader"><a href="#Grub-GRand-Unified-Bootloader" class="headerlink" title="Grub: GRand Unified Bootloader"></a>Grub: GRand Unified Bootloader</h2><p>如前面所述，grub分为三个阶段<br>stage1: mbr<br>stage1.5: mbr之后的扇区，让stage1中的bootloader能识别stage2所在的分区上的文件系统<br>stage2：磁盘分区(/boot/grub/)</p><h2 id="Grub安装"><a href="#Grub安装" class="headerlink" title="Grub安装"></a>Grub安装</h2><ol><li><p>grub-install<br> 安装grub stage1和stage1_5到/dev/DISK磁盘上，并复制GRUB相关文件<br> 到 DIR/boot目录下<br> grub-install –root-directory=DIR /dev/DISK</p></li><li><p>grub<br> grub&gt; root (hd#,#)<br> grub&gt; setup (hd#)grub</p></li><li><p>识别硬盘设备</p><p> (hd#,#)</p><p> hd#: 磁盘编号，用数字表示；从0开始编号</p><p> #: 分区编号，用数字表示; 从0开始编号</p><p> (hd0,0) 第一块硬盘，第一个分区</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#dd if=/dev/zero of=/dev/sda bs=1 count=446</span></span><br><span class="line">446+0 records <span class="keyword">in</span></span><br><span class="line">446+0 records out</span><br><span class="line">446 bytes (446 B) copied, 0.00308127 s, 145 kB/s</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#hexdump -C /dev/sda -n 512</span></span><br><span class="line">00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 80 20  |............... |</span><br><span class="line">000001c0  21 00 83 aa 28 82 00 08  00 00 00 00 20 00 00 aa  |!...(....... ...|</span><br><span class="line">000001d0  29 82 83 fe ff ff 00 08  20 00 00 80 1a 06 00 fe  |)....... .......|</span><br><span class="line">000001e0  ff ff 83 fe ff ff 00 88  3a 06 00 80 a9 03 00 fe  |........:.......|</span><br><span class="line">000001f0  ff ff 05 fe ff ff 00 08  e4 09 00 f8 1b 0f 55 aa  |..............U.|</span><br><span class="line">00000200</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#grub</span></span><br><span class="line">Probing devices to guess BIOS drives. This may take a long time.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    GNU GRUB  version 0.97  (640K lower / 3072K upper memory)</span><br><span class="line"></span><br><span class="line"> [ Minimal BASH-like line editing is supported.  For the first word, TAB</span><br><span class="line">   lists possible <span class="built_in">command</span> completions.  Anywhere <span class="keyword">else</span> TAB lists the possible</span><br><span class="line">   completions of a device/filename.]</span><br><span class="line">grub&gt; root (hd0,0)                 </span><br><span class="line">root (hd0,0)</span><br><span class="line"> Filesystem <span class="built_in">type</span> is ext2fs, partition <span class="built_in">type</span> 0x83</span><br><span class="line">grub&gt; setup (hd0)</span><br><span class="line">setup (hd0)</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/boot/grub/stage1"</span> exists... no</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/grub/stage1"</span> exists... yes</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/grub/stage2"</span> exists... yes</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/grub/e2fs_stage1_5"</span> exists... yes</span><br><span class="line"> Running <span class="string">"embed /grub/e2fs_stage1_5 (hd0)"</span>...  27 sectors are embedded.</span><br><span class="line">succeeded</span><br><span class="line"> Running <span class="string">"install /grub/stage1 (hd0) (hd0)1+27 p (hd0,0)/grub/stage2 /grub/grub.conf"</span>... succeeded</span><br><span class="line">Done.</span><br><span class="line">grub&gt;</span><br></pre></td></tr></table></figure></li></ol><p>如果我们把/boot/grub/* 的文件移走</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#mv /boot/grub/* /data</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dd if=/dev/zero of=/dev/sda bs=1 count=446</span></span><br><span class="line">446+0 records <span class="keyword">in</span></span><br><span class="line">446+0 records out</span><br><span class="line">446 bytes (446 B) copied, 0.00398936 s, 112 kB/s</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#hexdump -C /dev/sda -n 512</span></span><br><span class="line">00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 80 20  |............... |</span><br><span class="line">000001c0  21 00 83 aa 28 82 00 08  00 00 00 00 20 00 00 aa  |!...(....... ...|</span><br><span class="line">000001d0  29 82 83 fe ff ff 00 08  20 00 00 80 1a 06 00 fe  |)....... .......|</span><br><span class="line">000001e0  ff ff 83 fe ff ff 00 88  3a 06 00 80 a9 03 00 fe  |........:.......|</span><br><span class="line">000001f0  ff ff 05 fe ff ff 00 08  e4 09 00 f8 1b 0f 55 aa  |..............U.|</span><br><span class="line">00000200</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#grub</span></span><br><span class="line">Probing devices to guess BIOS drives. This may take a long time.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    GNU GRUB  version 0.97  (640K lower / 3072K upper memory)</span><br><span class="line"></span><br><span class="line"> [ Minimal BASH-like line editing is supported.  For the first word, TAB</span><br><span class="line">   lists possible <span class="built_in">command</span> completions.  Anywhere <span class="keyword">else</span> TAB lists the possible</span><br><span class="line">   completions of a device/filename.]</span><br><span class="line">grub&gt; root (hd0,0)</span><br><span class="line">root (hd0,0)</span><br><span class="line"> Filesystem <span class="built_in">type</span> is ext2fs, partition <span class="built_in">type</span> 0x83</span><br><span class="line">grub&gt; setup (hd0)</span><br><span class="line">setup (hd0)</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/boot/grub/stage1"</span> exists... no</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/grub/stage1"</span> exists... no</span><br><span class="line"></span><br><span class="line">Error 15t: File not found</span><br><span class="line">grub&gt; </span><br><span class="line">[root@CentOS6 ~]<span class="comment">#grub-install /dev/sda</span></span><br><span class="line">Probing devices to guess BIOS drives. This may take a long time.</span><br><span class="line">Installation finished. No error reported.</span><br><span class="line">This is the contents of the device map /boot/grub/device.map.</span><br><span class="line">Check <span class="keyword">if</span> this is correct or not. If any of the lines is incorrect,</span><br><span class="line">fix it and re-run the script `grub-install<span class="string">'.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(fd0)   /dev/fd0</span></span><br><span class="line"><span class="string">(hd0)   /dev/sda</span></span><br></pre></td></tr></table></figure><p>由此实验我们可以看出grub&gt; root (hd#,#)；grub&gt; setup (hd#)这种修复方法依赖于/boot/grub/ <em>文件而grub-install这种修复方法不依赖/boot/grub/</em> 文件，感觉更通用一些。</p><h2 id="grub"><a href="#grub" class="headerlink" title="grub"></a>grub</h2><p>stage2及内核等通常放置于一个基本磁盘分区<br>功用：</p><ol><li><p>提供启动菜单、并提供交互式接口</p><blockquote><p>a：内核参数<br>e: 编辑模式，用于编辑菜单<br>c: 命令模式，交互式接口</p></blockquote></li><li><p>加载用户选择的内核或操作系统</p><blockquote><p>允许传递参数给内核<br>可隐藏启动菜单</p></blockquote></li><li><p>为菜单提供了保护机制</p><blockquote><p>为编辑启动菜单进行认证<br>为启用内核或操作系统进行认证grub legacy</p></blockquote></li></ol><p>grub的命令行接口</p><ul><li>help: 获取帮助列表</li><li>help KEYWORD: 详细帮助信息</li><li>find (hd#,#)/PATH/TO/SOMEFILE：</li><li>root (hd#,#)</li><li>kernel /PATH/TO/KERNEL_FILE: 设定本次启动时用到的内核文件；额外还可添加许多内核支持使用的cmdline参数<br>  例如：max_loop=100 selinux=0 init=/path/to/init</li><li>initrd /PATH/TO/INITRAMFS_FILE: 设定为选定的内核提供额外文件的ramdisk</li><li>boot: 引导启动选定的内核</li></ul><p>cat /proc/cmdline 内核参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]#cat /proc/cmdline </span><br><span class="line">ro root=UUID=d3df2aba-5cd3-47fe-8128-3445b87dba11 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16   KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</span><br></pre></td></tr></table></figure><p>手动在grub命令行接口启动系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grub&gt; root (hd<span class="comment">#,#)</span></span><br><span class="line">grub&gt; kernel /vmlinuz-VERSION-RELEASE ro root=/dev/DEVICE</span><br><span class="line">grub&gt; initrd /initramfs-VERSION-RELEASE.img</span><br><span class="line">grub&gt; bootgrub legacy配置文件</span><br></pre></td></tr></table></figure><h2 id="配置文件-boot-grub-grub-conf-lt-etc-grub-conf"><a href="#配置文件-boot-grub-grub-conf-lt-etc-grub-conf" class="headerlink" title="配置文件: /boot/grub/grub.conf &lt;- /etc/grub.conf"></a>配置文件: /boot/grub/grub.conf &lt;- /etc/grub.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]#vim  /boot/grub/grub.conf</span><br><span class="line"># grub.conf generated by anaconda                                                                 </span><br><span class="line">#</span><br><span class="line"># Note that you do not have to rerun grub after making changes to this file</span><br><span class="line"># NOTICE:  You have a /boot partition.  This means that</span><br><span class="line">#          all kernel and initrd paths are relative to /boot/, eg.</span><br><span class="line">#          root (hd0,0)</span><br><span class="line">#          kernel /vmlinuz-version ro root=/dev/sda2</span><br><span class="line">#          initrd /initrd-[generic-]version.img</span><br><span class="line">#boot=/dev/sda</span><br><span class="line">default=0</span><br><span class="line">timeout=5</span><br><span class="line">splashimage=(hd0,0)/grub/splash.xpm.gz</span><br><span class="line">hiddenmenu</span><br><span class="line">title CentOS 6 (2.6.32-754.el6.x86_64)</span><br><span class="line">        root (hd0,0)</span><br><span class="line">        kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=UUID=d3df2aba-5cd3-47fe-8128-3445b87dba11 rd</span><br><span class="line">_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDT</span><br><span class="line">YPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</span><br><span class="line">        initrd /initramfs-2.6.32-754.el6.x86_64.img</span><br></pre></td></tr></table></figure><p>参数：<br>default=#: 设定默认启动的菜单项；落单项(title)编号从0开始<br>timeout=#：指定菜单项等待选项选择的时长<br>splashimage=(hd#,#)/PATH/XPM_FILE：菜单背景图片文件路径<br>password [–md5] STRING: 启动菜单编辑认证<br>hiddenmenu：隐藏菜单<br>title TITLE：定义菜单项“标题” , 可出现多次<br>root (hd#,#)：查找stage2及kernel文件所在设备分区；为grub的根<br>kernel /PATH/TO/VMLINUZ_FILE [PARAMETERS]：启动的内核<br>initrd /PATH/TO/INITRAMFS_FILE: 内核匹配的ramfs文件</p><h2 id="grub加密"><a href="#grub加密" class="headerlink" title="grub加密"></a>grub加密</h2><p>因为linux只要进入单用户模式下就很轻易的破解root口令，所以我们在/boot/grub/grub.conf文件里加上一行passwd.<br>password [–md5|–encrypted ] STRING: 启动选定的内核或操作系统时进行认证</p><ol><li><p>生成grub口令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grub-md5-crypt</span><br><span class="line">grub-crypt</span><br></pre></td></tr></table></figure></li><li><p>破解root口令</p><p>启动系统时，设置其运行级别1，进入单用户模式：</p><blockquote><p>编辑grub菜单(选定要编辑的title，而后使用a 或 e 命令)<br>在选定的kernel后附加1, s, S，single 都可以<br>在kernel所在行，键入“b” 命令</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;Centos6启动流程&quot;&gt;&lt;a href=&quot;#Centos6启动流
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="启动流程" scheme="http://yoursite.com/tags/%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    
      <category term="grub" scheme="http://yoursite.com/tags/grub/"/>
    
  </entry>
  
  <entry>
    <title>DNS服务</title>
    <link href="http://yoursite.com/2018/10/13/DNS%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/10/13/DNS服务/</id>
    <published>2018-10-12T16:00:00.000Z</published>
    <updated>2019-01-26T03:03:39.309Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>&ensp;&ensp;&ensp;&ensp;DNS(DomainName Server)是域名解析服务器，提供域名和IP地址之间一种转换机制，IP地址是平面结构不容易记住，DNS是层次化的结构，便于记忆</p><h1 id="DNS域名"><a href="#DNS域名" class="headerlink" title="DNS域名"></a>DNS域名</h1><ol><li>根域：根域位于层次结构的最顶部并用“.”来表示，全球有十三个根服务器，一个主根服务器，十二个辅助根服务器。  </li><li>顶级域:顶级域是按照组织或地理位置来划分的</li></ol><p>.gov：表示政府组织<br>.com：表示商业组织<br>.net：网络中心<br>.org：非营利性组织<br>.edu：教育部门  </p><p>.cn .uk .us：国家国别的代码，cn表示中国，uk表示英国，us表示美国  </p><ol start="3"><li>二级域：由国际域名组织为互联网中的个人或部门指定和登记的二级域，如51cto.com,baidu.com</li></ol><h1 id="DNS服务器类型"><a href="#DNS服务器类型" class="headerlink" title="DNS服务器类型"></a>DNS服务器类型</h1><ol><li>主DNS服务器(Master DNS）:管理和维护所负责解析的域内解析库的服务器  </li><li><p>辅助DNS服务器 (SlaveDNS)：从主服务器或从服务器“复制”（区域传输）解析库副本</p><blockquote><blockquote><p>序列号：解析库版本号，主服务器解析库变化时，其序列递增<br>刷新时间间隔：从服务器从主服务器请求同步解析的时间间隔<br>重试时间间隔：从服务器请求同步失败时，再次尝试时间间隔<br>过期时长：从服务器联系不到主服务器时，多久后停止服务  </p></blockquote></blockquote></li><li><p>缓存DNS服务器:没有自己的区域数据文件，只是帮助客户端向外部DNS请求查询，然后将查询的结果保存到它的缓存中。</p></li></ol><p>“通知”机制：主服务器解析库发生变化时，会主动通知从服务器  </p><p><code>一个域可以有拥有多个从服务器，但只能有一台主服务器</code><br><code>一台从服务器也可以从另一台从服务器那里获取数据</code><br>客户端检索本地数据文件的相关记录，客户端将无法自行解释的需求，通过53端口送给指定的DNS服务器  </p><h1 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h1><h2 id="DNS查询类型"><a href="#DNS查询类型" class="headerlink" title="DNS查询类型"></a>DNS查询类型</h2><p>递归查询<br>迭代查询  </p><h2 id="名称服务器：域内负责解析本域内的名称的主机"><a href="#名称服务器：域内负责解析本域内的名称的主机" class="headerlink" title="名称服务器：域内负责解析本域内的名称的主机"></a>名称服务器：域内负责解析本域内的名称的主机</h2><p>根服务器：13组服务器</p><h2 id="解析类型"><a href="#解析类型" class="headerlink" title="解析类型"></a>解析类型</h2><p>FQDN(Fully Qualified Domain Name)完全合格域名，由主机名+域名组成，如<a href="http://www.51cto.com" target="_blank" rel="noopener">www.51cto.com</a>  </p><blockquote><p>正向解析：FQDN–&gt;IP,把完全合格域名解析为IP地址<br>反向解析：IP–&gt;FQDN，把IP解析为完全合格域名。  </p></blockquote><p><code>注意：正反向解析是两个不同的名称空间，是两棵不同的解析树</code></p><h2 id="解析答案"><a href="#解析答案" class="headerlink" title="解析答案"></a>解析答案</h2><p>肯定答案：<br>否定答案：请求的条目不存在等原因导致无法返回结果<br>权威答案：<br>非权威答案  </p><h1 id="BIND"><a href="#BIND" class="headerlink" title="BIND"></a>BIND</h1><p>&ensp;&ensp;&ensp;&ensp;BIND是BerkeleyInternet Name Daemon的缩写,BIND是在Internet上应用最为广泛的DNS服务器，提供稳定与可信赖的下层结构以提供域名与IP地址的转换  </p><h2 id="Bind的相关软件包"><a href="#Bind的相关软件包" class="headerlink" title="Bind的相关软件包"></a>Bind的相关软件包</h2><p>bind-9.8.2-0.17.rc1.el6.x86_64提供域名服务的主程序和相关文件<br>bind-libs-9.8.2-0.17.rc1.el6.x86_64提供域名域名服务器所依赖的库文件<br>bind-utils-9.8.2-0.17.rc1.el6.x86_64提供了对DNS 服务的测试工具程序  </p><p>注：bind-chroot：安装上这个包之后让named进程有限的活动在/var/named/chroot/中防止黑客攻击导致服务器的崩溃。这里就不安装了，因为安装之后除了路径改变之后其他均不变。所以为了更好的熟悉过程就暂时不装了</p><p>直接用yum安装<br><code>yum install bind -y</code></p><h2 id="bind服务器"><a href="#bind服务器" class="headerlink" title="bind服务器"></a>bind服务器</h2><p>服务脚本和名称：/etc/rc.d/init.d/named /usr/lib/systemd/system/named.service<br>主配置文件：/etc/named.conf, /etc/named.rfc1912.zones, /etc/rndc.key<br>解析库文件：/var/named/ZONE_NAME.ZONE<br>注意：  </p><ol><li>一台物理服务器可同时为多个区域提供解析</li><li>必须要有根区域文件；named.ca</li><li>应该有两个（如果包括ipv6的，应该更多）实现localhost和本地回环地址的解析库</li></ol><h1 id="资源记录"><a href="#资源记录" class="headerlink" title="资源记录"></a>资源记录</h1><h2 id="资源记录定义的格式"><a href="#资源记录定义的格式" class="headerlink" title="资源记录定义的格式"></a>资源记录定义的格式</h2><p>语法：name [TTL] IN rr_type value<br>注意：  </p><ol><li>TTL可从全局继承  </li><li>@可用于引用当前区域的名字  </li><li>同一个名字可以通过多条记录定义多个不同的值；此时DNS服务器会以轮询方式响应  </li><li>同一个值也可能有多个不同的定义名字；通过多个不同的名字指向同一个值进行  </li><li>定义；此仅表示通过多个不同的名字可以找到同一个主机  </li></ol><h2 id="区域解析库：由众多RR组成"><a href="#区域解析库：由众多RR组成" class="headerlink" title="区域解析库：由众多RR组成"></a>区域解析库：由众多RR组成</h2><blockquote><p>资源记录：Resource Record, RR<br>记录类型：A, AAAA, PTR, SOA, NS, CNAME, MX  </p><blockquote><p>A：internet Address，作用，FQDN –&gt; IP<br>AAAA：FQDN –&gt; IPv6<br>PTR：PoinTeR，IP –&gt; FQDN<br>SOA：Start Of Authority，起始授权记录；一个区域解析库有且仅能有一个SOA记录，必须位于解析库的第一条记录<br>NS：Name Server，专用于标明当前区域的DNS服务器<br>CNAME ： Canonical Name，别名记录<br>MX：Mail eXchanger，邮件交换器  </p></blockquote></blockquote><h3 id="SQA"><a href="#SQA" class="headerlink" title="SQA"></a>SQA</h3><blockquote><p>name: 当前区域的名字，例如”magedu.com.”<br>value: 有多部分组成  </p><blockquote><p>当前区域的主DNS服务器的FQDN，也可以使用当前区域的名字；<br>当前区域管理员的邮箱地址；但地址中不能使用@符号，一般用.替换例：admin.magedu.com.<br>主从服务区域传输相关定义以及否定的答案的统一的TTL  </p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@       IN SOA  @ rname.invalid. (</span><br><span class="line">                                        0       ; serial    序列号</span><br><span class="line">                                        1D      ; refresh   刷新时间</span><br><span class="line">                                        1H      ; retry     重试时间</span><br><span class="line">                                        1W      ; expire    过期时间</span><br><span class="line">                                        3H )    ; minimum   否定答案的TTL值</span><br></pre></td></tr></table></figure><h3 id="NS记录"><a href="#NS记录" class="headerlink" title="NS记录"></a>NS记录</h3><ol><li>name: 当前区域的名字  </li><li>value: 当前区域的某DNS服务器的名字，例如ns.magedu.com.  </li><li>注意：一个区域可以有多个NS记录<br>例如：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">magedu.com. IN NS ns1.magedu.com.  </span><br><span class="line">magedu.com. IN NS ns2.magedu.com.</span><br></pre></td></tr></table></figure></li></ol><p><code>注意:</code><br>(1) 相邻的两个资源记录的name相同时，后续的可省略<br>(2) 对NS记录而言，任何一个ns记录后面的服务器名字，都应该在后续有一个A记录  </p><h3 id="MX记录"><a href="#MX记录" class="headerlink" title="MX记录"></a>MX记录</h3><p>name: 当前区域的名字<br>value: 当前区域的某邮件服务器(smtp服务器)的主机名<br>一个区域内，MX记录可有多个；但每个记录的value之前应该有一个数字(0-99)，表示此服务器的优先级；数字越小优先级越高<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">magedu.com. IN MX 10 mx1.magedu.com.  </span><br><span class="line">            IN MX 20 mx2.magedu.com.</span><br></pre></td></tr></table></figure></p><p>注意：对MX记录而言，任何一个MX记录后面的服务器名字，都应该在后续有一个A记录  </p><h3 id="A记录"><a href="#A记录" class="headerlink" title="A记录"></a>A记录</h3><p>1name: 某主机的FQDN<br>value: 主机名对应主机的IP地址<br>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www.magedu.com. IN A 1.1.1.1  </span><br><span class="line">www.magedu.com. IN A 2.2.2.2  </span><br><span class="line">mx1.magedu.com. IN A 3.3.3.3  </span><br><span class="line">mx2.magedu.com. IN A 4.4.4.4  </span><br><span class="line"><span class="variable">$GENERATE</span> 1-254 HOST$ A 1.2.3.$  </span><br><span class="line">*.magedu.com. IN A 5.5.5.5  </span><br><span class="line">magedu.com. IN A 6.6.6.6</span><br></pre></td></tr></table></figure></p><p><strong>避免用户写错名称时给错误答案，可通过泛域名解析进行解析至某特定地址</strong></p><h3 id="其它记录"><a href="#其它记录" class="headerlink" title="其它记录"></a>其它记录</h3><ol><li>AAAA:<br>name: FQDN<br>value: IPv6  </li><li>PTR:<br>name: IP，有特定格式，把IP地址反过来写，1.2.3.4，要写作4.3.2.1；而有特定后缀: <code>in-addr.arpa.</code>，所以完整写法为：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4.3.2.1.in-addr.arpa.</span><br><span class="line">value: FQDN</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.3.2.1.in-addr.arpa. IN PTR www.magedu.com.</span><br></pre></td></tr></table></figure><h2 id="别名记录"><a href="#别名记录" class="headerlink" title="别名记录"></a>别名记录</h2><p>CNAME：<br>name: 别名的FQDN<br>value: 真正名字的FQDN<br>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.magedu.com. IN CNAME websrv.magedu.com.</span><br></pre></td></tr></table></figure></p><h2 id="子域授权：每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权"><a href="#子域授权：每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权" class="headerlink" title="子域授权：每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权"></a>子域授权：每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权</h2><ol><li><p>类似根域授权tld：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.com. IN NS ns1.com.</span><br><span class="line">.com. IN NS ns2.com.</span><br><span class="line">ns1.com. IN A 2.2.2.1</span><br><span class="line">ns2.com. IN A 2.2.2.2</span><br></pre></td></tr></table></figure></li><li><p>magedu.com. 在.com的名称服务器上，解析库中添加资源记录  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">magedu.com. IN NS ns1.magedu.com.</span><br><span class="line">magedu.com. IN NS ns2.magedu.com.</span><br><span class="line">magedu.com. IN NS ns3.magedu.com.</span><br><span class="line">ns1.magedu.com. IN A 3.3.3.1</span><br><span class="line">ns2.magedu.com. IN A 3.3.3.2</span><br><span class="line">ns3.magedu.com. IN A 3.3.3.3</span><br></pre></td></tr></table></figure></li><li><p>glue record：粘合记录，父域授权子域的记录</p></li></ol><h1 id="DNS实验"><a href="#DNS实验" class="headerlink" title="DNS实验"></a>DNS实验</h1><ol><li><p>正向的主DNS服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#vim /etc/sysconfig/network-scripts/ifcfg-eth0 </span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.183.158</span><br><span class="line">PREFIX=24</span><br><span class="line">DNS1=192.168.183.148    </span><br><span class="line">[root@CentOS6 ~]<span class="comment">#service network restart</span></span><br><span class="line">Shutting down interface eth0:  Device state: 3 (disconnected)</span><br><span class="line">                                                           [  OK  ]</span><br><span class="line">Shutting down loopback interface:                          [  OK  ]</span><br><span class="line">Bringing up loopback interface:                            [  OK  ]</span><br><span class="line">Bringing up interface eth0:  Active connection state: activated</span><br><span class="line">Active connection path: /org/freedesktop/NetworkManager/ActiveConnection/2</span><br><span class="line">                                                           [  OK  ]</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat /etc/resolv.conf</span></span><br><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">domain localdomain</span><br><span class="line">search localdomain</span><br><span class="line">nameserver 192.168.183.148</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ping 114.114.114.114 </span></span><br><span class="line">PING 114.114.114.114 (114.114.114.114) 56(84) bytes of data.</span><br><span class="line">64 bytes from 114.114.114.114: icmp_seq=1 ttl=128 time=14.7 ms</span><br><span class="line">64 bytes from 114.114.114.114: icmp_seq=2 ttl=128 time=13.8 ms</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ping www.baidu.com   </span></span><br><span class="line">ping: unknown host www.baidu.com</span><br><span class="line"></span><br><span class="line">我们需要把192.168.183.148这个DNS服务器配置文件修改下</span><br><span class="line">[root@centos7 ~]<span class="comment">#vim /etc/named.conf</span></span><br><span class="line">//      listen-on port 53 &#123; localhost; &#125;;</span><br><span class="line">......省略.......</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br><span class="line">        allow-transfer  &#123;192.169.183.136;&#125;;     为后面搭建主备服务器准备的</span><br><span class="line">把这两行注释掉</span><br><span class="line">[root@centos7 ~]<span class="comment">#named-checkconf       检查语法是否有错误</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#rndc reload           修改文件生效</span></span><br><span class="line">server reload successful</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dig www.magedu.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; www.magedu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 55470</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 16</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.magedu.com.                        IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.magedu.com.         600     IN      A       101.200.188.230</span><br><span class="line">......省略.......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment">#vim /etc/named.rfc1912.zones </span></span><br><span class="line">......省略.......</span><br><span class="line">zone <span class="string">"localhost.localdomain"</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> master;</span><br><span class="line">        file <span class="string">"named.localhost"</span>;</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone <span class="string">"mmagedu.com"</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> master;</span><br><span class="line">        file <span class="string">"magedu.com.zone"</span>;                                                                   </span><br><span class="line">&#125;;</span><br><span class="line">......省略.......</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment">#cd /var/named/</span></span><br><span class="line"></span><br><span class="line">[root@centos7 named]<span class="comment">#cp -a  named.localhost magedu.com.zone</span></span><br><span class="line">    cp时要注意文件的属性</span><br><span class="line">[root@centos7 named]<span class="comment">#ll</span></span><br><span class="line">total 20</span><br><span class="line">drwxrwx--- 2 named named   23 Nov 24 14:19 data</span><br><span class="line">drwxrwx--- 2 named named   60 Nov 24 14:20 dynamic</span><br><span class="line">-rw-r----- 1 root  named  152 Jun 21  2007 magedu.com.zone</span><br><span class="line">-rw-r----- 1 root  named 2281 May 22  2017 named.ca</span><br><span class="line">-rw-r----- 1 root  named  152 Dec 15  2009 named.empty</span><br><span class="line">-rw-r----- 1 root  named  152 Jun 21  2007 named.localhost</span><br><span class="line">-rw-r----- 1 root  named  168 Dec 15  2009 named.loopback</span><br><span class="line">drwxrwx--- 2 named named    6 Apr 13  2018 slaves</span><br><span class="line">[root@centos7 named]<span class="comment">#vim magedu.com.zone </span></span><br><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@       IN SOA  dns1  admin.magedu.com. (</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      dns1</span><br><span class="line">dns1    A       192.168.183.148                                                                   </span><br><span class="line">www      CNAME   websrv</span><br><span class="line">websrv   A      6.6.6.6</span><br><span class="line">websrv   A      7.7.7.7</span><br><span class="line">websrv   A      8.8.8.8</span><br><span class="line">@        A      6.6.6.6             泛域名解析</span><br><span class="line">*        A      6.6.6.6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 named]<span class="comment">#rndc reload</span></span><br><span class="line">server reload successful</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dig www.magedu.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; www.magedu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 20887</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 1, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.magedu.com.                        IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.magedu.com.         86400   IN      CNAME   websrv.magedu.com.</span><br><span class="line">websrv.magedu.com.      86400   IN      A       6.6.6.6</span><br><span class="line">websrv.magedu.com.      86400   IN      A       7.7.7.7</span><br><span class="line">websrv.magedu.com.      86400   IN      A       8.8.8.8</span><br></pre></td></tr></table></figure></li><li><p>反向的主DNS服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#vim /etc/named.rfc1912.zones</span></span><br><span class="line">zone <span class="string">"183.168.192.in-addr.arpa"</span> &#123;           </span><br><span class="line">        <span class="built_in">type</span> master;                                  </span><br><span class="line">        file <span class="string">"192.168.183.158.zone"</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment">#cd /var/named/</span></span><br><span class="line">[root@centos7 named]<span class="comment">#vim 192.168.183.zone</span></span><br><span class="line"><span class="variable">$TTL</span> 86400</span><br><span class="line">@ IN SOA dnsserver admin.magedu.com. (                </span><br><span class="line">                                        20181124;</span><br><span class="line">                                        3H;</span><br><span class="line">                                        10M;</span><br><span class="line">                                        1D;</span><br><span class="line">                                        1H);</span><br><span class="line">     NS dnsserver</span><br><span class="line">dnsserver A   192.168.183.148</span><br><span class="line">148     PTR     dnsserver.magedu.com.</span><br><span class="line">100     PTR     www.magedu.com.</span><br><span class="line">120     PTR     blog.magedu.com</span><br><span class="line">&lt;92.168.183.zone<span class="string">" 12L, 227C written</span></span><br><span class="line"><span class="string">[root@centos7 named]#named-checkconf</span></span><br><span class="line"><span class="string">[root@centos7 named]#named-checkzone 183.168.192.in-addr.arpa 192.168.183.zone</span></span><br><span class="line"><span class="string">zone 183.168.192.in-addr.arpa/IN: loaded serial 20181124</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">[root@centos7 named]#rndc reload</span></span><br><span class="line"><span class="string">server reload successful</span></span><br><span class="line"><span class="string">[root@CentOS6 ~]#dig -x 192.168.183.148</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; -x 192.168.183.148</span></span><br><span class="line"><span class="string">;; global options: +cmd</span></span><br><span class="line"><span class="string">;; Got answer:</span></span><br><span class="line"><span class="string">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 53616</span></span><br><span class="line"><span class="string">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;148.183.168.192.in-addr.arpa.  IN      PTR</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">148.183.168.192.in-addr.arpa. 86400 IN  PTR     dnsserver.magedu.com.</span></span><br><span class="line"><span class="string">......省略.......</span></span><br></pre></td></tr></table></figure></li><li><p>DNS冗错(DNS主备服务器的搭建)<br>再找一台主机(192.168.183.137)搭建DNS服务器<br>安装bind yum install bind -y<br>修改配置文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#vim /etc/named.conf</span></span><br><span class="line">......省略.......</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;        //注释掉</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">"/var/named"</span>;</span><br><span class="line">        dump-file       <span class="string">"/var/named/data/cache_dump.db"</span>;</span><br><span class="line">        statistics-file <span class="string">"/var/named/data/named_stats.txt"</span>;</span><br><span class="line">        memstatistics-file <span class="string">"/var/named/data/named_mem_stats.txt"</span>;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;         //注释掉</span><br><span class="line">        allow-transfer  &#123; none;&#125;;</span><br><span class="line">......省略.......</span><br><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/named.rfc1912.zones</span></span><br><span class="line">zone <span class="string">"magedu.com"</span> &#123;</span><br><span class="line">        <span class="built_in">type</span> slave;</span><br><span class="line">        master &#123;192.168.183.148;&#125;;</span><br><span class="line">        file <span class="string">"slaves/magedu.com.zone.slave"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">[root@centos7 ~]<span class="comment">#vim /var/named/magedu.com.zone     //主服务器</span></span><br><span class="line">       NS      dns1</span><br><span class="line">        NS      dns2</span><br><span class="line">dns1    A       192.168.183.148</span><br><span class="line">dns2    A       192.168.183.137                                            </span><br><span class="line">[root@centos7 ~]<span class="comment">#rndc reload</span></span><br><span class="line">server reload successful</span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl start named</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cd /var/named/slaves/</span></span><br><span class="line">[root@centos7 slaves]<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 named named 524 Nov 24 21:20 magedu.com.zone.slave</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dig www.magedu.com   </span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; www.magedu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 33539</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 3, ADDITIONAL: 3</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.magedu.com.                        IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.magedu.com.         86400   IN      CNAME   websrv.magedu.com.</span><br><span class="line">websrv.magedu.com.      86400   IN      A       6.6.6.6</span><br><span class="line">websrv.magedu.com.      86400   IN      A       7.7.7.7</span><br><span class="line">websrv.magedu.com.      86400   IN      A       8.8.8.8</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">magedu.com.             86400   IN      NS      dns1.magedu.com.</span><br><span class="line">magedu.com.             86400   IN      NS      dns2.magedu.com.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">dns1.magedu.com.        86400   IN      A       192.168.183.148</span><br><span class="line">dns2.magedu.com.        86400   IN      A       192.168.183.137</span><br><span class="line"></span><br><span class="line">;; Query time: 6 msec</span><br><span class="line">;; SERVER: 192.168.183.148<span class="comment">#53(192.168.183.148)           主服务器</span></span><br><span class="line">;; WHEN: Sat Nov 24 20:43:12 2018</span><br><span class="line">;; MSG SIZE  rcvd: 206</span><br><span class="line"></span><br><span class="line">把主服务器网线掐断</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dig www.magedu.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; www.magedu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 55691</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 3, ADDITIONAL: 3</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.magedu.com.                        IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.magedu.com.         86400   IN      CNAME   websrv.magedu.com.</span><br><span class="line">websrv.magedu.com.      86400   IN      A       7.7.7.7</span><br><span class="line">websrv.magedu.com.      86400   IN      A       8.8.8.8</span><br><span class="line">websrv.magedu.com.      86400   IN      A       6.6.6.6</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">magedu.com.             86400   IN      NS      dns2.magedu.com.</span><br><span class="line">magedu.com.             86400   IN      NS      dns1.magedu.com.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">dns1.magedu.com.        86400   IN      A       192.168.183.148</span><br><span class="line">dns2.magedu.com.        86400   IN      A       192.168.183.137</span><br><span class="line"></span><br><span class="line">;; Query time: 5 msec</span><br><span class="line">;; SERVER: 192.168.183.136<span class="comment">#53(192.168.183.137)        备用服务器</span></span><br><span class="line">;; WHEN: Sat Nov 24 20:48:16 2018</span><br><span class="line">;; MSG SIZE  rcvd: 206</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;DNS(DomainName
      
    
    </summary>
    
      <category term="dns" scheme="http://yoursite.com/categories/dns/"/>
    
    
      <category term="dns" scheme="http://yoursite.com/tags/dns/"/>
    
      <category term="解析" scheme="http://yoursite.com/tags/%E8%A7%A3%E6%9E%90/"/>
    
      <category term="资源记录" scheme="http://yoursite.com/tags/%E8%B5%84%E6%BA%90%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>linux kernel</title>
    <link href="http://yoursite.com/2018/10/06/linux%20kernel/"/>
    <id>http://yoursite.com/2018/10/06/linux kernel/</id>
    <published>2018-10-05T16:00:00.000Z</published>
    <updated>2019-01-24T09:00:25.519Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="kernel-introduce"><a href="#kernel-introduce" class="headerlink" title="kernel introduce"></a>kernel introduce</h1><p>    内核是操作系统的核心，掌控着所有硬件设备的控制权。也就是说，你所希望计算机帮你完成的各项工作，都需要通过内核的帮助才能完成。内核可以分为以下几种设计流派：</p><blockquote><p>单内核(monolithic kernel)： Linux<br>把所有功能集成于同一个程序<br>微内核(micro kernel)：Windows, Solaris<br>每种功能使用一个单独子系统实现内核</p></blockquote><ul><li><p>Linux内核特点：</p><blockquote><p>支持模块化：.ko（内核对象)  </p><blockquote><p>如：文件系统，硬件驱动，网络协议等  </p></blockquote></blockquote><blockquote><p>支持内核模块的动态装载和卸载</p></blockquote></li><li><p>组成部分：</p><blockquote><p>核心文件：/boot/vmlinuz-VERSION-release<br>ramdisk：辅助的伪根系统  </p><blockquote><p>CentOS 5: /boot/initrd-VERSION-release.img<br>CentOS 6,7: /boot/initramfs-VERSION-release.img</p></blockquote></blockquote></li></ul><blockquote><p>模块文件：/lib/modules/VERSION-release</p></blockquote><ul><li>kernel</li></ul><blockquote><p>自身初始化<br>检测可识别到的所有硬件设备<br>加载硬件驱动程序（借助于ramdisk加载驱动）<br>以只读方式挂载根文件系统<br>运行用户空间的第一个应用程序：/sbin/init启动流程</p></blockquote><h1 id="ramdisk："><a href="#ramdisk：" class="headerlink" title="ramdisk："></a>ramdisk：</h1><p>内核中的特性之一：使用缓冲和缓存来加速对磁盘上的文件访问，并加载相应的硬件驱动</p><p>CentOS 5: initrd</p><blockquote><p>工具程序：mkinitrd<br>CentOS 6，7: initramfs<br>工具程序：mkinitrd, dracut</p></blockquote><p>ramdisk文件的制作</p><ol><li><p>mkinitrd命令<br> 为当前正在使用的内核重新制作ramdisk文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkinitrd /boot/initramfs-$(uname -r).img $(uname -r)</span><br></pre></td></tr></table></figure></li><li><p>dracut命令<br> 为当前正在使用的内核重新制作ramdisk文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dracut /boot/initramfs-$(uname -r).img $(uname -r)</span><br></pre></td></tr></table></figure></li></ol><h1 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h1><h2 id="uname命令"><a href="#uname命令" class="headerlink" title="uname命令"></a>uname命令</h2><p>uname - print system information<br>uname [OPTION]…<br>-r: 显示VERSION-RELEASE<br>-n: 显示主机名<br>-a:显示所有信息  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#uname -r</span></span><br><span class="line">2.6.32-754.el6.x86_64</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#uname -n</span></span><br><span class="line">CentOS6.localdomain</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#uname -a</span></span><br><span class="line">Linux CentOS6.localdomain 2.6.32-754.el6.x86_64 <span class="comment">#1 SMP Tue Jun 19 21:26:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p>uname -a 现实的内容依次为：</p><ul><li>Linux 操作系统类型</li><li>CentOS6.localdomain 操作系统的主机名</li><li>2.6.32-754.el6.x86_64 内核版本信息</li><li>#1 SMP Tue Jun 19 21:26:04 UTC 2018 内核的编译日期</li><li>x86_64 x86_64 x86_64 这三组分别是：操作系统版本、处理器类型、硬件平台</li><li>GNU/Linux 操作系统名称</li></ul><h1 id="proc目录"><a href="#proc目录" class="headerlink" title="/proc目录"></a>/proc目录</h1><p>该目录是系统与内核交互的一个伪文件系统接口，内核把自己内部状态信息及统计信息，以及可配置参数通过proc伪文件系统加以输出。</p><p>参数</p><blockquote><p>只读：输出信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#cat /proc/sys/net/ipv4/icmp_echo_ignore_all </span></span><br><span class="line">0</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ping 192.168.183.157</span></span><br><span class="line">PING 192.168.183.157 (192.168.183.157) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.183.157: icmp_seq=1 ttl=64 time=0.074 ms</span><br><span class="line">64 bytes from 192.168.183.157: icmp_seq=2 ttl=64 time=0.068 ms</span><br><span class="line">64 bytes from 192.168.183.157: icmp_seq=3 ttl=64 time=0.069 ms</span><br></pre></td></tr></table></figure><p>可写：可接受用户指定“新值”来实现对内核某功能或特性的配置,不支持编辑器编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat /proc/sys/net/ipv4/icmp_echo_ignore_all</span></span><br><span class="line">1</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ping -wl -c1 192.168.183.157</span></span><br><span class="line">PING 192.168.183.157 (192.168.183.157) 56(84) bytes of data.</span><br><span class="line"> </span><br><span class="line">--- 192.168.183.157 ping statistics ---</span><br><span class="line">1 packets transmitted, 0 received, 100% packet loss, time 10001ms</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/sys</span><br></pre></td></tr></table></figure><ol><li><p>echo命令通过重定向方式也可以修改大多数参数的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> “VALUE” &gt; /proc/sys/path/to/parameter</span><br><span class="line"><span class="built_in">echo</span> “websrv” &gt; /proc/sys/kernel/hostname</span><br></pre></td></tr></table></figure></li><li><p>sysctl命令用于查看或设定此目录中诸多参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w path.to.parameter=VALUE</span><br><span class="line">sysctl -w kernel.hostname=mail.magedu.com</span><br></pre></td></tr></table></figure></li></ol><h1 id="sysctl命令"><a href="#sysctl命令" class="headerlink" title="sysctl命令"></a>sysctl命令</h1><p>默认配置文件：/etc/sysctl.conf</p><ol><li><p>设置某参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w parameter=VALUE</span><br></pre></td></tr></table></figure></li><li><p>通过读取配置文件设置参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p [/path/to/conf_file]</span><br></pre></td></tr></table></figure></li><li><p>查看所有生效参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -a</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#sysctl -a |less</span></span><br><span class="line">kernel.sched_child_runs_first = 0</span><br><span class="line">kernel.sched_min_granularity_ns = 2000000</span><br><span class="line">kernel.sched_latency_ns = 10000000</span><br><span class="line">kernel.sched_wakeup_granularity_ns = 2000000</span><br><span class="line">kernel.sched_tunable_scaling = 1</span><br></pre></td></tr></table></figure></li><li><p>常用的几个参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward</span><br><span class="line">net.ipv4.icmp_echo_ignore_all</span><br><span class="line">vm.drop_caches</span><br></pre></td></tr></table></figure></li></ol><h1 id="sys目录"><a href="#sys目录" class="headerlink" title="/sys目录"></a>/sys目录</h1><p>&ensp;&ensp;&ensp;&ensp;sysfs：为用户使用的伪文件系统，输出内核识别出的各硬件设备的相关属性信息，也有内核对硬件特性的设定信息；有些参数是可以修改的，用于调整硬件工作特性<br>udev通过此路径下输出的信息动态为各设备创建所需要设备文件，udev是运行用户空间程序<br>专用工具：udevadmin, hotplug<br>udev为设备创建设备文件时，会读取其事先定义好的规则文件，一般在/etc/udev/rules.d及/usr/lib/udev/rules.d目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">网卡</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat /etc/udev/rules.d/70-persistent-net.rules</span></span><br><span class="line"><span class="comment"># This file was automatically generated by the /lib/udev/write_net_rules</span></span><br><span class="line"><span class="comment"># program, run by the persistent-net-generator.rules rules file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can modify it, as long as you keep each rule on a single</span></span><br><span class="line"><span class="comment"># line, and change only the value of the NAME= key.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PCI device 0x8086:0x100f (e1000)</span></span><br><span class="line">SUBSYSTEM==<span class="string">"net"</span>, ACTION==<span class="string">"add"</span>, DRIVERS==<span class="string">"?*"</span>, ATTR&#123;address&#125;==<span class="string">"00:0c:29:bf:4b:56"</span>, ATTR&#123;<span class="built_in">type</span>&#125;==<span class="string">"1"</span>, KERNEL==<span class="string">"eth*"</span>, NAME=<span class="string">"eth0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PCI device 0x8086:0x100f (e1000)</span></span><br><span class="line">SUBSYSTEM==<span class="string">"net"</span>, ACTION==<span class="string">"add"</span>, DRIVERS==<span class="string">"?*"</span>, ATTR&#123;address&#125;==<span class="string">"00:0c:29:bf:4b:60"</span>, ATTR&#123;<span class="built_in">type</span>&#125;==<span class="string">"1"</span>, KERNEL==<span class="string">"eth*"</span>, NAME=<span class="string">"eth1"</span></span><br></pre></td></tr></table></figure><h1 id="内核模块管理"><a href="#内核模块管理" class="headerlink" title="内核模块管理"></a>内核模块管理</h1><h2 id="查看当前内核已经装载的模块-lsmod"><a href="#查看当前内核已经装载的模块-lsmod" class="headerlink" title="查看当前内核已经装载的模块 lsmod"></a>查看当前内核已经装载的模块 lsmod</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#lsmod</span></span><br><span class="line">Module                  Size  Used by</span><br><span class="line">rfcomm                 71207  4 </span><br><span class="line">sco                    17589  2 </span><br><span class="line">bridge                 85770  0 </span><br><span class="line">bnep                   16370  2 </span><br><span class="line">l2cap                  54498  16 rfcomm,bnep</span><br><span class="line">autofs4                27000  3 </span><br><span class="line">8021q                  20507  0 </span><br><span class="line">garp                    7184  1 8021q</span><br><span class="line">stp                     2218  2 bridge,garp</span><br><span class="line">llc                     5450  3 bridge,garp,stp</span><br><span class="line">ipt_REJECT              2383  2 </span><br><span class="line">nf_conntrack_ipv4       9218  2 </span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure><h2 id="查看内核模块的文件-proc-modules"><a href="#查看内核模块的文件-proc-modules" class="headerlink" title="查看内核模块的文件/proc/modules"></a>查看内核模块的文件/proc/modules</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#cat /proc/modules </span></span><br><span class="line">rfcomm 71207 4 - Live 0xffffffffa05fd000</span><br><span class="line">sco 17589 2 - Live 0xffffffffa05f3000</span><br><span class="line">bridge 85770 0 - Live 0xffffffffa05d5000</span><br><span class="line">bnep 16370 2 - Live 0xffffffffa05cd000</span><br><span class="line">l2cap 54498 16 rfcomm,bnep, Live 0xffffffffa05b9000</span><br><span class="line">autofs4 27000 3 - Live 0xffffffffa05ad000</span><br><span class="line">8021q 20507 0 - Live 0xffffffffa05a2000</span><br><span class="line">garp 7184 1 8021q, Live 0xffffffffa059c000</span><br><span class="line">stp 2218 2 bridge,garp, Live 0xffffffffa0598000</span><br><span class="line">llc 5450 3 bridge,garp,stp, Live 0xffffffffa0592000</span><br><span class="line">ipt_REJECT 2383 2 - Live 0xffffffffa0567000</span><br><span class="line">nf_conntrack_ipv4 9218 2 - Live 0xffffffffa0560000</span><br><span class="line">nf_defrag_ipv4 1483 1 nf_conntrack_ipv4, Live 0xffffffffa055c000</span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure><h2 id="查看模块的详细描述信息-modinfo"><a href="#查看模块的详细描述信息-modinfo" class="headerlink" title="查看模块的详细描述信息 modinfo"></a>查看模块的详细描述信息 modinfo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modinfo [ -k kernel ][ modulename|filename… ]</span><br></pre></td></tr></table></figure><p>​    -n：只显示模块文件路径<br>​    -p：显示模块参数<br>​    -a：作者<br>​    -d：描述</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#modinfo xfs</span></span><br><span class="line">filename:       /lib/modules/2.6.32-754.el6.x86_64/kernel/fs/xfs/xfs.ko</span><br><span class="line">license:        GPL</span><br><span class="line">description:    SGI XFS with ACLs, security attributes, large block/inode numbers, no debug enabled</span><br><span class="line">author:         Silicon Graphics, Inc.</span><br><span class="line">retpoline:      Y</span><br><span class="line">srcversion:     032C69ECC93FCBD7B47F691</span><br><span class="line">depends:        exportfs</span><br><span class="line">vermagic:       2.6.32-754.el6.x86_64 SMP mod_unload modversions</span><br></pre></td></tr></table></figure><h2 id="内核模块装载或卸载-modprobe"><a href="#内核模块装载或卸载-modprobe" class="headerlink" title="内核模块装载或卸载 modprobe"></a>内核模块装载或卸载 modprobe</h2><p>装载模块：modprobe MOD_NAME (注意这里会自动解决模块间的依赖关系)<br>卸载模块：modprobe -r modulename</p><h2 id="手动实现模块文件的装载和卸载"><a href="#手动实现模块文件的装载和卸载" class="headerlink" title="手动实现模块文件的装载和卸载"></a>手动实现模块文件的装载和卸载</h2><p>insmod命令：insmod /path/to/module_file(注意这里不会自动解决模块间的依赖关系)<br>rmmod命令:rmmod MOD_NAME</p><h1 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><ol><li><p>准备好开发环境</p></li><li><p>获取目标主机上硬件设备的相关信息</p></li><li><p>获取目标主机系统功能的相关信息<br> 例如:需要启用相应的文件系统</p></li><li><p>获取内核源代码包</p><p><a href="http://www.kernel.org" target="_blank" rel="noopener">www.kernel.org</a></p><h2 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h2></li><li><p>包组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Development Tools</span><br><span class="line">ncurses-devel</span><br><span class="line">elfutils-libelf-devel</span><br><span class="line">openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>目标主机硬件设备相关信息</p></li></ol><p>CPU：</p><blockquote><p>cat /proc/cpuinfo<br>x86info -a<br>lscpu</p></blockquote><p>PCI设备：</p><blockquote><p>lspci</p><blockquote><p>-v<br>-vv</p></blockquote></blockquote><blockquote><p>lsusb</p><blockquote><p>-v<br>-vv</p></blockquote></blockquote><blockquote><p>lsblk 块设备</p></blockquote><p>3.了解全部硬件设备信息<br>hal-device：CentOS 6</p><h2 id="内核编译安装系统"><a href="#内核编译安装系统" class="headerlink" title="内核编译安装系统"></a>内核编译安装系统</h2><ul><li><p>安装开发包组</p></li><li><p>下载源码文件</p></li><li>.config：准备文本配置文件</li><li>make menuconfig：配置内核选项</li><li>make [-j #]</li><li>make modules_install：安装模块</li><li>make install: 安装内核相关文件</li><li>​安装bzImage为/boot/vmlinuz-VERSION-RELEASE</li><li>​生成initramfs文件</li><li>​编辑grub的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">编译安装内核示例</span><br><span class="line">tar xf linux-3.10.67.tar.xz -C /usr/src</span><br><span class="line"><span class="built_in">cd</span> /usr/src/linux-3.10.67 </span><br><span class="line">cp /boot/config-$(uname -r) ./.config</span><br><span class="line">make <span class="built_in">help</span>  </span><br><span class="line">make menuconfig  </span><br><span class="line">make -j 2  </span><br><span class="line">make modules_install</span><br><span class="line">make install  </span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="卸载内核"><a href="#卸载内核" class="headerlink" title="卸载内核"></a>卸载内核</h2><ul><li>make clean：清理大多数编译生成的文件，但会保留config文件等</li><li>make mrproper: 清理所有编译生成的文件、 config及某些备份文件</li><li>make distclean：mrproper、清理patches以及编辑器备份文件卸载内核</li><li>删除/lib/modules/目录下不需要的内核库文件</li><li>删除/usr/src/linux/目录下不需要的内核源码</li><li>删除/boot目录下启动的内核和内核映像文件</li><li>更改grub的配置文件，删除不需要的内核启动列表</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;kernel-introduce&quot;&gt;&lt;a href=&quot;#kerne
      
    
    </summary>
    
      <category term="内核" scheme="http://yoursite.com/categories/%E5%86%85%E6%A0%B8/"/>
    
    
      <category term="kernel" scheme="http://yoursite.com/tags/kernel/"/>
    
      <category term="编译" scheme="http://yoursite.com/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>进程和计划任务</title>
    <link href="http://yoursite.com/2018/09/29/%E8%BF%9B%E7%A8%8B%E5%92%8C%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/09/29/进程和计划任务/</id>
    <published>2018-09-28T16:00:00.000Z</published>
    <updated>2019-01-26T02:58:26.761Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="一、进程的相关概念"><a href="#一、进程的相关概念" class="headerlink" title="一、进程的相关概念"></a>一、进程的相关概念</h1><h2 id="1-1、相关定义"><a href="#1-1、相关定义" class="headerlink" title="1.1、相关定义"></a>1.1、相关定义</h2><ul><li>内核的功用：进程管理、文件系统、网络功能、内存管理、驱动程序、 安全功能等</li></ul><ul><li>通俗的来说<strong>进程</strong>是运行起来的程序。唯一标识进程的是<strong>进程描述符（PID）</strong>,在linux内核中是通过task_struck和task_list来定义和管理进程的 ；</li></ul><ul><li><p>进程Process: 运行中的程序的一个副本，是被载入内存的一个指令集合</p><p>  ​    进程ID（Process ID，PID）号码被用来标记各个进程</p><p>  ​    UID、 GID、和SELinux语境决定对文件系统的存取和访问权限</p><p>  ​    通常从执行进程的用户来继承</p><p>  ​    存在生命周期</p></li><li><p>task struct：Linux内核存储进程信息的数据结构格式</p></li></ul><ul><li>task list：多个任务的的task struct组成的链表</li></ul><h2 id="1-2、进程创建"><a href="#1-2、进程创建" class="headerlink" title="1.2、进程创建"></a>1.2、进程创建</h2><ul><li><p>init：第一个进程</p></li><li><p>进程：都由其父进程创建，父子关系，CoW（写实复制）</p><p>  ​        fork(), clone()</p></li><li><p>创建过程</p></li></ul><p>1.系统首先以fock的方式复制（cow）一个与父进程相同的进程，这个进程与父进程唯一的差别就是PID不同，但是这个进程还会多一个PPID的参数，PPID就是父进程的程序识别码PID；</p><p> 2.然后新产生的进程开始加载实际要运行的程序进行执行。</p><h2 id="1-3、进程的基本状态"><a href="#1-3、进程的基本状态" class="headerlink" title="1.3、进程的基本状态"></a>1.3、进程的基本状态</h2><ol><li>创建状态：进程在创建时需要申请一个空白PCB(process control block进程控制块)，向其中填写控制和管理进程的信息，完成资源分配。如果创建工作无法完成，比如资源无法满足，就无法被调度运行，把此时进程所处状态称为创建状态</li><li>就绪状态：进程已准备好，已分配到所需资源，只要分配到CPU就能够立即运行</li><li>执行状态：进程处于就绪状态被调度后，进程进入执行状态</li><li>阻塞状态：正在执行的进程由于某些事件（I/O请求，申请缓存区失败）而暂时无法运行，进程受到阻塞。在满足请求时进入就绪状态等待系统调用</li><li>终止状态：进程结束，或出现错误，或被系统终止，进入终止状态。无法再执行</li></ol><h3 id="1-3-1、状态之间转换六种情况"><a href="#1-3-1、状态之间转换六种情况" class="headerlink" title="1.3.1、状态之间转换六种情况"></a>1.3.1、状态之间转换六种情况</h3><p>运行——&gt;就绪：1、主要是进程占用CPU的时间过长，而系统分配给该进程占用CPU的时间是有限的；</p><p>​                 2、在采用抢先式优先级调度算法的系统中,当有更高优先级的进程要运行时，该进程就被迫让出CPU，该进程便由执行状态转变为就绪状态</p><p>就绪——&gt;运行：运行的进程的时间片用完，调度就转到就绪队列中选择合适的进程分配CPU</p><p>运行——&gt;阻塞：正在执行的进程因发生某等待事件而无法执行，则进程由执行状态变为阻塞状态，如发生了I/O请求</p><p>阻塞——&gt;就绪:进程所等待的事件已经发生，就进入就绪队列</p><p><strong>以下两种状态是不可能发生的：</strong></p><p>阻塞——&gt;运行：即使给阻塞进程分配CPU，也无法执行，操作系统在进行调度时不会从阻塞队列进行挑选，而是从就绪队列中选取</p><p>就绪——&gt;阻塞：就绪态根本就没有执行，谈不上进入阻塞态</p><h2 id="1-4、进程优先级"><a href="#1-4、进程优先级" class="headerlink" title="1.4、进程优先级"></a>1.4、进程优先级</h2><ul><li><p>进程优先级：</p><p>  ​    系统优先级：数字越小，优先级越高</p><p>  ​        0-139（CentOS4,5）</p><p>  ​            各有140个运行队列和过期队列</p><p>  ​        0-98，99（CentOS6）</p><p>  ​    实时优先级: 99-0 值最大优先级最高</p></li><li><p>nice值：-20到19，对应系统优先级100-139或99</p></li><li><p>Big O：时间复杂度，用时和规模的关系<br>  ​    O(1), O(logn), O(n)线性, O(n^2)抛物线, O(2^n)</p></li></ul><h2 id="1-5、进程内存"><a href="#1-5、进程内存" class="headerlink" title="1.5、进程内存"></a>1.5、进程内存</h2><ul><li><p>Page Frame: 页框，用存储页面数据，存储Page 4k</p></li><li><p>LRU：Least Recently Used 近期最少使用算法,释放内存</p></li><li><p>物理地址空间和线性地址空间</p><p>  ​    MMU：Memory Management Unit负责转换线性和物理地址</p><p>  ​    TLB：Translation Lookaside Buffer</p><p>  ​        翻译后备缓冲器,用于保存虚拟地址和物理地址映射关系的缓存</p></li></ul><h2 id="1-6、IPC：进程间通信（Inter-Process-Communication）"><a href="#1-6、IPC：进程间通信（Inter-Process-Communication）" class="headerlink" title="1.6、IPC：进程间通信（Inter Process Communication）"></a>1.6、IPC：进程间通信（Inter Process Communication）</h2><p>&ensp;&ensp;&ensp;&ensp;在计算机网络体系中，主机与主机之间的通信，实质上是主机进程与主机进程之间的通信，也就是进程间的通信；</p><ul><li><p>同一主机：signal:信号</p><p>  ​            shm: shared memory</p><p>  ​           semaphore:信号量，一种计数器</p></li><li><p>​不同主机：socket: IP和端口号</p><p>  ​           RPC: remote procedure call</p><p>  ​           MQ：消息队列，Kafka，ActiveMQ</p></li></ul><p>## </p><h2 id="1-7、Linux内核：抢占式多任务"><a href="#1-7、Linux内核：抢占式多任务" class="headerlink" title="1.7、Linux内核：抢占式多任务"></a>1.7、Linux内核：抢占式多任务</h2><h2 id="1-8、进程类型"><a href="#1-8、进程类型" class="headerlink" title="1.8、进程类型"></a>1.8、进程类型</h2><ul><li>守护进程: daemon,在系统引导过程中启动的进程，和终端无关进程</li><li>​前台进程：跟终端相关，通过终端启动的进程</li></ul><p>​<strong>注意：两者可相互转化</strong> </p><h2 id="1-9、进程状态"><a href="#1-9、进程状态" class="headerlink" title="1.9、进程状态"></a>1.9、进程状态</h2><ul><li><p>​    运行态：running</p></li><li><p>​    就绪态：ready</p></li><li><p>​    睡眠态：</p><p>  ​        可中断：interruptable</p><p>  ​        不可中断：uninterruptable</p></li><li><p>​    停止态：stopped,暂停于内存，但不会被调度，除非手动启动</p></li><li><p>​    僵死态：zombie，结束进程，父进程结束前，子进程不关闭</p></li></ul><h2 id="1-10、进程的分类"><a href="#1-10、进程的分类" class="headerlink" title="1.10、进程的分类"></a>1.10、进程的分类</h2><ul><li>CPU-Bound：CPU密集型，非交互</li><li>IO-Bound：IO密集型，交互</li></ul><h1 id="二、进程和线程的关系"><a href="#二、进程和线程的关系" class="headerlink" title="二、进程和线程的关系"></a>二、进程和线程的关系</h1><p>&ensp;&ensp;&ensp;&ensp;进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对应用的并发性。<br>进程和线程的区别在于： </p><p>1、一个程序至少有一个进程,一个进程至少有一个线程. 线程的划分尺度小于进程，使得多线程程序的并发性高。另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。<br>2、线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。<br>3、从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。<br>4、进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位.<br>​    线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源. 一个线程可以创建和撤销另一个线程;同一个进程中的多个线程之间可以并发执行.</p><h1 id="三、系统管理工具"><a href="#三、系统管理工具" class="headerlink" title="三、系统管理工具"></a>三、系统管理工具</h1><p>Linux系统状态的查看及管理工具</p><p>pstree, ps, pidof, pgrep, top, htop,glance, pmap, vmstat, dstat, kill, pkill, job, bg, fg, nohup</p><h2 id="3-1、pstree命令"><a href="#3-1、pstree命令" class="headerlink" title="3.1、pstree命令"></a>3.1、pstree命令</h2><p>display a tree of processes（显示查看进程树）</p><p>以下为CentOS 6 和 CentOS 7 的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@CentOS6 ~]<span class="comment"># pstree</span></span><br><span class="line">init─┬─abrtd           <span class="comment">#可以看到都是有init生成的</span></span><br><span class="line">     ├─acpid</span><br><span class="line">     ├─atd</span><br><span class="line">     ├─auditd───&#123;auditd&#125;</span><br><span class="line">     ├─automount───4*[&#123;automount&#125;]</span><br><span class="line">     ├─bonobo-activati───&#123;bonobo-activat&#125;</span><br><span class="line">     ├─clock-applet</span><br><span class="line">、、、、</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#pstree</span></span><br><span class="line">systemd─┬─ModemManager───2*[&#123;ModemManager&#125;]<span class="comment">#可以看到都是有systemd生成的</span></span><br><span class="line">        ├─NetworkManager─┬─dhclient</span><br><span class="line">        │                └─3*[&#123;NetworkManager&#125;]</span><br><span class="line">        ├─VGAuthService</span><br><span class="line">        ├─abrt-dbus───3*[&#123;abrt-dbus&#125;]</span><br><span class="line">        ├─2*[abrt-watch-log]</span><br><span class="line">        ├─abrtd</span><br><span class="line">        ├─alsactl</span><br><span class="line">        ├─atd</span><br><span class="line">        ├─auditd─┬─audispd─┬─sedispatch</span><br><span class="line">、、、、、、</span><br></pre></td></tr></table></figure><h1 id="四、进程查看命令"><a href="#四、进程查看命令" class="headerlink" title="四、进程查看命令"></a>四、进程查看命令</h1><h2 id="4-1、ps：查看进程信息"><a href="#4-1、ps：查看进程信息" class="headerlink" title="4.1、ps：查看进程信息"></a>4.1、ps：查看进程信息</h2><p>ps [OPTION]…</p><p>支持三种选项：</p><ul><li><p>​    UNIX选项 如-A    -e</p></li><li><p>​    BSD选项 如a</p></li><li>​    GNU选项 如–help</li></ul><h3 id="4-1-1、选项：默认显示当前终端中的进程"><a href="#4-1-1、选项：默认显示当前终端中的进程" class="headerlink" title="4.1.1、选项：默认显示当前终端中的进程"></a>4.1.1、选项：默认显示当前终端中的进程</h3><ul><li><p>​    a    选项包括所有终端中的进程</p></li><li><p>​    x    选项包括不链接终端的进程</p></li><li><p>​    u    选项显示进程所有者的信息</p></li><li><p>​    f    选项显示进程树,相当于–forest</p></li><li><p>​    k|–sort    属性 对属性排序,属性前加-表示倒序</p></li><li><p>​    o    属性…选项显示定制的信息pid、cmd、%cpu、%mem</p></li><li><p>​    L    显示支持的属性列表</p></li></ul><h3 id="4-1-2、常见选项："><a href="#4-1-2、常见选项：" class="headerlink" title="4.1.2、常见选项："></a>4.1.2、常见选项：</h3><ul><li>-C cmdlist 指定命令，多个命令用，分隔</li><li><p>-L 显示线程</p></li><li><p>-e: 显示所有进程，相当于-A</p></li><li><p>-f: 显示完整格式程序信息</p></li><li><p>-F: 显示更完整格式的进程信息</p></li><li><p>-H: 以进程层级格式显示进程相关信息</p></li><li><p>-u userlist 指定有效的用户ID或名称</p></li><li><p>-U userlist 指定真正的用户ID或名称</p></li><li><p>-g gid或groupname 指定有效的gid或组名称</p></li><li><p>-G gid或groupname 指定真正的gid或组名称</p></li><li><p>-p pid 显示指pid的进程</p></li><li><p>–ppid pid 显示属于pid的子进程</p></li><li>-M 显示SELinux信息，相当于Z</li></ul><h3 id="4-1-3、ps输出属性"><a href="#4-1-3、ps输出属性" class="headerlink" title="4.1.3、ps输出属性"></a>4.1.3、ps输出属性</h3><p>VSZ: Virtual memory SiZe，虚拟内存集，线性内存</p><p>RSS: ReSident Size, 常驻内存集</p><p>STAT：进程状态<br>​    R：running<br>​    S: interruptable sleeping<br>​    D: uninterruptable sleeping<br>​    T: stopped<br>​    Z: zombie<br>​    +: 前台进程<br>​    l: 多线程进程<br>​    L：内存分页并带锁<br>​    N：低优先级进程<br>​    &lt;: 高优先级进程<br>​    s: session leader，会话（子进程）发起者</p><h3 id="4-1-4、常用组合"><a href="#4-1-4、常用组合" class="headerlink" title="4.1.4、常用组合"></a>4.1.4、常用组合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps aux：观察系统所有的程序数据</span><br><span class="line">ps -lA：也是能够观察所有系统的数据</span><br><span class="line">ps axjf：连同部分程序树状态</span><br></pre></td></tr></table></figure><ul><li>ni: nice值</li><li>pri: priority 优先级</li><li>psr: processor CPU编号</li><li>rtprio: 实时优先级</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,<span class="built_in">stat</span>,comm</span><br><span class="line">ps axo <span class="built_in">stat</span>,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm</span><br></pre></td></tr></table></figure><h3 id="4-1-5、示例"><a href="#4-1-5、示例" class="headerlink" title="4.1.5、示例"></a>4.1.5、示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">1.查询你拥有的所有进程</span><br><span class="line">ps -x</span><br><span class="line"></span><br><span class="line">2.显示指定用户名(RUID)或用户ID的进程</span><br><span class="line">ps -fU apache</span><br><span class="line">ps -fU 48</span><br><span class="line"></span><br><span class="line">3.显示指定用户名(EUID)或用户ID的进程</span><br><span class="line">ps -fu wang</span><br><span class="line">ps -fu 1000</span><br><span class="line"></span><br><span class="line">4.查看以root用户权限（实际和有效ID）运行的每个进程</span><br><span class="line">ps -U root -u root</span><br><span class="line"></span><br><span class="line">5.列出某个组拥有的所有进程（实际组ID：RGID或名称）</span><br><span class="line">ps -fG nginx</span><br><span class="line"></span><br><span class="line">6.列出有效组名称（或会话）所拥有的所有进程</span><br><span class="line">ps -<span class="built_in">fg</span> mysql</span><br><span class="line">ps -<span class="built_in">fg</span> 27</span><br><span class="line"></span><br><span class="line">7.显示指定的进程ID对应的进程</span><br><span class="line">ps -fp 1234</span><br><span class="line"></span><br><span class="line">8.以父进程ID来显示其下所有的进程，如显示父进程为1234的所有进程</span><br><span class="line">ps -f --ppid 1234</span><br><span class="line"></span><br><span class="line">9.显示指定PID的多个进程</span><br><span class="line">ps -fp 1204,1239,1263</span><br><span class="line"></span><br><span class="line">10.要按tty显示所属进程</span><br><span class="line">ps -ft pts/0</span><br><span class="line"></span><br><span class="line">11.以进程树显示系统中的进程如何相互链接</span><br><span class="line">ps -e --forest</span><br><span class="line"></span><br><span class="line">12.以进程树显示指定的进程</span><br><span class="line">ps -f --forest -C sshd</span><br><span class="line">ps -ef --forest | grep -v grep | grep sshd</span><br><span class="line"></span><br><span class="line">13.要显示一个进程的所有线程,将显示LWP（轻量级进程）以及NLWP（轻量级进程数）列</span><br><span class="line">ps -fL -C nginx</span><br><span class="line"></span><br><span class="line">14.要列出所有格式说明符</span><br><span class="line">ps L</span><br><span class="line"></span><br><span class="line">15.查看进程的PID，PPID，用户名和命令</span><br><span class="line">ps -eo pid,ppid,user,cmd</span><br><span class="line"></span><br><span class="line">16.自定义格式显示文件系统组,ni值开始时间和进程的时间</span><br><span class="line">ps -p 1234 -o pid,ppid,fgroup,ni,lstart,etime</span><br><span class="line"></span><br><span class="line">17.使用其PID查找进程名称：</span><br><span class="line">ps -p 1244 -o comm=</span><br><span class="line"></span><br><span class="line">18.要以其名称选择特定进程，显示其所有子进程</span><br><span class="line">ps -C sshd,bash</span><br><span class="line"></span><br><span class="line">19.查找指定进程名所有的所属PID，在编写需要从std输出或文件读取PID的脚本时这个参数很有用</span><br><span class="line">ps -C httpd,sshd -o pid=</span><br><span class="line"></span><br><span class="line">20.检查一个进程的执行时间</span><br><span class="line">ps -eo comm,etime,user | grep nginx</span><br><span class="line"></span><br><span class="line">21.查找占用最多内存和CPU的进程</span><br><span class="line">ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head</span><br><span class="line">ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head</span><br><span class="line"></span><br><span class="line">22.显示安全信息</span><br><span class="line">ps -eM</span><br><span class="line">ps --context</span><br><span class="line"></span><br><span class="line">23.使用以下命令以用户定义的格式显示安全信息</span><br><span class="line">ps -eo euser,ruser,suser,fuser,f,comm,label</span><br><span class="line"></span><br><span class="line">24.使用watch实用程序执行重复的输出以实现对就程进行实时的监视，如下面的命令显示每秒钟的监视</span><br><span class="line">watch -n 1 <span class="string">'ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head'</span></span><br></pre></td></tr></table></figure><h1 id="五、进程管理工具"><a href="#五、进程管理工具" class="headerlink" title="五、进程管理工具"></a>五、进程管理工具</h1><h2 id="5-1、top：持续观察进程运行状态"><a href="#5-1、top：持续观察进程运行状态" class="headerlink" title="5.1、top：持续观察进程运行状态"></a>5.1、top：持续观察进程运行状态</h2><h3 id="5-1-1、常用参数"><a href="#5-1-1、常用参数" class="headerlink" title="5.1.1、常用参数"></a>5.1.1、常用参数</h3><p>​    -d # 指定刷新时间间隔，默认为3秒<br>​    -b 全部显示所有进程<br>​    -n # 刷新多少次后退出<br>​    -H 线程模式，示例：top -H -p <code>pidof mysqld</code></p><h3 id="5-1-2、内置命令"><a href="#5-1-2、内置命令" class="headerlink" title="5.1.2、内置命令"></a>5.1.2、内置命令</h3><p>​    排序：<br>​        P：以占据的CPU百分比,%CPU<br>​        M：占据内存百分比,%MEM<br>​        T：累积占据CPU时长,TIME+<br>​    首部信息显示：<br>​        uptime信息：l命令<br>​        tasks及cpu信息：t命令<br>​        cpu分别显示：1 (数字)<br>​        memory信息：m命令<br>​    退出命令：q<br>​    修改刷新时间间隔：s<br>​    终止指定进程：k<br>​    保存文件：W</p><h2 id="5-2、htop命令"><a href="#5-2、htop命令" class="headerlink" title="5.2、htop命令"></a>5.2、htop命令</h2><p>选项：<br>​    -d #: 指定延迟时间；<br>​    -u UserName: 仅显示指定用户的进程<br>​    -s COLUME: 以指定字段进行排序<br>子命令：<br>​    s：跟踪选定进程的系统调用<br>​    l：显示选定进程打开的文件列表<br>​    a：将选定的进程绑定至某指定CPU核心<br>​    t：显示进程树</p><h2 id="5-3、kill命令"><a href="#5-3、kill命令" class="headerlink" title="5.3、kill命令"></a>5.3、kill命令</h2><p>&ensp;&ensp;&ensp;&ensp;&ensp;向进程发送控制信号，以实现对进程管理,每个信号对应一个数字，信号名称以SIG开头（可省略），不区分大小写<br>显示当前系统可用信号： kill –l 或者 trap -l</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#kill -l</span></span><br><span class="line"> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span><br><span class="line"> 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span><br><span class="line">11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span><br><span class="line">16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span><br><span class="line">21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span><br><span class="line">31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1  64) SIGRTMAX</span><br></pre></td></tr></table></figure><p>常用信号：man 7 signal<br>​    1) SIGHUP 无须关闭进程而让其重读配置文件<br>​    2) SIGINT 中止正在运行的进程；相当于Ctrl+c<br>​    3) SIGQUIT 相当于ctrl+\<br>​    9) SIGKILL 强制杀死正在运行的进程<br>​    15) SIGTERM 终止正在运行的进程<br>​    18) SIGCONT 继续运行<br>​    19) SIGSTOP 后台休眠<br>指定信号的方法 :   (1) 信号的数字标识：1, 2, 9<br>​                (2) 信号完整名称：SIGHUP<br>​                (3) 信号的简写名称：HUP</p><p>按PID：kill [-SIGNAL] pid …</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> –n SIGNAL pid</span><br><span class="line"><span class="built_in">kill</span> –s SIGNAL pid</span><br></pre></td></tr></table></figure><p>按名称：killall [-SIGNAL] comm…</p><p>按模式：pkill [options] pattern<br>​    -SIGNAL<br>​    -u uid: effective user，生效者<br>​    -U uid: real user，真正发起运行命令者<br>​    -t terminal: 与指定终端相关的进程<br>​    -l: 显示进程名（pgrep可用）<br>​    -a: 显示完整格式的进程名（pgrep可用）<br>​    -P pid: 显示指定进程的子进程</p><h1 id="六、系统、内存工具"><a href="#六、系统、内存工具" class="headerlink" title="六、系统、内存工具"></a>六、系统、内存工具</h1><h2 id="6-1、系统工具"><a href="#6-1、系统工具" class="headerlink" title="6.1、系统工具"></a>6.1、系统工具</h2><p>1、uptime：</p><p>&ensp;&ensp;&ensp;&ensp;显示当前时间，系统已启动的时间、当前上线人数，系统平均负载（1、 5、 10分钟的平均负载，一般不会超过1）</p><p>2、系统平均负载:<br>&ensp;&ensp;&ensp;&ensp;指在特定时间间隔内运行队列中的平均进程数</p><p>3、通常每个CPU内核的当前活动进程数不大于3，那么系统的性能良好。 如果每个CPU内核的任务数大于5，那么此主机的性能有严重问题</p><p>4、如果linux主机是1个双核CPU，当Load Average 为6的时候说明机器已经被充分使用</p><h2 id="6-2、内存空间"><a href="#6-2、内存空间" class="headerlink" title="6.2、内存空间"></a>6.2、内存空间</h2><p>内存空间使用状态：<br>​    free [OPTION]<br>​        -b 以字节为单位<br>​        -m 以MB为单位<br>​        -g 以GB为单位<br>​        -h 易读格式<br>​        -o 不显示-/+buffers/cache行<br>​        -t 显示RAM + swap的总和<br>​        -s n 刷新间隔为n秒<br>​        -c n 刷新n次后即退出</p><h2 id="6-3、内存工具"><a href="#6-3、内存工具" class="headerlink" title="6.3、内存工具"></a>6.3、内存工具</h2><h3 id="6-3-1、vmstat命令：虚拟内存信息"><a href="#6-3-1、vmstat命令：虚拟内存信息" class="headerlink" title="6.3.1、vmstat命令：虚拟内存信息"></a>6.3.1、vmstat命令：虚拟内存信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat [options][delay [count]]</span><br></pre></td></tr></table></figure><p>选项：<br>​    -s: 显示内存的统计数据</p><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#vmstat -s</span></span><br><span class="line">      1865308 K total memory</span><br><span class="line">       189440 K used memory</span><br><span class="line">       274412 K active memory</span><br><span class="line">       145448 K inactive memory</span><br><span class="line">      1225172 K free memory</span><br><span class="line">         2200 K buffer memory</span><br><span class="line">       448496 K swap cache</span><br><span class="line">      2097148 K total swap</span><br><span class="line">            0 K used swap</span><br><span class="line">      2097148 K free swap</span><br><span class="line">         8210 non-nice user cpu ticks</span><br><span class="line">           70 nice user cpu ticks</span><br><span class="line">        36498 system cpu ticks</span><br><span class="line">     24164865 idle cpu ticks</span><br><span class="line">         3536 IO-wait cpu ticks</span><br><span class="line">            0 IRQ cpu ticks</span><br><span class="line">         1236 softirq cpu ticks</span><br><span class="line">            0 stolen cpu ticks</span><br><span class="line">       387226 pages paged <span class="keyword">in</span></span><br><span class="line">       174244 pages paged out</span><br><span class="line">            0 pages swapped <span class="keyword">in</span></span><br><span class="line">            0 pages swapped out</span><br><span class="line">      8310928 interrupts</span><br><span class="line">      7174983 CPU context switches</span><br><span class="line">   1548195503 boot time</span><br><span class="line">        29025 forks</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#vmstat</span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st</span><br><span class="line"> 0  0      0 1225240   2200 448572    0    0     2     1   34   30  0  0 100  0  0</span><br></pre></td></tr></table></figure><p>6.3.1.1、procs:</p><p>​    r：可运行（正运行或等待运行）进程的个数，和核心数有关<br>​    b：处于不可中断睡眠态的进程个数(被阻塞的队列的长度)</p><p>6.3.1.2、memory：</p><p>​    swpd: 交换内存的使用总量<br>​    free：空闲物理内存总量<br>​    buffer：用于buffer的内存总量<br>​    cache：用于cache的内存总量</p><p>6.3.1.3、swap:</p><p>​    si：从磁盘交换进内存的数据速率(kb/s)<br>​    so：从内存交换至磁盘的数据速率(kb/s)</p><p>6.3.1.4、io：<br>​    bi：从块设备读入数据到系统的速率(kb/s)<br>​    bo: 保存数据至块设备的速率</p><p>6.3.1.5、system：<br>​    in: interrupts 中断速率，包括时钟<br>​    cs: context switch 进程切换速率</p><p>6.3.1.6、cpu：<br>​    us:Time spent running non-kernel code<br>​    sy: Time spent running kernel code<br>​    id: Time spent idle. Linux 2.5.41前,包括IO-wait time.<br>​    wa: Time spent waiting for IO. 2.5.41前，包括in idle.<br>​    st: Time stolen from a virtual machine. 2.6.11前, unknown.</p><h3 id="6-3-2、iostat-统计CPU和设备IO信息"><a href="#6-3-2、iostat-统计CPU和设备IO信息" class="headerlink" title="6.3.2、iostat:统计CPU和设备IO信息"></a>6.3.2、iostat:统计CPU和设备IO信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#iostat</span></span><br><span class="line">Linux 3.10.0-862.el7.x86_64 (centos7.5.localdomain)     01/24/2019      _x86_64_        (2 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           0.03    0.00    0.16    0.01    0.00   99.80</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">sdb               0.00         0.04         0.00       4272          0</span><br><span class="line">sdc               0.00         0.01         0.00        884          0</span><br><span class="line">sdd               0.00         0.02         0.00       2200          0</span><br><span class="line">sda               0.18         3.06         1.43     372232     174335</span><br><span class="line">sde               0.00         0.02         0.00       2200          0</span><br><span class="line">sdf               0.00         0.02         0.00       2204          0</span><br><span class="line">scd0              0.00         0.03         0.00       3298          0</span><br><span class="line">dm-0              0.00         0.01         0.00       1036          0</span><br></pre></td></tr></table></figure><h3 id="6-3-3、pmap命令：进程对应的内存映射"><a href="#6-3-3、pmap命令：进程对应的内存映射" class="headerlink" title="6.3.3、pmap命令：进程对应的内存映射"></a>6.3.3、pmap命令：进程对应的内存映射</h3><p>pmap [options] pid […]<br>​    -x: 显示详细格式的信息<br>​    例：pmap 1</p><p>另外一种实现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/PID/maps</span><br></pre></td></tr></table></figure><h1 id="七、系统监控工具"><a href="#七、系统监控工具" class="headerlink" title="七、系统监控工具"></a>七、系统监控工具</h1><h2 id="7-1、glances命令：-EPEL源"><a href="#7-1、glances命令：-EPEL源" class="headerlink" title="7.1、glances命令：(EPEL源)"></a>7.1、glances命令：(EPEL源)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glances [-bdehmnrsvyz1] [-B <span class="built_in">bind</span>] [-c server] [-C conffile] [-p port] [-P password] [--password] [-t refresh] [-f file] [-o output]</span><br></pre></td></tr></table></figure><h3 id="7-1-1、常用选项："><a href="#7-1-1、常用选项：" class="headerlink" title="7.1.1、常用选项："></a>7.1.1、常用选项：</h3><p>​    -b: 以Byte为单位显示网卡数据速率<br>​    -d: 关闭磁盘I/O模块<br>​    -f /path/to/somefile: 设定输入文件位置<br>​    -o {HTML|CSV}：输出格式<br>​    -m: 禁用mount模块<br>​    -n: 禁用网络模块<br>​    -t #: 延迟时间间隔<br>​    -1：每个CPU的相关数据单独显示</p><h3 id="7-1-2、C-S模式下运行glances命令"><a href="#7-1-2、C-S模式下运行glances命令" class="headerlink" title="7.1.2、C/S模式下运行glances命令"></a>7.1.2、C/S模式下运行glances命令</h3><p>1、服务器模式：<br>​    glances -s -B IPADDR<br>​    IPADDR: 指明监听的本机哪个地址</p><p>2、客户端模式：<br>​    glances -c IPADDR<br>​    IPADDR：要连入的服务器端地址</p><h2 id="7-2、dstat命令：系统资源统计-代替vmstat-iostat"><a href="#7-2、dstat命令：系统资源统计-代替vmstat-iostat" class="headerlink" title="7.2、dstat命令：系统资源统计,代替vmstat,iostat"></a>7.2、dstat命令：系统资源统计,代替vmstat,iostat</h2><p>dstat [-afv][options..] [delay [count]]</p><ul><li>​    -c 显示cpu相关信息</li><li>​    -C #,#,…,total</li><li>​    -d 显示disk相关信息</li><li>​    -D total,sda,sdb,…</li><li>​    -g 显示page相关统计数据</li><li>​    -m 显示memory相关统计数据</li><li>​    -n 显示network相关统计数据</li><li>​    -p 显示process相关统计数据</li><li>​    -r 显示io请求相关的统计数据</li><li><p>​    -s 显示swapped相关的统计数据</p></li><li><p>​    –top-cpu：显示最占用CPU的进程</p></li><li><p>​    –top-io: 显示最占用io的进程</p></li><li><p>​    –top-mem: 显示最占用内存的进程</p></li><li><p>​    –top-latency: 显示延迟最大的进程</p></li></ul><h2 id="7-3、iotop"><a href="#7-3、iotop" class="headerlink" title="7.3、iotop"></a>7.3、iotop</h2><p>&ensp;&ensp;&ensp;&ensp;iotop命令是一个用来监视磁盘I/O使用状况的top类工具iotop具有与top相似的UI，其中包括PID、用户、 I/O、进程等相关信息，可查看每个进程是如何使用IO</p><h3 id="7-3-1、iotop常用参数"><a href="#7-3-1、iotop常用参数" class="headerlink" title="7.3.1、iotop常用参数"></a>7.3.1、iotop常用参数</h3><p>​    -o, –only只显示正在产生I/O的进程或线程，除了传参，可以在运行过程中按o生效</p><p>​    -b, –batch非交互模式，一般用来记录日志</p><p>​    -n NUM, –iter=NUM设置监测的次数，默认无限。在非交互模式下很有用</p><p>​    -d SEC, –delay=SEC设置每次监测的间隔，默认1秒，接受非整形数据例如1.1</p><p>​    -p PID, –pid=PID指定监测的进程/线程</p><p>​    -u USER, –user=USER指定监测某个用户产生的I/O</p><p>​    -P, –processes仅显示进程，默认iotop显示所有线程</p><p>​    -a, –accumulated显示累积的I/O，而不是带宽</p><p>​    -k, –kilobytes使用kB单位，而不是对人友好的单位。在非交互模式下，脚本编程有用</p><p>​    -t, –time 加上时间戳，非交互非模式</p><p>​    -q, –quiet 禁止头几行，非交互模式，有三种指定方式</p><p>​        -q 只在第一次监测时显示列名</p><p>​        -qq 永远不显示列名</p><p>​        -qqq 永远不显示I/O汇总</p><h3 id="7-3-2、交互按键"><a href="#7-3-2、交互按键" class="headerlink" title="7.3.2、交互按键"></a>7.3.2、交互按键</h3><p>​    left和right方向键：改变排序<br>​    r：反向排序<br>​    o：切换至选项–only<br>​    p：切换至–processes选项<br>​    a：切换至–accumulated选项<br>​    q：退出<br>​    i：改变线程的优先级</p><h2 id="7-4、lsof"><a href="#7-4、lsof" class="headerlink" title="7.4、lsof"></a>7.4、lsof</h2><p>&ensp;&ensp;&ensp;&ensp;lsof：list open files查看当前系统文件的工具。在linux环境下，一切皆文件，用户通过文件不仅可以访问常规数据，还可以访问网络连接和硬件如传输控制协议 (TCP) 和用户数据报协议 (UDP)套接字等，系统在后台都为该应用程序分配了一个文件描述符</p><h3 id="7-4-1、命令参数"><a href="#7-4-1、命令参数" class="headerlink" title="7.4.1、命令参数"></a>7.4.1、命令参数</h3><p>​    -a：列出打开文件存在的进程</p><p>​    -c&lt;进程名&gt;：列出指定进程所打开的文件</p><p>​    -g：列出GID号进程详情</p><p>​    -d&lt;文件号&gt;：列出占用该文件号的进程</p><p>​    +d&lt;目录&gt;：列出目录下被打开的文件</p><p>​    +D&lt;目录&gt;：递归列出目录下被打开的文件</p><p>​    -n&lt;目录&gt;：列出使用NFS的文件</p><p>​    -i&lt;条件&gt;：列出符合条件的进程(4、 6、协议、 :端口、 @ip )</p><p>​    -p&lt;进程号&gt;：列出指定进程号所打开的文件</p><p>​    -u：列出UID号进程详情</p><p>​    -h：显示帮助信息</p><p>​    -v：显示版本信息。</p><p>​    -n: 不反向解析网络名字</p><h3 id="7-4-2、lsof示例"><a href="#7-4-2、lsof示例" class="headerlink" title="7.4.2、lsof示例"></a>7.4.2、lsof示例</h3><h4 id="7-4-2-1、进程管理"><a href="#7-4-2-1、进程管理" class="headerlink" title="7.4.2.1、进程管理"></a>7.4.2.1、进程管理</h4><p>1、查看由登陆用户启动而非系统启动的进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof /dev/pts1</span><br></pre></td></tr></table></figure><p>2、指定进程号，可以查看该进程打开的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -p 9527</span><br></pre></td></tr></table></figure><h4 id="7-4-2-2、文件管理"><a href="#7-4-2-2、文件管理" class="headerlink" title="7.4.2.2、文件管理"></a>7.4.2.2、文件管理</h4><p>1、查看指定程序打开的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -c httpd</span><br></pre></td></tr></table></figure><p>2、查看指定用户打开的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -u root | more</span><br></pre></td></tr></table></figure><p>3、查看指定目录下被打开的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof +D /var/<span class="built_in">log</span>/</span><br><span class="line">lsof +d /var/<span class="built_in">log</span>/</span><br><span class="line"><span class="comment">#参数+D为递归列出目录下被打开的文件，参数+d为列出目录下被打开的文件</span></span><br></pre></td></tr></table></figure><h4 id="7-4-2-3、网络管理"><a href="#7-4-2-3、网络管理" class="headerlink" title="7.4.2.3、网络管理"></a>7.4.2.3、网络管理</h4><p>1、查看所有网络连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof -i –n</span><br><span class="line">lsof -i@127.0.0.1</span><br><span class="line"><span class="comment">#通过参数-i查看网络连接的情况，包括连接的ip、端口等以及一些服务的连接情况，例如：sshd等。也可以通过指定ip查看该ip的网络连接情况</span></span><br></pre></td></tr></table></figure><p>2、查看端口连接情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :80 -n</span><br><span class="line"><span class="comment">#通过参数-i:端口可以查看端口的占用情况，-i参数还有查看协议，ip的连接情况等</span></span><br></pre></td></tr></table></figure><p>3、查看指定进程打开的网络连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -i –n -a -p 9527</span><br><span class="line"><span class="comment">#参数-i、 -a、 -p等，-i查看网络连接情况，-a查看存在的进程，-p指定进程</span></span><br></pre></td></tr></table></figure><p>4、查看指定状态的网络连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof -n -P -i TCP -s TCP:ESTABLISHED</span><br><span class="line"><span class="comment">#-n:no host names, -P:no port names,-i TCP指定协议，-s指定协议状态通过多个参数可以清晰的查看网络连接情况、协议连接情况等</span></span><br></pre></td></tr></table></figure><h4 id="7-4-2-4、恢复删除文件"><a href="#7-4-2-4、恢复删除文件" class="headerlink" title="7.4.2.4、恢复删除文件"></a>7.4.2.4、恢复删除文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lsof |grep /var/<span class="built_in">log</span>/messages</span><br><span class="line">rm -f /var/<span class="built_in">log</span>/messages</span><br><span class="line">lsof |grep /var/<span class="built_in">log</span>/messages</span><br><span class="line">cat /proc/653/fd/6</span><br><span class="line">cat /proc/653/fd/6 &gt; /var/<span class="built_in">log</span>/messages</span><br></pre></td></tr></table></figure><h1 id="八、作业管理"><a href="#八、作业管理" class="headerlink" title="八、作业管理"></a>八、作业管理</h1><p>Linux的作业控制<br>​    前台作业：通过终端启动，且启动后一直占据终端<br>​    后台作业：可通过终端启动，但启动后即转入后台运行（释放终端）</p><p>让作业运行于后台<br>​    (1) 运行中的作业： Ctrl+z<br>​    (2) 尚未启动的作业： COMMAND &amp;</p><p>后台作业虽然被送往后台运行，但其依然与终端相关；退出终端，将关闭后台作业。如果希望送往后台后，剥离与终端的关系<br>​    nohup COMMAND &amp;&gt;/dev/null &amp;<br>​    screen；COMMAND</p><p>查看当前终端所有作业：jobs</p><p>作业控制：<br>​    fg [[%]JOB_NUM]：把指定的后台作业调回前台<br>​    bg [[%]JOB_NUM]：让送往后台的作业在后台继续运行<br>​    kill [%JOB_NUM]： 终止指定的作业</p><p>并行运行</p><p>同时运行多个进程，提高效率</p><p>方法1<br>​    vi all.sh<br>​    f1.sh&amp;<br>​    f2.sh&amp;<br>​    f3.sh&amp;</p><p>方法2<br>​    (f1.sh&amp;);(f2.sh&amp;);(f3.sh&amp;)</p><p>方法3<br>​    { f1.sh&amp; f2.sh&amp; f3.sh&amp; }</p><h1 id="九、任务计划"><a href="#九、任务计划" class="headerlink" title="九、任务计划"></a>九、任务计划</h1><p>Linux任务计划、周期性任务执行</p><p>未来的某时间点执行一次任务</p><p>​    at    指定时间点，执行一次性任务</p><p>​    batch       系统自行选择空闲时间去执行此处指定的任务</p><p>周期性运行某任务<br>​    cron</p><h2 id="9-1、at任务"><a href="#9-1、at任务" class="headerlink" title="9.1、at任务"></a>9.1、at任务</h2><p>1、包：at</p><p>2、at命令：at [option] TIME</p><p>3、常用选项：<br>​    -V 显示版本信息</p><p>​    -t time 时间格式 [[CC]YY]MMDDhhmm[.ss]</p><p>​    -l   列出指定队列中等待运行的作业；相当于atq  </p><p>​    -d   删除指定的作业；相当于atrm  </p><p>​    -c   查看具体作业任务</p><p>​    -f /path/file 指定的文件中读取任务<br>​    -m 当任务被完成之后，将给用户发送邮件，即使没有标准输出</p><p><strong>注意：作业执行命令的结果中的标准输出和错误以邮件通知给相关用户</strong></p><p>4、TIME：定义出什么时候进行 at 这项任务的时间<br>​    HH:MM [YYYY-mm-dd]</p><p>​        noon, midnight, teatime（4pm）<br>​        tomorrow<br>​        now+#{minutes,hours,days, OR weeks}</p><p>5、at时间格式</p><p>​    HH:MM 02:00<br>在今日的 HH:MM 进行，若该时刻已过，则明天此时执行任务</p><p>​    HH:MM YYYY-MM-DD 02:00 2016-09-20<br>规定在某年某月的某一天的特殊时刻进行该项任务</p><p>​    HH:MM[am|pm] + number [minutes|hours|days|weeks]<br>在某个时间点再加几个时间后才进行该项任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">now + 5 min</span><br><span class="line">02pm + 3 days</span><br></pre></td></tr></table></figure><p>6、执行方式：<br>​    1）交互式 </p><p>​    2）输入重定向 </p><p>​    3）at –f 文件</p><p>7、依赖与atd服务,需要启动才能实现at任务</p><p>8、at队列存放在/var/spool/at目录中</p><p>9、/etc/at.{allow,deny}控制用户是否能执行at任务<br>​    白名单：/etc/at.allow 默认不存在，只有该文件中的用户才能执行at命令<br>​    黑名单：/etc/at.deny 默认存在，拒绝该文件中用户执行at命令，而没有在at.deny 文件中的使用者则可执行<br>​    如果两个文件都不存在，只有 root 可以执行 at 命令</p><h2 id="9-2、周期性任务计划cron"><a href="#9-2、周期性任务计划cron" class="headerlink" title="9.2、周期性任务计划cron"></a>9.2、周期性任务计划cron</h2><h3 id="9-2-1、相关的程序包"><a href="#9-2-1、相关的程序包" class="headerlink" title="9.2.1、相关的程序包"></a>9.2.1、相关的程序包</h3><p>​    cronie：主程序包，提供crond守护进程及相关辅助工具<br>​    cronie-anacron：cronie的补充程序，用于监控cronie任务执行状况，如cronie中的任务在过去该运行的时间点未能正常运行，则anacron会随后启动一次此任务<br>​    crontabs：包含CentOS提供系统维护任务</p><h3 id="9-2-2、计划任务"><a href="#9-2-2、计划任务" class="headerlink" title="9.2.2、计划任务"></a>9.2.2、计划任务</h3><p>确保crond守护处于运行状态：<br>​    CentOS 7:<br>​        systemctl status crond<br>​    CentOS 6:<br>​        service crond status</p><h3 id="9-2-3、计划周期性执行的任务提交给crond，到指定时间会自动运行"><a href="#9-2-3、计划周期性执行的任务提交给crond，到指定时间会自动运行" class="headerlink" title="9.2.3、计划周期性执行的任务提交给crond，到指定时间会自动运行"></a>9.2.3、计划周期性执行的任务提交给crond，到指定时间会自动运行</h3><p>系统cron任务：系统维护作业<br>​    /etc/crontab<br>用户cron任务：<br>​    crontab命令</p><p>日志：/var/log/cron</p><h3 id="9-2-3-1、系统cron任务"><a href="#9-2-3-1、系统cron任务" class="headerlink" title="9.2.3.1、系统cron任务"></a>9.2.3.1、系统cron任务</h3><p>注释行以 # 开头</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">~]<span class="comment">#cat /etc/crontab</span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">MAILTO=root</span><br><span class="line"></span><br><span class="line"><span class="comment"># For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name  command to be executed</span></span><br></pre></td></tr></table></figure><p>例：晚上9点10分运行echo命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 21 * * * wang /bin/<span class="built_in">echo</span> <span class="string">"Howdy!"</span></span><br></pre></td></tr></table></figure><h4 id="9-2-3-1-1、时间表示法"><a href="#9-2-3-1-1、时间表示法" class="headerlink" title="9.2.3.1.1、时间表示法"></a>9.2.3.1.1、时间表示法</h4><p>(1) 特定值<br>​    给定时间点有效取值范围内的值</p><p>(2) *</p><p>​    给定时间点上有效取值范围内的所有值<br>​    表示“每…”</p><p>(3) 离散取值</p><p>​    #,#,#</p><p>(4) 连续取值</p><p>​    #-#</p><p>(5) 在指定时间范围上，定义步长</p><p>/#: #即为步长</p><p>例：每3小时echo和wall命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 */3 * * * centos /bin/<span class="built_in">echo</span> “howdy”; wall <span class="string">"welcome to Magedu!”</span></span><br></pre></td></tr></table></figure><h4 id="9-2-3-1-2、系统的计划任务"><a href="#9-2-3-1-2、系统的计划任务" class="headerlink" title="9.2.3.1.2、系统的计划任务"></a>9.2.3.1.2、系统的计划任务</h4><p>​    /etc/crontab 配置文件<br>​    /etc/cron.d/ 配置文件<br>​    /etc/cron.hourly/ 脚本<br>​    /etc/cron.daily/ 脚本<br>​    /etc/cron.weekly/ 脚本<br>​    /etc/cron.monthly/ 脚本</p><h4 id="9-2-3-1-3、anacron系统"><a href="#9-2-3-1-3、anacron系统" class="headerlink" title="9.2.3.1.3、anacron系统"></a>9.2.3.1.3、anacron系统</h4><p>1、运行计算机关机时cron不运行的任务，CentOS6以后版本取消anacron服务，由crond服务管理</p><p>2、对笔记本电脑、台式机、工作站、偶尔要关机的服务器及其它不一直开机的系统很重要对很有用</p><p>3、配置文件：/etc/anacrontab，负责执行/etc/ cron.daily /etc/cron.weekly<br>/etc/cron.monthly中系统任务</p><ul><li><p>​    字段1：如果在这些日子里没有运行这些任务……</p></li><li><p>​    字段2：在重新引导后等待这么多分钟后运行它</p></li><li><p>​    字段3：任务识别器，在日志文件中标识</p></li><li><p>​    字段4：要执行的任务</p></li></ul><p>4、由/etc/cron.hourly/0anacron执行</p><p>5、当执行任务时，更新/var/spool/anacron/cron.daily 文件的时间戳</p><h4 id="9-2-3-1-4、管理临时文件"><a href="#9-2-3-1-4、管理临时文件" class="headerlink" title="9.2.3.1.4、管理临时文件"></a>9.2.3.1.4、管理临时文件</h4><p>1、CentOS6使用/etc/cron.daily/tmpwatch定时清除临时文件</p><p>2、CentOS7使用systemd-tmpfiles-setup服务实现</p><p>3、配置文件：</p><p>​    /etc/tmpfiles.d/*.conf</p><p>​    /run/tmpfiles.d/*.conf</p><p>​    /usr/lib/tmpfiles/*.conf</p><p>4、/usr/lib/tmpfiles.d/tmp.conf</p><p>​    d /tmp 1777 root root 10d</p><p>​    d /var/tmp 1777 root root 30d</p><p>5、命令：</p><p>​    systemd-tmpfiles –clean|remove|create configfile</p><h3 id="9-2-3-2、crontab命令定义"><a href="#9-2-3-2、crontab命令定义" class="headerlink" title="9.2.3.2、crontab命令定义"></a>9.2.3.2、crontab命令定义</h3><p>​    每个用户都有专用的cron任务文件：/var/spool/cron/USERNAME</p><p>crontab命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u user][-l | -r | -e][-i]</span><br></pre></td></tr></table></figure><p>​    -l    列出所有任务</p><p>​    -e    编辑任务  </p><p>​    -r    移除所有任务  </p><p>​    -i    同-r一同使用，以交互式模式移除指定任务  </p><p>​    -u user   仅root可运行，指定用户管理cron任务</p><p>控制用户执行计划任务：<br>​    /etc/cron.{allow,deny}</p><h3 id="9-2-3-4、at和crontab"><a href="#9-2-3-4、at和crontab" class="headerlink" title="9.2.3.4、at和crontab"></a>9.2.3.4、at和crontab</h3><p>1、一次性作业使用 at </p><p>​    重复性作业使用crontab </p><p>2、没有被重定向的输出会被邮寄给用户</p><p>3、root能够修改其它用户的作业</p><p>4、<strong>注意：运行结果的标准输出和错误以邮件通知给相关用户</strong><br>​    (1) COMMAND &gt; /dev/null<br>​    (2) COMMAND &amp;&gt; /dev/null</p><p>5、对于cron任务来讲，%有特殊用途；如果在命令中要使用%，则需要转义，将%放置于单引号中，则可不用转义</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h1 id=&quot;一、进程的相关概念&quot;&gt;&lt;a href=&quot;#一、进程的相关概念&quot; c
      
    
    </summary>
    
      <category term="进程和计划任务" scheme="http://yoursite.com/categories/%E8%BF%9B%E7%A8%8B%E5%92%8C%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    
    
      <category term="进程" scheme="http://yoursite.com/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="计划任务" scheme="http://yoursite.com/tags/%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
</feed>
