<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Linux知识库</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-12T04:55:23.501Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>谢 佳</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux kernel</title>
    <link href="http://yoursite.com/2019/01/03/linux%20kernel/"/>
    <id>http://yoursite.com/2019/01/03/linux kernel/</id>
    <published>2019-01-02T17:48:49.100Z</published>
    <updated>2019-01-12T04:55:23.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kernel-introduce"><a href="#kernel-introduce" class="headerlink" title="kernel introduce"></a>kernel introduce</h1><p>    内核是操作系统的核心，掌控着所有硬件设备的控制权。也就是说，你所希望计算机帮你完成的各项工作，都需要通过内核的帮助才能完成。内核可以分为以下几种设计流派：</p><blockquote><p>单内核(monolithic kernel)： Linux<br>把所有功能集成于同一个程序<br>微内核(micro kernel)：Windows, Solaris<br>每种功能使用一个单独子系统实现内核</p></blockquote><ul><li><p>Linux内核特点：</p><blockquote><p>支持模块化：.ko（内核对象)  </p><blockquote><p>如：文件系统，硬件驱动，网络协议等  </p></blockquote></blockquote><blockquote><p>支持内核模块的动态装载和卸载</p></blockquote></li><li><p>组成部分：</p><blockquote><p>核心文件：/boot/vmlinuz-VERSION-release<br>ramdisk：辅助的伪根系统  </p><blockquote><p>CentOS 5: /boot/initrd-VERSION-release.img<br>CentOS 6,7: /boot/initramfs-VERSION-release.img</p></blockquote></blockquote></li></ul><blockquote><p>模块文件：/lib/modules/VERSION-release</p></blockquote><ul><li>kernel</li></ul><blockquote><p>自身初始化<br>检测可识别到的所有硬件设备<br>加载硬件驱动程序（借助于ramdisk加载驱动）<br>以只读方式挂载根文件系统<br>运行用户空间的第一个应用程序：/sbin/init启动流程</p></blockquote><h1 id="ramdisk："><a href="#ramdisk：" class="headerlink" title="ramdisk："></a>ramdisk：</h1><p>内核中的特性之一：使用缓冲和缓存来加速对磁盘上的文件访问，并加载相应的硬件驱动</p><p>CentOS 5: initrd</p><blockquote><p>工具程序：mkinitrd<br>CentOS 6，7: initramfs<br>工具程序：mkinitrd, dracut</p></blockquote><p>ramdisk文件的制作</p><ol><li><p>mkinitrd命令<br> 为当前正在使用的内核重新制作ramdisk文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkinitrd /boot/initramfs-$(uname -r).img $(uname -r)</span><br></pre></td></tr></table></figure></li><li><p>dracut命令<br> 为当前正在使用的内核重新制作ramdisk文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dracut /boot/initramfs-$(uname -r).img $(uname -r)</span><br></pre></td></tr></table></figure></li></ol><h1 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h1><h2 id="uname命令"><a href="#uname命令" class="headerlink" title="uname命令"></a>uname命令</h2><p>uname - print system information<br>uname [OPTION]…<br>-r: 显示VERSION-RELEASE<br>-n: 显示主机名<br>-a:显示所有信息  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#uname -r</span></span><br><span class="line">2.6.32-754.el6.x86_64</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#uname -n</span></span><br><span class="line">CentOS6.localdomain</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#uname -a</span></span><br><span class="line">Linux CentOS6.localdomain 2.6.32-754.el6.x86_64 <span class="comment">#1 SMP Tue Jun 19 21:26:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p>uname -a 现实的内容依次为：</p><ul><li>Linux 操作系统类型</li><li>CentOS6.localdomain 操作系统的主机名</li><li>2.6.32-754.el6.x86_64 内核版本信息</li><li>#1 SMP Tue Jun 19 21:26:04 UTC 2018 内核的编译日期</li><li>x86_64 x86_64 x86_64 这三组分别是：操作系统版本、处理器类型、硬件平台</li><li>GNU/Linux 操作系统名称</li></ul><h1 id="proc目录"><a href="#proc目录" class="headerlink" title="/proc目录"></a>/proc目录</h1><p>该目录是系统与内核交互的一个伪文件系统接口，内核把自己内部状态信息及统计信息，以及可配置参数通过proc伪文件系统加以输出。</p><p>参数</p><blockquote><p>只读：输出信息</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#cat /proc/sys/net/ipv4/icmp_echo_ignore_all </span></span><br><span class="line">0</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ping 192.168.183.157</span></span><br><span class="line">PING 192.168.183.157 (192.168.183.157) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.183.157: icmp_seq=1 ttl=64 time=0.074 ms</span><br><span class="line">64 bytes from 192.168.183.157: icmp_seq=2 ttl=64 time=0.068 ms</span><br><span class="line">64 bytes from 192.168.183.157: icmp_seq=3 ttl=64 time=0.069 ms</span><br></pre></td></tr></table></figure><p>可写：可接受用户指定“新值”来实现对内核某功能或特性的配置,不支持编辑器编辑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat /proc/sys/net/ipv4/icmp_echo_ignore_all</span></span><br><span class="line">1</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ping -wl -c1 192.168.183.157</span></span><br><span class="line">PING 192.168.183.157 (192.168.183.157) 56(84) bytes of data.</span><br><span class="line"> </span><br><span class="line">--- 192.168.183.157 ping statistics ---</span><br><span class="line">1 packets transmitted, 0 received, 100% packet loss, time 10001ms</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/proc/sys</span><br></pre></td></tr></table></figure><ol><li>echo命令通过重定向方式也可以修改大多数参数的值<br> echo “VALUE” &gt; /proc/sys/path/to/parameter<br> echo “websrv” &gt; /proc/sys/kernel/hostname</li><li>sysctl命令用于查看或设定此目录中诸多参数<br> sysctl -w path.to.parameter=VALUE<br> sysctl -w kernel.hostname=mail.magedu.com</li></ol><h1 id="sysctl命令"><a href="#sysctl命令" class="headerlink" title="sysctl命令"></a>sysctl命令</h1><p>默认配置文件：/etc/sysctl.conf</p><ol><li><p>设置某参数<br> sysctl -w parameter=VALUE</p></li><li><p>通过读取配置文件设置参数<br> sysctl -p [/path/to/conf_file]</p></li><li><p>查看所有生效参数<br> sysctl -a</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#sysctl -a |less</span></span><br><span class="line">kernel.sched_child_runs_first = 0</span><br><span class="line">kernel.sched_min_granularity_ns = 2000000</span><br><span class="line">kernel.sched_latency_ns = 10000000</span><br><span class="line">kernel.sched_wakeup_granularity_ns = 2000000</span><br><span class="line">kernel.sched_tunable_scaling = 1</span><br></pre></td></tr></table></figure></li><li><p>常用的几个参数：<br> net.ipv4.ip_forward<br> net.ipv4.icmp_echo_ignore_all<br> vm.drop_caches</p></li></ol><h1 id="sys目录"><a href="#sys目录" class="headerlink" title="/sys目录"></a>/sys目录</h1><p>sysfs：为用户使用的伪文件系统，输出内核识别出的各硬件设备的相关属性信息，也有内核对硬件特性的设定信息；有些参数是可以修改的，用于调整硬件工作特性<br>udev通过此路径下输出的信息动态为各设备创建所需要设备文件，udev是运行用户空间程序<br>专用工具：udevadmin, hotplug<br>udev为设备创建设备文件时，会读取其事先定义好的规则文件，一般在/etc/udev/rules.d及/usr/lib/udev/rules.d目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">网卡</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat /etc/udev/rules.d/70-persistent-net.rules</span></span><br><span class="line"><span class="comment"># This file was automatically generated by the /lib/udev/write_net_rules</span></span><br><span class="line"><span class="comment"># program, run by the persistent-net-generator.rules rules file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can modify it, as long as you keep each rule on a single</span></span><br><span class="line"><span class="comment"># line, and change only the value of the NAME= key.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PCI device 0x8086:0x100f (e1000)</span></span><br><span class="line">SUBSYSTEM==<span class="string">"net"</span>, ACTION==<span class="string">"add"</span>, DRIVERS==<span class="string">"?*"</span>, ATTR&#123;address&#125;==<span class="string">"00:0c:29:bf:4b:56"</span>, ATTR&#123;<span class="built_in">type</span>&#125;==<span class="string">"1"</span>, KERNEL==<span class="string">"eth*"</span>, NAME=<span class="string">"eth0"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PCI device 0x8086:0x100f (e1000)</span></span><br><span class="line">SUBSYSTEM==<span class="string">"net"</span>, ACTION==<span class="string">"add"</span>, DRIVERS==<span class="string">"?*"</span>, ATTR&#123;address&#125;==<span class="string">"00:0c:29:bf:4b:60"</span>, ATTR&#123;<span class="built_in">type</span>&#125;==<span class="string">"1"</span>, KERNEL==<span class="string">"eth*"</span>, NAME=<span class="string">"eth1"</span></span><br></pre></td></tr></table></figure><h1 id="内核模块管理"><a href="#内核模块管理" class="headerlink" title="内核模块管理"></a>内核模块管理</h1><h2 id="查看当前内核已经装载的模块-lsmod"><a href="#查看当前内核已经装载的模块-lsmod" class="headerlink" title="查看当前内核已经装载的模块 lsmod"></a>查看当前内核已经装载的模块 lsmod</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#lsmod</span></span><br><span class="line">Module                  Size  Used by</span><br><span class="line">rfcomm                 71207  4 </span><br><span class="line">sco                    17589  2 </span><br><span class="line">bridge                 85770  0 </span><br><span class="line">bnep                   16370  2 </span><br><span class="line">l2cap                  54498  16 rfcomm,bnep</span><br><span class="line">autofs4                27000  3 </span><br><span class="line">8021q                  20507  0 </span><br><span class="line">garp                    7184  1 8021q</span><br><span class="line">stp                     2218  2 bridge,garp</span><br><span class="line">llc                     5450  3 bridge,garp,stp</span><br><span class="line">ipt_REJECT              2383  2 </span><br><span class="line">nf_conntrack_ipv4       9218  2 </span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure><h2 id="查看内核模块的文件-proc-modules"><a href="#查看内核模块的文件-proc-modules" class="headerlink" title="查看内核模块的文件/proc/modules"></a>查看内核模块的文件/proc/modules</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#cat /proc/modules </span></span><br><span class="line">rfcomm 71207 4 - Live 0xffffffffa05fd000</span><br><span class="line">sco 17589 2 - Live 0xffffffffa05f3000</span><br><span class="line">bridge 85770 0 - Live 0xffffffffa05d5000</span><br><span class="line">bnep 16370 2 - Live 0xffffffffa05cd000</span><br><span class="line">l2cap 54498 16 rfcomm,bnep, Live 0xffffffffa05b9000</span><br><span class="line">autofs4 27000 3 - Live 0xffffffffa05ad000</span><br><span class="line">8021q 20507 0 - Live 0xffffffffa05a2000</span><br><span class="line">garp 7184 1 8021q, Live 0xffffffffa059c000</span><br><span class="line">stp 2218 2 bridge,garp, Live 0xffffffffa0598000</span><br><span class="line">llc 5450 3 bridge,garp,stp, Live 0xffffffffa0592000</span><br><span class="line">ipt_REJECT 2383 2 - Live 0xffffffffa0567000</span><br><span class="line">nf_conntrack_ipv4 9218 2 - Live 0xffffffffa0560000</span><br><span class="line">nf_defrag_ipv4 1483 1 nf_conntrack_ipv4, Live 0xffffffffa055c000</span><br><span class="line">...省略...</span><br></pre></td></tr></table></figure><h2 id="查看模块的详细描述信息-modinfo"><a href="#查看模块的详细描述信息-modinfo" class="headerlink" title="查看模块的详细描述信息 modinfo"></a>查看模块的详细描述信息 modinfo</h2><p>modinfo [ -k kernel ] [ modulename|filename… ]<br>-n：只显示模块文件路径<br>-p：显示模块参数<br>-a：作者<br>-d：描述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#modinfo xfs</span></span><br><span class="line">filename:       /lib/modules/2.6.32-754.el6.x86_64/kernel/fs/xfs/xfs.ko</span><br><span class="line">license:        GPL</span><br><span class="line">description:    SGI XFS with ACLs, security attributes, large block/inode numbers, no debug enabled</span><br><span class="line">author:         Silicon Graphics, Inc.</span><br><span class="line">retpoline:      Y</span><br><span class="line">srcversion:     032C69ECC93FCBD7B47F691</span><br><span class="line">depends:        exportfs</span><br><span class="line">vermagic:       2.6.32-754.el6.x86_64 SMP mod_unload modversions</span><br></pre></td></tr></table></figure><h2 id="内核模块装载或卸载-modprobe"><a href="#内核模块装载或卸载-modprobe" class="headerlink" title="内核模块装载或卸载 modprobe"></a>内核模块装载或卸载 modprobe</h2><p>装载模块：modprobe MOD_NAME (注意这里会自动解决模块间的依赖关系)<br>卸载模块：modprobe -r modulename</p><h2 id="手动实现模块文件的装载和卸载"><a href="#手动实现模块文件的装载和卸载" class="headerlink" title="手动实现模块文件的装载和卸载"></a>手动实现模块文件的装载和卸载</h2><p>insmod命令：insmod /path/to/module_file(注意这里不会自动解决模块间的依赖关系)<br>rmmod命令:rmmod MOD_NAME</p><h1 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><ol><li><p>准备好开发环境</p></li><li><p>获取目标主机上硬件设备的相关信息</p></li><li><p>获取目标主机系统功能的相关信息<br> 例如:需要启用相应的文件系统</p></li><li><p>获取内核源代码包</p><p><a href="http://www.kernel.org" target="_blank" rel="noopener">www.kernel.org</a></p><h2 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h2></li><li><p>包组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Development Tools</span><br><span class="line">ncurses-devel</span><br><span class="line">elfutils-libelf-devel</span><br><span class="line">openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>目标主机硬件设备相关信息</p></li></ol><p>CPU：</p><blockquote><p>cat /proc/cpuinfo<br>x86info -a<br>lscpu</p></blockquote><p>PCI设备：</p><blockquote><p>lspci</p><blockquote><p>-v<br>-vv</p></blockquote></blockquote><blockquote><p>lsusb</p><blockquote><p>-v<br>-vv</p></blockquote></blockquote><blockquote><p>lsblk 块设备</p></blockquote><p>3.了解全部硬件设备信息<br>hal-device：CentOS 6</p><h2 id="内核编译安装系统"><a href="#内核编译安装系统" class="headerlink" title="内核编译安装系统"></a>内核编译安装系统</h2><ul><li><p>安装开发包组</p></li><li><p>下载源码文件</p></li><li>.config：准备文本配置文件</li><li>make menuconfig：配置内核选项</li><li>make [-j #]</li><li>make modules_install：安装模块</li><li>make install: 安装内核相关文件</li><li>​安装bzImage为/boot/vmlinuz-VERSION-RELEASE</li><li>​生成initramfs文件</li><li>​编辑grub的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">编译安装内核示例</span><br><span class="line">tar xf linux-3.10.67.tar.xz -C /usr/src</span><br><span class="line"><span class="built_in">cd</span> /usr/src/linux-3.10.67 </span><br><span class="line">cp /boot/config-$(uname -r) ./.config</span><br><span class="line">make <span class="built_in">help</span>  </span><br><span class="line">make menuconfig  </span><br><span class="line">make -j 2  </span><br><span class="line">make modules_install</span><br><span class="line">make install  </span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="卸载内核"><a href="#卸载内核" class="headerlink" title="卸载内核"></a>卸载内核</h2><ul><li>make clean：清理大多数编译生成的文件，但会保留config文件等</li><li>make mrproper: 清理所有编译生成的文件、 config及某些备份文件</li><li>make distclean：mrproper、清理patches以及编辑器备份文件卸载内核</li><li>删除/lib/modules/目录下不需要的内核库文件</li><li>删除/usr/src/linux/目录下不需要的内核源码</li><li>删除/boot目录下启动的内核和内核映像文件</li><li>更改grub的配置文件，删除不需要的内核启动列表</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kernel-introduce&quot;&gt;&lt;a href=&quot;#kernel-introduce&quot; class=&quot;headerlink&quot; title=&quot;kernel introduce&quot;&gt;&lt;/a&gt;kernel introduce&lt;/h1&gt;&lt;p&gt;    内核是操作系统的核心
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="kernel" scheme="http://yoursite.com/tags/kernel/"/>
    
      <category term="编译" scheme="http://yoursite.com/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>文本三剑客之sed</title>
    <link href="http://yoursite.com/2019/01/03/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bsed/"/>
    <id>http://yoursite.com/2019/01/03/文本三剑客之sed/</id>
    <published>2019-01-02T17:24:16.513Z</published>
    <updated>2019-01-12T04:30:03.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>&ensp;&ensp;&ensp;&ensp;sed是一种流编辑器、行编辑器。它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下行，执行下一个循环。如果没有使诸如‘D’ 的特殊命令，那会在两个循环之间清空模式空间，但不会清空保留空间。这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。<br>&ensp;&ensp;&ensp;&ensp;sed和我们之前的文本处理工具vim、grep是有区别的，vim是一种交互式的文本编辑工具，而sed是一种非交互式的文本编辑器（通过给定的条件自动的逐行去处理文件）；grep虽然也是一种流失的文本处理工具，但grep是用来检索条件关键字的，而sed却是搜索匹配处理文本公积<br>&ensp;&ensp;&ensp;&ensp;sed的功能：主要用来自动编辑一个或多个文件,简化对文件的反复操作,编写转换程序等  </p><h1 id="sed语法"><a href="#sed语法" class="headerlink" title="sed语法"></a>sed语法</h1><p><code>sed [option]... &#39;script&#39; inputfile...</code></p><p>-n 不输出模式空间内容到屏幕，即不自动打印<br>-e 多点编辑<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 10 | sed -n -e '2p' -e '6p' </span></span><br><span class="line">2</span><br><span class="line">6</span><br></pre></td></tr></table></figure></p><p>-f /PATH/SCRIPT_FILE 从指定文件中读取编辑脚本<br>-r 支持使用扩展正则表达式<br>-i.bak 备份文件并原处编辑  </p><h1 id="地址定界"><a href="#地址定界" class="headerlink" title="地址定界"></a>地址定界</h1><ol><li><p>不给地址：对全文进行处理 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 10 | sed 'p'</span></span><br></pre></td></tr></table></figure></li><li><p>单地址:<br>#: 指定的行<br>$： 最后一行<br>/pattern/：被此处模式所能够匹配到的每一行 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#seq 10 | sed -n &apos;1p&apos;</span><br><span class="line">[root@localhost ~]#seq 10 | sed -n &apos;$p&apos;</span><br><span class="line">[root@localhost ~]#sed  -n &apos;/^root/p&apos; /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>地址范围：<br>#,#<br>#,+#<br>/pat1/,/pat2/<br>#,/pat1/  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 10 | sed -n '1,5p'</span></span><br><span class="line">[root@localhost ~]<span class="comment">#seq 10 | sed -n '1,+4p'</span></span><br><span class="line">[root@localhost ~]<span class="comment">#sed  -n '/^b/,/^f/p' /etc/passwd</span></span><br><span class="line">[root@localhost ~]<span class="comment">#sed  -n '2,/^f/p' /etc/passwd</span></span><br></pre></td></tr></table></figure></li><li><p>~：步进<br>1~2 奇数行<br>2~2 偶数行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 10 | sed -n '1~2p'</span></span><br><span class="line">[root@localhost ~]<span class="comment">#seq 10 | sed -n '2~2p'</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="编辑命令"><a href="#编辑命令" class="headerlink" title="编辑命令"></a>编辑命令</h1><p>d 删除模式空间匹配的行，并立即启用下一轮循环<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 5 | sed '2d'</span></span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><p>p 打印当前模式空间内容，追加到默认输出之后<br>a []text 在指定行后面追加文本，支持使用\n实现多行追加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 5 | sed  '$axxx\nyyy' </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">xxx</span><br><span class="line">yyy</span><br></pre></td></tr></table></figure></p><p>i []text 在行前面插入文本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 5 | sed  '$ixxx\nyyy' </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">xxx</span><br><span class="line">yyy</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><p>c []text 替换行为单行或多行文本<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 5 | sed  '$cxxx\nyyy' </span></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">xxx</span><br><span class="line">yyy</span><br></pre></td></tr></table></figure></p><p>w /path/file 保存模式匹配的行至指定文件<br>r /path/file 读取指定文件的文本至模式空间中匹配到的行后<br>= 为模式空间中的行打印行号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]#sed  -n &apos;/root/=&apos; /etc/passwd</span><br></pre></td></tr></table></figure></p><p>! 模式空间中匹配行取反处理sed工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 5 | sed ' 2 ! d' </span></span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>s/// 查找替换,支持使用其它分隔符， s@@@， s###<br><strong><em>替换标记：</em></strong><br>g 行内全局替换<br>p 显示替换成功的行</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li>删除centos7系统/etc/grub2.cfg文件中所有以空白开头的行行首的空白字符</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/grub2.cfg  | sed -nr <span class="string">'s@^([[:space:]]*)([[:alpha:]].*$)@\2@gp'</span></span><br></pre></td></tr></table></figure><ol start="2"><li>删除/etc/fstab文件中所有以#开头，后面至少跟一个空白字符的行的行首的#和空白字符  </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/fstab | sed -nr <span class="string">'s@^#[[:space:]]@@gp'</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在centos6系统/root/install.log每一行行首增加#号</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/install.log | sed -nr <span class="string">'s@^In.*@#&amp;@g'</span></span><br></pre></td></tr></table></figure><ol start="4"><li>在/etc/fstab文件中不以#开头的行的行首增加#号</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/fstab  | sed -nr <span class="string">'s@^([^#]|$)@#&amp;@gp'</span></span><br></pre></td></tr></table></figure><ol start="5"><li>处理/etc/fstab路径,使用sed命令取出其目录名和基名</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dirname: <span class="built_in">echo</span> /etc/fstab | sed -nr <span class="string">'s@(.*/)([^/]+/?$)@\1@gp'</span></span><br><span class="line">basename: <span class="built_in">echo</span> /etc/fstab | sed -nr <span class="string">'s@(.*/)([^/]+/?$)@\2@gp'</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>利用sed取出ifconfig命令中本机的IPv4地址  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | sed -nr <span class="string">'2!d;s@.*inet (addr:)?@@;s@  .*@@gp'</span></span><br></pre></td></tr></table></figure></li><li><p>统计centos安装光盘中Package目录下的所有rpm文件的以.分隔倒数第二个<br>字段的重复次数</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls  /run/media/root/CentOS\ 7\ x86_64/Packages/ | sed -nr <span class="string">'s@(.*\.)(.*)\.rpm$@\2@gp'</span> |sort | uniq -c</span><br></pre></td></tr></table></figure><ol start="8"><li>统计/etc/init.d/functions文件中每个单词的出现次数，并排序（用grep和<br>sed两种方法分别实现）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep: cat /etc/init.d/<span class="built_in">functions</span> | grep -Eow <span class="string">"[[:alpha:]]*_?"</span> | sort | uniq -c</span><br><span class="line">sed:</span><br></pre></td></tr></table></figure></li></ol><h1 id="高级编辑命令"><a href="#高级编辑命令" class="headerlink" title="高级编辑命令"></a>高级编辑命令</h1><p>&ensp;&ensp;&ensp;&ensp;sed除了模式空间外，还有一个“hold space”的内存空间，称为保持空间。<br>&ensp;&ensp;&ensp;&ensp;sed工作机制是每次自动读取一行到模式空间中，在模式空间中完成处理，将处理结果输出至标准输出设备；在模式空间中处理一行内容后会继续处理下一行。那么对于处理过的行还有其他处理时，我们就把处理过的行送至保持空间中，然后在后续处理中在传回至模式空间中。<br><strong><em>常见命令：</em></strong></p><p>P： 打印模式空间开端至\n内容，并追加到默认输出之前<br>h: 把模式空间中的内容覆盖至保持空间中<br>H：把模式空间中的内容追加至保持空间中<br>g: 从保持空间取出数据覆盖至模式空间<br>G：从保持空间取出内容追加至模式空间<br>x: 把模式空间中的内容与保持空间中的内容进行互换<br>n: 读取匹配到的行的下一行覆盖至模式空间<br>N：读取匹配到的行的下一行追加至模式空间<br>d: 删除模式空间中的行<br>D：如果模式空间包含换行符，则删除直到第一个换行符的模式空间中的文本，并不会读取新的输入行，而使用合成的模式空间重新启动循环。如果模式空间不包含换行符，则会像发出d命令那样启动正常的新循环</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol><li>seq 10 | sed -n ‘n;p’  </li></ol><p>(1)首先-n禁止默认的打印功能，因为没有地址定界，所以默认为全文，首先读第一行至模式空间，n表示匹配到的下一行覆盖至模式空间，即用第二行覆盖模式空间内的第一行;</p><p>(2)然后读取第三行，继续-n操作，所以打印出来的都为偶数行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 10 | sed -n 'n;p' </span></span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure></p><ol start="2"><li>seq 10 | sed ‘1!G;h;$!d’ </li></ol><p>(1)依然是默认为全文，首先读取第一行，1！G，不做操作，h，覆盖至保持空间，因为保持空间本开始没有内容，所以此时保持空间内容为第一行，$!d，不是最后一行，执行删除。此第一行操作完毕，此时模式空间没有内容，保持空间为第一行；</p><p>(2)再读取第二行，1！G，因为不是第一行，执行G操作，即从保持空间取出内容追加至模式空间，此时模式空间的内容为第二行+第一行，且第一行在下面，h，把模式空间中的内容覆盖至保持空间中，此时保持空间为原来的模式空间内容，$!d，不是最后一行，执行删除。此时模式空间为空，保持空间为第二行+第一行。</p><p>(3)直到读到最后一行，1！G，此时模式空间内为第十行到第一行，h，再把模式空间内容覆盖至保持空间，最后$!d,因为是最后一行，所以不予操作，最后将模式空间的内容打印出来，即逆序显示。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 10 | sed '1!G;h;$!d' </span></span><br><span class="line">10</span><br><span class="line">9</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>seq 10 | sed ‘$!d’<br>默认为全文内容，$!d表示不是最后一行执行d删除操作，所以只打印出最后一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#seq 10 | sed '$!d'</span></span><br><span class="line">10</span><br></pre></td></tr></table></figure></li><li><p>将文本文件的n和n+1行合并为一行， n为奇数行  </p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">seq 10 | sed <span class="string">'N;s@\n@ @'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;sed是一种流编辑器、行编辑器。它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="sed" scheme="http://yoursite.com/tags/sed/"/>
    
      <category term="文本工具" scheme="http://yoursite.com/tags/%E6%96%87%E6%9C%AC%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>文本处理三剑客之awk</title>
    <link href="http://yoursite.com/2019/01/03/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bawk/"/>
    <id>http://yoursite.com/2019/01/03/文本处理三剑客之awk/</id>
    <published>2019-01-02T17:24:16.512Z</published>
    <updated>2019-01-12T04:35:49.124Z</updated>
    
    <content type="html"><![CDATA[<p> Linux文本处理工具三剑客：grep、sed、awk.其中grep是一种文本过滤工具,sed是文本行编辑器,而awk是一种报表生成器，就是对文件进行格式化处理。这里的格式化就是对文件内容进行各种“排版”，进而格式化显示。<br>    在Linux之上我们使用的是GNU awk，简称gawk.我们通过man gawk得知gawk–模式扫描和处理语言，gawk是一种过程式编程语言。gawk还支持条件判断、数组、循环等各种编程语言中所有可以使用的功能，因此我们还可以把gwak称为一种脚本语言解释器。</p><ul><li>基本用法：<br>  awk [options] ‘program’ var=value file…<br>  awk [options] -f programfile var=value file…<br>  awk [options] ‘BEGIN{action;… }pattern{action;… }END{action;… }’ file …<br>  awk程序可由：BEGIN语句块、能够使用模式匹配的通用语句块、END语句块，共3部分组成<br>  program 通常是被放在单引号中<br>  选项：<br>  -F “分隔符” 指明输入时用到的字段分隔符<br>  -v var=value 变量赋值</li><li>awk语言</li></ul><p>基本格式：awk [options] ‘program’ file…<br>Program：pattern{action statements;..}</p><blockquote><p>pattern和action</p><blockquote><p>pattern部分决定动作语句何时触发及触发事件</p><blockquote><p>BEGIN,END</p></blockquote></blockquote></blockquote><blockquote><blockquote><p>action statements对数据进行处理，放在{}内指明</p><blockquote><p>print, printf</p></blockquote></blockquote></blockquote><p>分割符、域和记录</p><blockquote><p>awk执行时，由分隔符分隔的字段（域）标记1,1,2…n称为域标识。n称为域标识。0为所有域，注意：此时和shell中变量符含义不同文件的每一行称为记录省略action，则默认执行print符含义不同文件的每一行称为记录省略action，则默认执行print0 的操作</p><ul><li>awk工作原理<br>  第一步：执行BEGIN{action;… }语句块中的语句<br>  第二步：从文件或标准输入(stdin)读取一行，然后执行pattern{ action;… }语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。<br>  第三步：当读至输入流末尾时，执行END{action;…}语句块</li></ul></blockquote><p>    BEGIN语句块在awk开始从输入流中读取行之前被执行，这是一个可选的语句块，<br>比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中<br>    END语句块在awk从输入流中读取完所有的行之后即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块<br>    pattern语句块中的通用命令是最重要的部分，也是可选的。如果没有提供pattern语句块，则默认执行<code>{ print }</code>，即打印每一个读取到的行，awk读取的每一行都会执行该语句块</p><h2 id="awk的输出命令之一：print"><a href="#awk的输出命令之一：print" class="headerlink" title="awk的输出命令之一：print"></a>awk的输出命令之一：print</h2><p>print格式：print item1, item2, …</p><blockquote><p>item:字符串，用引号引用;</p><blockquote><p>print “hello”,”world”</p></blockquote></blockquote><blockquote><p>变量：显示变量的值，也可以直接使用变量的名进行引用;</p><blockquote><p>print name</p></blockquote></blockquote><p>要点：</p><ol><li>各item之间需要逗号分隔：而输出的分隔符为默认空白字符;</li><li>输出item可以字符串，也可是数值；当前记录的字段、变量或awk的表达式:数值会被隐士转换为字符串进行输出；</li><li>如省略item，相当于”print $0”,用于输出整行;</li><li>输出空白字符：print “ “</li></ol><p>示例：</p><blockquote><p>awk -F: ‘{print}’ /etc/passwd 等同于 awk -F: ‘{print $0}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#cat /etc/passwd</span></span><br><span class="line">&gt; root:x:0:0:root:/root:/bin/bash</span><br><span class="line">&gt; bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;print&#125;' /etc/passwd</span></span><br><span class="line">&gt; root:x:0:0:root:/root:/bin/bash</span><br><span class="line">&gt; bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>awk -F: ‘{print “wang”}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;print "wang"&#125;' /etc/passwd  </span></span><br><span class="line">&gt; <span class="comment"># 以：为分隔符，打印wang</span></span><br><span class="line">&gt; wang</span><br><span class="line">&gt; wang</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>awk -F: ‘{print $1}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;print $1&#125;' /etc/passwd  </span></span><br><span class="line">&gt; <span class="comment"># 以：为分隔符，打印第一列</span></span><br><span class="line">&gt; root</span><br><span class="line">&gt; bin</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>awk -F: ‘{print 1”\t”1”\t”3}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;print $1" \t"$3&#125;' /etc/passwd</span></span><br><span class="line">&gt; <span class="comment"># 以：为分隔符，打印第一列、第三列加上空格和制表符</span></span><br><span class="line">&gt; root    0</span><br><span class="line">&gt; bin     1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>grep “^UUID” /etc/fstab | awk ‘{print 2,2,4}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#grep "^UUID" /etc/fstab | awk '&#123;print $2,$4&#125;'</span></span><br><span class="line">&gt; / defaults</span><br><span class="line">&gt; /boot defaults</span><br><span class="line">&gt; /data defaults</span><br><span class="line">&gt; swap defaults</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="awk变量"><a href="#awk变量" class="headerlink" title="awk变量"></a>awk变量</h1><p>变量：内置和自定义变量</p><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><ol><li><p>FS：输入字段分隔符，默认为空白字符</p><blockquote><p>awk -v FS=’:’ ‘{print 1,FS,1,FS,3}’ /etc/passwd<br>等同于awk -F: ‘{print 1,”:”,1,”:”,3}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -v FS=':' '&#123;print $1,FS,$3&#125;' /etc/passwd</span></span><br><span class="line">&gt; root : 0</span><br><span class="line">&gt; bin : 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>OFS：输出字段分隔符，默认为空白字符</p><blockquote><p>awk -v FS=’:’ -v OFS=’:’ ‘{print 1,1,3,$7}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -v FS=':' -v OFS=':' '&#123;print $1,$3,$7&#125;' /etc/passwd</span></span><br><span class="line">&gt; root:0:/bin/bash</span><br><span class="line">&gt; bin:1:/sbin/nologin</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>RS：输入记录分隔符，指定输入时的换行符</p><blockquote><p>awk -v RS=’:’ ‘{print }’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -v RS=':' '&#123;print &#125;' /etc/passwd</span></span><br><span class="line">&gt; root</span><br><span class="line">&gt; x</span><br><span class="line">&gt; 0</span><br><span class="line">&gt; 0</span><br><span class="line">&gt; root</span><br><span class="line">&gt; /root</span><br><span class="line">&gt; /bin/bash</span><br><span class="line">&gt; bin</span><br><span class="line">&gt; x</span><br><span class="line">&gt; 1</span><br><span class="line">&gt; 1</span><br><span class="line">&gt; bin</span><br><span class="line">&gt; /bin</span><br><span class="line">&gt; /sbin/nologin</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>ORS：输出记录分隔符，输出时用指定符号代替换行符</p><blockquote><p>awk -v RS=’:’ -v ORS=’\t’ ‘{print }’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -v RS=':' -v ORS='\t' '&#123;print &#125;' /etc/passwd   </span></span><br><span class="line">&gt; root    x       0       0       root    /root   /bin/bash</span><br><span class="line">&gt; bin     x       1       1       bin     /bin    /sbin/nologin</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>NF：字段数量</p><blockquote><p>awk -F: ‘{print NF}’ /etc/passwd 引用变量时，变量前不需加$</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;print NF&#125;' /etc/passwd</span></span><br><span class="line">&gt; 7</span><br><span class="line">&gt; 7</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>awk -F: ‘{print $(NF-1)}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;print $(NF-1)&#125;' /etc/passwd</span></span><br><span class="line">&gt; /root</span><br><span class="line">&gt; /bin</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>NR：记录号(如果是多个文件，它会一起计数的)</p><blockquote><p>awk ‘{print NR}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '&#123;print NR&#125;' /etc/passwd</span></span><br><span class="line">&gt; 1</span><br><span class="line">&gt; 2</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>awk END’{print NR}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk END'&#123;print NR&#125;' /etc/passwd </span></span><br><span class="line">&gt; 58</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>FNR：各文件分别计数,记录号</p><blockquote><p>awk ‘{print FNR}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '&#123;print FNR&#125;' /etc/passwd</span></span><br><span class="line">&gt; 1</span><br><span class="line">&gt; 2</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>FILENAME：当前文件名</p><blockquote><p>awk ‘{print FILENAME}’ /etc/fstab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '&#123;print FILENAME&#125;' /etc/fstab </span></span><br><span class="line">&gt; /etc/fstab</span><br><span class="line">&gt; /etc/fstab</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>ARGC：命令行参数的个数</p><blockquote><p>awk ‘{print ARGC}’ /etc/fstab /etc/inittab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '&#123;print ARGC&#125;' /etc/passwd</span></span><br><span class="line">&gt; 2</span><br><span class="line">&gt; 2</span><br><span class="line">&gt; ``` </span><br><span class="line">&gt; 10. ARGV：数组，保存的是命令行所给定的各参数  </span><br><span class="line">&gt; &gt;awk <span class="string">'&#123;print ARGV[0]&#125;'</span> /etc/passwd  </span><br><span class="line">&gt; ```bash</span><br><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '&#123;print ARGV[0]&#125;' /etc/passwd  </span></span><br><span class="line">&gt; awk</span><br><span class="line">&gt; awk</span><br><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '&#123;print ARGV[1]&#125;' /etc/passwd </span></span><br><span class="line">&gt; /etc/passwd</span><br><span class="line">&gt; /etc/passwd</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="自定义变量-区分字符大小写"><a href="#自定义变量-区分字符大小写" class="headerlink" title="自定义变量(区分字符大小写)"></a>自定义变量(区分字符大小写)</h2><ol><li><p>-v var=value</p></li><li><p>在program中直接定义</p><p> 示例：</p><blockquote><p>awk -v name=”test” ‘{print $1,name}’ /etc/fstab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -v name="test" '&#123;print $1,name&#125;' /etc/fstab </span></span><br><span class="line">&gt;  <span class="built_in">test</span></span><br><span class="line">&gt; <span class="comment"># test</span></span><br><span class="line">&gt; <span class="comment"># test</span></span><br><span class="line">&gt; <span class="comment"># test</span></span><br><span class="line">&gt; <span class="comment"># test</span></span><br><span class="line">&gt; <span class="comment"># test</span></span><br><span class="line">&gt; <span class="comment"># test</span></span><br><span class="line">&gt; <span class="comment"># test</span></span><br><span class="line">&gt; UUID=d33ffb51-004a-4c4d-ac00-c40b9e2c2920 <span class="built_in">test</span></span><br><span class="line">&gt; UUID=7d1b5c8d-8054-4496-befe-267963e07605 <span class="built_in">test</span></span><br><span class="line">&gt; UUID=7556e4a8-128e-457f-99f7-3f1ccf517952 <span class="built_in">test</span></span><br><span class="line">&gt; UUID=152e9015-e93a-44f9-8c7d-65fe67fb5201 <span class="built_in">test</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>awk ‘{sex=”male”;print $1,sex,age;age=”18”}’ /etc/fstab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '&#123;sex="male";print $1,sex,age;age="18"&#125;' /etc/fstab </span></span><br><span class="line">&gt;  male        <span class="comment">#第一次age变量没有值，为空。所以变量应该先赋值，后使用</span></span><br><span class="line">&gt; <span class="comment"># male 18</span></span><br><span class="line">&gt; <span class="comment"># male 18</span></span><br><span class="line">&gt; <span class="comment"># male 18</span></span><br><span class="line">&gt; <span class="comment"># male 18</span></span><br><span class="line">&gt; <span class="comment"># male 18</span></span><br><span class="line">&gt; <span class="comment"># male 18</span></span><br><span class="line">&gt; <span class="comment"># male 18</span></span><br><span class="line">&gt; UUID=d33ffb51-004a-4c4d-ac00-c40b9e2c2920 male 18</span><br><span class="line">&gt; UUID=7d1b5c8d-8054-4496-befe-267963e07605 male 18</span><br><span class="line">&gt; UUID=7556e4a8-128e-457f-99f7-3f1ccf517952 male 18</span><br><span class="line">&gt; UUID=152e9015-e93a-44f9-8c7d-65fe67fb5201 male 18</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#cat awkscript</span></span><br><span class="line">&#123;<span class="built_in">print</span> script,<span class="variable">$1</span>,<span class="variable">$2</span>&#125;    <span class="comment">#print的内容可以写在一个脚本，可以用 -f  调用。</span></span><br><span class="line">[root@cetos7 ~]<span class="comment">#awk -F: -f awkscript script="awk" /etc/passwd</span></span><br><span class="line">awk root x</span><br><span class="line">awk bin x</span><br><span class="line">awk daemon x</span><br><span class="line">awk adm x</span><br></pre></td></tr></table></figure><h1 id="awk的输出命令之二-printf命令"><a href="#awk的输出命令之二-printf命令" class="headerlink" title="awk的输出命令之二:printf命令"></a>awk的输出命令之二:printf命令</h1><p>格式化输出：printf “FORMAT” , item1, item2, …</p><ul><li>必须指定FORMAT</li><li>不会自动换行，需要显式给出换行控制符，\n</li><li>FORMAT中需要分别为后面每个item指定格式符</li></ul><ol><li>格式符：与item一一对应<br> %c：显示字符的ASCII码<br> %d, %i：显示十进制整数<br> %e, %E：显示科学计数法数值<br> %f：显示为浮点数<br> %g, %G：以科学计数法或浮点形式显示数值<br> %s：显示字符串<br> %u：无符号整数<br> %%：显示%自身</li><li>修饰符<br> #[.#] 第一个数字控制显示的宽度；第二个#表示小数点后精度，%3.1f</li></ol><ul><li><p>左对齐（默认右对齐） %-15s</p></li><li><p>显示数值的正负符号 %+dprintf示例</p><p>  示例：</p><blockquote><p>awk -F: ‘{printf “%s”,$1}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;printf "%s",$1&#125;'  /etc/passwd  </span></span><br><span class="line">&gt; rootbindaemonadmlpsyncshutdownhaltmailoperatorgamesftpnobodysystemd-networkdbuspolkitdlibstoragemgmtrpccolordsaslauthabrtsetroubleshootrtkitchronyrpcusernfsnobodyqemuunboundglustertssusbmuxdgeoclueradvdpulsegdmgnome-initial-setupsshdavahipostfixntptcpdumpxiealiceyanglizhaohuappapp2webuserapp3zhanggentoomagetomcatapachememcachedhttpd</span><br><span class="line">&gt; ```   </span><br><span class="line">&gt; &gt;awk -F: <span class="string">'&#123;printf "%-20s %10d\n",$1,$3&#125;'</span> /etc/passwd  </span><br><span class="line">&gt; </span><br><span class="line">&gt; &gt;awk -F: <span class="string">'&#123;printf "Username: %s,UID:%d\n",$1,$3&#125;'</span> /etc/passwd </span><br><span class="line">&gt; ```bash</span><br><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;printf "Username: %s,UID:%d\n",$1,$3&#125;' /etc/passwd  </span></span><br><span class="line">&gt; Username: root,UID:0</span><br><span class="line">&gt; Username: bin,UID:1</span><br><span class="line">&gt; ``` </span><br><span class="line">&gt; &gt;awk -F: <span class="string">'&#123;printf "Username: %15s,UID:%d\n",$1,$3&#125;'</span> /etc/passwd  </span><br><span class="line">&gt; ```bash</span><br><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;printf "Username: %15s,UID:%d\n",$1,$3&#125;' /etc/passwd</span></span><br><span class="line">&gt; Username:            root,UID:0</span><br><span class="line">&gt; Username:             bin,UID:1</span><br><span class="line">&gt; Username:          daemon,UID:2</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><blockquote><p>awk -F: ‘{printf “Username: %-15s,UID:%d\n”,1,1,3}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;printf "Username: %-15s,UID:%d\n",$1,$3&#125;' /etc/passwd</span></span><br><span class="line">&gt; Username: root           ,UID:0</span><br><span class="line">&gt; Username: bin            ,UID:1</span><br><span class="line">&gt; Username: daemon         ,UID:2</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><ol><li><p>算术操作符：<br> x+y, x-y, x*y, x/y, x^y, x%y<br> -x：转换为负数<br> +x：将字符串转换为数值</p></li><li><p>字符串操作符：没有符号的操作符，字符串连接</p></li><li><p>赋值操作符：<br> =, +=, -=, *=, /=, %=, ^=，++, –<br> 下面两语句有何不同</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk ‘BEGIN&#123;i=0;<span class="built_in">print</span> ++i,i&#125;’  <span class="comment">#先自加再打印</span></span><br><span class="line">awk ‘BEGIN&#123;i=0;<span class="built_in">print</span> i++,i&#125;’  <span class="comment">#先打印再自加</span></span><br></pre></td></tr></table></figure></li><li><p>比较操作符：<br> ==, !=, &gt;, &gt;=, &lt;, &lt;=</p></li><li><p>模式匹配符：</p><p> ~：左边是否和右边匹配，包含</p><p> !~：是否不匹配</p><p> 示例：</p><blockquote><p>awk -F: ‘0 ~ /root/{print0 ~ /root/{print1}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '$0 ~ /root/&#123;print $1&#125;' /etc/passwd   </span></span><br><span class="line">&gt; root</span><br><span class="line">&gt; operator</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>awk ‘$0~”^root”‘ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '$0~"^root"' /etc/passwd  </span></span><br><span class="line">&gt; root:x:0:0:root:/root:/bin/bash</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>awk -F: ‘$3==0’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '$3==0' /etc/passwd   </span></span><br><span class="line">&gt; root:x:0:0:root:/root:/bin/bash</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>逻辑操作符：与&amp;&amp;，或||，非!</p><p> 示例：</p><blockquote><p>awk -F: ‘3&gt;1000{print3&gt;1000{print1,$3}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '$3&gt;1000&#123;print $1,$3&#125;' /etc/passwd</span></span><br><span class="line">&gt; nfsnobody 65534</span><br><span class="line">&gt; alice 1003</span><br><span class="line">&gt; yang 1004</span><br><span class="line">&gt; ·········</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>awk -F: ‘3&lt;1000{print3&lt;1000{print1,$3}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '$3&lt;1000&#123;print $1,$3&#125;' /etc/passwd </span></span><br><span class="line">&gt; root 0</span><br><span class="line">&gt; bin 1</span><br><span class="line">&gt; daemon 2</span><br><span class="line">&gt; ·········</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>条件表达式（三目表达式）</p><p> selector?if-true-expression:if-false-expression</p><p> 示例：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#awk -F: '&#123;$3&gt;=1000 ? usertype="Common User":usertype="SysUser";printf "%15s:%-s\n",$1,usertype&#125;' /etc/passwd</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="awk-PATTERN"><a href="#awk-PATTERN" class="headerlink" title="awk PATTERN"></a>awk PATTERN</h2><p>PATTERN:根据pattern条件，过滤匹配的行，再做处理</p><ol><li><p>如果未指定：空模式，匹配每一行</p></li><li><p>/regular expression/：仅处理能够模式匹配到的行，需要用/ /括起来</p><blockquote><p>awk ‘/^UUID/{print $1}’ /etc/fstab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '/^UUID/&#123;print $1&#125;' /etc/fstab </span></span><br><span class="line">&gt; UUID=d33ffb51-004a-4c4d-ac00-c40b9e2c2920</span><br><span class="line">&gt; UUID=7d1b5c8d-8054-4496-befe-267963e07605</span><br><span class="line">&gt; UUID=7556e4a8-128e-457f-99f7-3f1ccf517952</span><br><span class="line">&gt; UUID=152e9015-e93a-44f9-8c7d-65fe67fb5201</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>awk ‘!/^UUID/{print $1}’ /etc/fstab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '!/^UUID/&#123;print $1&#125;' /etc/fstab </span></span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">#</span></span><br><span class="line">&gt; <span class="comment">#</span></span><br><span class="line">&gt; <span class="comment">#</span></span><br><span class="line">&gt; <span class="comment">#</span></span><br><span class="line">&gt; <span class="comment">#</span></span><br><span class="line">&gt; <span class="comment">#</span></span><br><span class="line">&gt; <span class="comment">#</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>relational expression: 关系表达式，结果为“真”才会被处理</p><p> 真：结果为非0值，非空字符串</p><p> 假：结果为空字符串或0值</p><p> 示例：</p><blockquote><p>awk -F: ‘i=1;j=1{print i,j}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: 'i=1;j=1&#123;print i,j&#125;' /etc/passwd</span></span><br><span class="line">&gt; root:x:0:0:root:/root:/bin/bash</span><br><span class="line">&gt; 1 1</span><br><span class="line">&gt; bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">&gt; 1 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>awk ‘!0’ /etc/passwd ; awk ‘!1’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '!0' /etc/passwd</span></span><br><span class="line">&gt; root:x:0:0:root:/root:/bin/bash</span><br><span class="line">&gt; bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '!1' /etc/passwd</span></span><br><span class="line">&gt; root:x:0:0:root:/root:/bin/bash</span><br><span class="line">&gt; bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>awk -F: ‘NF==”/bin/bash” {printNF==”/bin/bash” {print1,$NF}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '$NF=="/bin/bash" &#123;print $1,$NF&#125;' /etc/passwd       </span></span><br><span class="line">&gt; root /bin/bash</span><br><span class="line">&gt; xie /bin/bash</span><br><span class="line">&gt; alice /bin/bash</span><br><span class="line">&gt; yang /bin/bash</span><br><span class="line">&gt; li /bin/bash</span><br><span class="line">&gt; zhao /bin/bash</span><br><span class="line">&gt; hu /bin/bash</span><br><span class="line">&gt; app /bin/bash</span><br><span class="line">&gt; app3 /bin/bash</span><br><span class="line">&gt; zhang /bin/bash</span><br><span class="line">&gt; mage /bin/bash</span><br><span class="line">&gt; tomcat /bin/bash</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>awk -F: ‘NF /bashNF /bash/{print 1,1,NF}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '$NF ~ /bash$/&#123;print $1,$NF&#125;' /etc/passwd</span></span><br><span class="line">&gt; root /bin/bash</span><br><span class="line">&gt; xie /bin/bash</span><br><span class="line">&gt; alice /bin/bash</span><br><span class="line">&gt; yang /bin/bash</span><br><span class="line">&gt; li /bin/bash</span><br><span class="line">&gt; zhao /bin/bash</span><br><span class="line">&gt; hu /bin/bash</span><br><span class="line">&gt; app /bin/bash</span><br><span class="line">&gt; app3 /bin/bash</span><br><span class="line">&gt; zhang /bin/bash</span><br><span class="line">&gt; mage /bin/bash</span><br><span class="line">&gt; tomcat /bin/bash</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>line ranges：行范围</p><p> startline,endline：/pat1/,/pat2/ 不支持直接给出数字格式</p><blockquote><p>awk -F: ‘/^root/,/^adm/{print $1}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '/^root/,/^adm/&#123;print $1&#125;' /etc/passwd</span></span><br><span class="line">&gt; root</span><br><span class="line">&gt; bin</span><br><span class="line">&gt; daemon</span><br><span class="line">&gt; adm</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>awk -F: ‘(NR&gt;5&amp;&amp;NR&lt;10){print NR,$1}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '(NR&gt;5&amp;&amp;NR&lt;10)&#123;print NR,$1&#125;' /etc/passwd      </span></span><br><span class="line">&gt; 6 sync</span><br><span class="line">&gt; 7 shutdown</span><br><span class="line">&gt; 8 halt</span><br><span class="line">&gt; 9 mail</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>BEGIN/END模式</p><p> BEGIN{}：仅在开始处理文件中的文本之前执行一次</p><p> END{}：仅在文本处理完成之后执行一次</p><p> 示例 :</p><blockquote><p>awk -F: ‘BEGIN{print “USER USERID”} {print 1”:”1”:”3} END{print “END FILE”}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: 'BEGIN&#123;print "USER USERID"&#125; &#123;print $1":"$3&#125; END&#123;print "END FILE"&#125;' /etc/passwd</span></span><br><span class="line">&gt; USER USERID</span><br><span class="line">&gt; root:0</span><br><span class="line">&gt; bin:1</span><br><span class="line">&gt; ······</span><br><span class="line">&gt; memcached:986</span><br><span class="line">&gt; httpd:80</span><br><span class="line">&gt; END FILE</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>awk -F: ‘{print “USER USERID”;print 1”:”1”:”3} END{print “END FILE”}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: '&#123;print "USER USERID";print $1":"$3&#125; END&#123;print "END FILE"&#125;' /etc/passwd  </span></span><br><span class="line">&gt; USER USERID</span><br><span class="line">&gt; root:0</span><br><span class="line">&gt; USER USERID</span><br><span class="line">&gt; bin:1</span><br><span class="line">&gt; ······</span><br><span class="line">&gt; USER USERID</span><br><span class="line">&gt; memcached:986</span><br><span class="line">&gt; USER USERID</span><br><span class="line">&gt; httpd:80</span><br><span class="line">&gt; END FILE</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>awk -F: ‘BEGIN{print “USER UID \n————— “}{print 1,1,3}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: 'BEGIN&#123;print "USER UID \n--------------- "&#125;&#123;print $1,$3&#125;' /etc/passwd</span></span><br><span class="line">&gt; USER UID </span><br><span class="line">&gt; --------------- </span><br><span class="line">&gt; root 0</span><br><span class="line">&gt; bin 1</span><br><span class="line">&gt; ······</span><br><span class="line">&gt; memcached:986</span><br><span class="line">&gt; httpd:80</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>awk -F: ‘BEGIN{print “USER UID \n—————– “}{print 1,1,3}END{print”=================”}’ /etc/passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk -F: 'BEGIN&#123;print "USER UID \n----------------- "&#125;&#123;print $1,$3&#125;END&#123;print"================="&#125;'  /etc/passwd </span></span><br><span class="line">&gt; USER UID </span><br><span class="line">&gt; ----------------- </span><br><span class="line">&gt; root 0</span><br><span class="line">&gt; bin 1</span><br><span class="line">&gt; ······</span><br><span class="line">&gt; memcached 986</span><br><span class="line">&gt; httpd 80</span><br><span class="line">&gt; =================</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>seq 5 | awk ‘i=0’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#seq 5 | awk 'i=0'</span></span><br><span class="line">&gt; [root@cetos7 ~]<span class="comment">#</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>seq 5 | awk ‘i=1’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#seq 5 | awk 'i=1'  </span></span><br><span class="line">&gt; 1</span><br><span class="line">&gt; 2</span><br><span class="line">&gt; 3</span><br><span class="line">&gt; 4</span><br><span class="line">&gt; 5</span><br><span class="line">&gt; ``` </span><br><span class="line">&gt; &gt;seq 5 | awk <span class="string">'i=!i'</span>  </span><br><span class="line">&gt; ```bash</span><br><span class="line">&gt; [root@cetos7 ~]<span class="comment">#seq 5 | awk 'i=!i' </span></span><br><span class="line">&gt; 1</span><br><span class="line">&gt; 3</span><br><span class="line">&gt; 5</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>seq 5 | awk ‘{i=!i;print i}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#seq 5 | awk '&#123;i=!i;print i&#125;'</span></span><br><span class="line">&gt; 1</span><br><span class="line">&gt; 0</span><br><span class="line">&gt; 1</span><br><span class="line">&gt; 0</span><br><span class="line">&gt; 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>seq 5 | awk ‘!(i=!i)’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#seq 5 | awk '!(i=!i)</span></span><br><span class="line">&gt; 2</span><br><span class="line">&gt; 4</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>seq 5 | awk -v i=1 ‘i=!i’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#seq 5 | awk -v i=1 'i=!i'</span></span><br><span class="line">&gt; 2</span><br><span class="line">&gt; 4</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="awk-action"><a href="#awk-action" class="headerlink" title="awk action"></a>awk action</h1><p>常用的action分类</p><ul><li><p>Expressions：算术，比较表达式等</p></li><li><p>Control statements：if, while等</p></li><li><p>Compound statements：组合语句</p></li><li><p>input statements</p></li><li><p>output statements：print等</p><h1 id="awk控制语句"><a href="#awk控制语句" class="headerlink" title="awk控制语句"></a>awk控制语句</h1></li></ul><ol><li><p>if-else</p><p> 语法：if(condition){statement;…}[else statement]</p><p> if(condition1){statement1}else if(condition2){statement2}else{statement3}</p><p> 使用场景：对awk取得的整行或某个字段做条件判断</p><p> 示例：</p><blockquote><p>df -h|awk -F% ‘/^\/dev/{print 1}’|awk ‘1}’|awk ‘NF&gt;=10{print 1,1,5}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#df -h|awk -F% '/^\/dev/&#123;print $1&#125;'|awk '$NF&gt;=10&#123;print $1,$5&#125;'  </span></span><br><span class="line">&gt; /dev/sda2 21</span><br><span class="line">&gt; /dev/sda1 17</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>awk ‘BEGIN{ test=100;if(test&gt;90){print “very good”}else if(test&gt;60){ print “good”}else{print “no pass”}}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk 'BEGIN&#123; test=100;if(test&gt;90)&#123;print "very good"&#125;else if(test&gt;60)&#123; print "good"&#125;else&#123;print "no pass"&#125;&#125;'  </span></span><br><span class="line">&gt; very good</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>while循环<br> 语法：while(condition){statement;…}<br> 条件“真”，进入循环；条件“假”，退出循环<br> 使用场景：<br> 对一行内的多个字段逐一类似处理时使用<br> 对数组中的各元素逐一处理时使用<br> 示例：</p><blockquote><p>awk ‘/^[[:space:]]*linux16/{i=1;while(i&lt;=NF){if(length(i)&gt;=10){printi)&gt;=10){print1,length($i)};i++}}’ /etc/grub2.cfg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '/^[[:space:]]*linux16/&#123;i=1;while(i&lt;=NF)&#123;if(length($i)&gt;=10)&#123;print $1,length($i)&#125;;i++&#125;&#125;' /etc/grub2.cfg </span></span><br><span class="line">&gt; linux16 30</span><br><span class="line">&gt; linux16 46</span><br><span class="line">&gt; linux16 16</span><br><span class="line">&gt; linux16 16</span><br><span class="line">&gt; linux16 50</span><br><span class="line">&gt; linux16 46</span><br><span class="line">&gt; linux16 16</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>do-while循环<br> 语法：do {statement;…}while(condition)<br> 意义：无论真假，至少执行一次循环体<br> 示例：</p><blockquote><p>awk ‘BEGIN{total=0;i=0;do{ total+=i;i++ } while( i&lt;=100 );print total}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk 'BEGIN&#123;total=0;i=0;do&#123; total+=i;i++ &#125; while( i&lt;=100 );print total&#125;'</span></span><br><span class="line">&gt; 5050</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>for循环<br> 语法：for(expr1;expr2;expr3) {statement;…}<br> 常见用法：<br> for(variable assignment;condition;iteration process)<br> {for-body}</p></li><li><p>特殊用法：能够遍历数组中的元素<br> 语法：for(var in array) {for-body}<br> 示例：</p><blockquote><p>awk ‘/^[[:space:]]*linux16/{for(i=1;i&lt;=NF;i++) {print i,length(i,length(i)}}’ /etc/grub2.cfg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;             ^ syntax error</span><br><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '/^[[:space:]]*linux16/&#123;for(i=1;i&lt;=NF;i++) &#123;print $i,length($i)&#125;&#125;' /etc/grub2.cfg</span></span><br><span class="line">&gt; linux16 7</span><br><span class="line">&gt; /vmlinuz-3.10.0-862.el7.x86_64 30</span><br><span class="line">&gt; root=UUID=d33ffb51-004a-4c4d-ac00-c40b9e2c2920 46</span><br><span class="line">&gt; ro 2</span><br><span class="line">&gt; crashkernel=auto 16</span><br><span class="line">&gt; rhgb 4</span><br><span class="line">&gt; quiet 5</span><br><span class="line">&gt; LANG=en_US.UTF-8 16</span><br><span class="line">&gt; linux16 7</span><br><span class="line">&gt; /vmlinuz-0-rescue-adda87b767b846f69b46c9188469daa7 50</span><br><span class="line">&gt; root=UUID=d33ffb51-004a-4c4d-ac00-c40b9e2c2920 46</span><br><span class="line">&gt; ro 2</span><br><span class="line">&gt; crashkernel=auto 16</span><br><span class="line">&gt; rhgb 4</span><br><span class="line">&gt; quiet 5</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>switch语句<br> 语法：switch(expression) {case VALUE1 or /REGEXP/: statement1; case<br> VALUE2 or /REGEXP2/: statement2; …; default: statementn}</p></li><li><p>break和continue</p><p> continue:满足条件则结束本次循环，不满足条件，继续执行。</p><blockquote><p>awk ‘BEGIN{sum=0;for(i=1;i&lt;=100;i++){if(i%2==0)continue;sum+=i}print sum}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk 'BEGIN&#123;sum=0;for(i=1;i&lt;=100;i++)&#123;if(i%2==0)continue;sum+=i&#125;print sum&#125;' </span></span><br><span class="line">&gt; 2500</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><p>break:满足条件则结束整个循环</p><blockquote><p>awk ‘BEGIN{sum=0;for(i=1;i&lt;=100;i++){if(i==50)break;sum+=i}print sum}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk 'BEGIN&#123;sum=0;for(i=1;i&lt;=100;i++)&#123;if(i==50)break;sum+=i&#125;print sum&#125;'   </span></span><br><span class="line">&gt; 1225</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>next:提前结束对本行处理而直接进入下一行处理（awk自身循环）</p><blockquote><p>awk ‘{if (NR%2==0)next;print NR,$0}’ /etc/fstab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '&#123;if (NR%2==0)next;print NR,$0&#125;' /etc/fstab  </span></span><br><span class="line">&gt; 1 </span><br><span class="line">&gt; 3 <span class="comment"># /etc/fstab</span></span><br><span class="line">&gt; 5 <span class="comment">#</span></span><br><span class="line">&gt; 7 <span class="comment"># See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info</span></span><br><span class="line">&gt; 9 UUID=d33ffb51-004a-4c4d-ac00-c40b9e2c2920 /                       xfs     defaults        0 0</span><br><span class="line">&gt; 11 UUID=7556e4a8-128e-457f-99f7-3f1ccf517952 /data                   xfs     defaults        0</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="awk数组"><a href="#awk数组" class="headerlink" title="awk数组"></a>awk数组</h1><ol><li><p>关联数组：array[index-expression]</p><p> index-expression:</p><blockquote><p>可使用任意字符串；字符串要使用双引号括起来<br>如果某数组元素事先不存在，在引用时，awk会自动创建此元素，并将其值初始化为“空串”<br>若要判断数组中是否存在某元素，要使用“index in array” 格式进行遍历</p></blockquote></li></ol><p>示例：</p><blockquote><p>awk ‘BEGIN{weekdays[“mon”]=”Monday”;weekdays[“tue”]=”Tuesday”;print weekdays[“mon”]}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk 'BEGIN&#123;weekdays["mon"]="Monday";weekdays["tue"]="Tuesday";print weekdays["mon"]&#125;'</span></span><br><span class="line">&gt; Monday</span><br><span class="line">&gt; ```  </span><br><span class="line">&gt; 2. 若要遍历数组中的每个元素，要使用<span class="keyword">for</span>循环  </span><br><span class="line">&gt; <span class="keyword">for</span>(var <span class="keyword">in</span> array) &#123;<span class="keyword">for</span>-body&#125;  </span><br><span class="line">&gt; 注意：var会遍历array的每个索引  </span><br><span class="line">&gt; 示例：  </span><br><span class="line">&gt; awk<span class="string">'BEGIN&#123;weekdays["mon"]="Monday";weekdays["tue"]="Tuesday";for(i in weekdays) &#123;print weekdays[i]&#125;&#125;'</span>  </span><br><span class="line">&gt; &gt;netstat -tan | awk <span class="string">'/^tcp/&#123;state[$NF]++&#125;END&#123;for(i in state) &#123; print i,state[i]&#125;&#125;'</span></span><br><span class="line">&gt; ```bash</span><br><span class="line">&gt; [root@cetos7 ~]<span class="comment">#netstat -tan | awk '/^tcp/&#123;state[$NF]++&#125;END&#123;for(i in state) &#123; print i,state[i]&#125;&#125;'</span></span><br><span class="line">&gt; LISTEN 10</span><br><span class="line">&gt; ESTABLISHED 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>awk ‘{ip[$1]++}END{for(i in ip) {print i,ip[i]}}’ /var/log/httpd/access_log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk '&#123;ip[$1]++&#125;END&#123;for(i in ip) &#123;print i,ip[i]&#125;&#125;' /var/log/httpd/access_log       </span></span><br><span class="line">&gt; 192.168.189.129 8</span><br><span class="line">&gt; 192.168.183.140 8</span><br><span class="line">&gt; 192.168.183.1 38</span><br><span class="line">&gt; 192.168.189.1 34</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="awk函数"><a href="#awk函数" class="headerlink" title="awk函数"></a>awk函数</h1><ol><li><p>数值处理：<br> rand()：返回0和1之间一个随机数</p><blockquote><p>awk ‘BEGIN{srand(); for (i=1;i&lt;=5;i++)print int(rand()*100)}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#awk 'BEGIN&#123;srand(); for (i=1;i&lt;=5;i++)print int(rand()*100)&#125;'  </span></span><br><span class="line">&gt; 87</span><br><span class="line">&gt; 77</span><br><span class="line">&gt; 39</span><br><span class="line">&gt; 61</span><br><span class="line">&gt; 76</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>字符串处理：<br> length([s])：返回指定字符串的长度<br> sub(r,s,[t])：对t字符串搜索r表示模式匹配的内容，并将第一个匹配内容替换为s</p><blockquote><p>echo “2008:08:08 08:08:08” | awk ‘sub(/:/, “-“, $1)’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#echo "2008:08:08 08:08:08" | awk 'sub(/:/,"-",$1)'</span></span><br><span class="line">&gt; 2008-08:08 08:08:08</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><p>gsub(r,s,[t])：对t字符串进行搜索r表示的模式匹配的内容，并全部替换为s所表示的内容</p><blockquote><p>echo “2008:08:08 08:08:08” | awk ‘gsub(/:/,”-“,$0)’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#echo "2008:08:08 08:08:08" | awk 'gsub(/:/,"-",$0)'</span></span><br><span class="line">&gt; 2008-08-08 08-08-08</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>• split(s,array,[r])：以r为分隔符，切割字符串s，并将切割后的结果保存至array所表示的数组中，第一个索引值为1,第二个索引值为2,…</p><blockquote><p>netstat -tn | awk ‘/^tcp&gt;/{split($5,ip,”:”);count[ip[1]]++}END{for (i in count) {print i,count[i]}}’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#netstat -tn | awk '/^tcp\&gt;/&#123;split($5,ip,":");count[ip[1]]++&#125;END&#123;for (i in count) &#123;print i,count[i]&#125;&#125;'</span></span><br><span class="line">&gt; 192.168.183.1 1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ol><li><p>自定义函数格式：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> name ( parameter, parameter, ... ) &#123;</span><br><span class="line">statements</span><br><span class="line"><span class="built_in">return</span> expression</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat fun.awk</span><br><span class="line"><span class="keyword">function</span> max(x,y) &#123;</span><br><span class="line">x&gt;y?var=x:var=y</span><br><span class="line"><span class="built_in">return</span> var</span><br><span class="line">&#125;</span><br><span class="line">BEGIN&#123;a=3;b=2;<span class="built_in">print</span> max(a,b)&#125;</span><br><span class="line">awk -f fun.awk</span><br></pre></td></tr></table></figure><h1 id="awk中调用shell命令"><a href="#awk中调用shell命令" class="headerlink" title="awk中调用shell命令"></a>awk中调用shell命令</h1><p>system命令<br>空格是awk中的字符串连接符，如果system中需要使用awk中的变量可以使用空格分隔，或者说除了awk的变量外其他一律用””引用起来<br>awk ‘BEGIN{system(“hostname”) }’<br>awk ‘BEGIN{score=100; system(“echo your score is “ score)}’</p><h1 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h1><p>将awk程序写成脚本，直接调用或执行<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat f1.awk</span><br><span class="line">&#123;<span class="keyword">if</span>(<span class="variable">$3</span>&gt;=1000)<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$3</span>&#125;</span><br><span class="line">awk -F: -f f1.awk /etc/passwd</span><br><span class="line">cat f2.awk</span><br><span class="line"><span class="comment">#!/bin/awk –f</span></span><br><span class="line"><span class="comment">#this is a awk script</span></span><br><span class="line">&#123;<span class="keyword">if</span>(<span class="variable">$3</span>&gt;=1000)<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$3</span>&#125;</span><br><span class="line">chmod +x f2.awk</span><br><span class="line">f2.awk –F: /etc/passwd</span><br></pre></td></tr></table></figure><p>向awk脚本传递参数<br>格式：<br>awkfile var=value var2=value2… Inputfile<br>注意：在BEGIN过程中不可用。直到首行输入完成以后，变量才可用。可以通过-v 参数，让awk在执行BEGIN之前得到变量的值。命令行中每一个指定的变量都需要一个-v参数<br>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat test.awk</span><br><span class="line"><span class="comment">#!/bin/awk –f</span></span><br><span class="line">&#123;<span class="keyword">if</span>(<span class="variable">$3</span> &gt;=min &amp;&amp; <span class="variable">$3</span>&lt;=max)<span class="built_in">print</span> <span class="variable">$1</span>,<span class="variable">$3</span>&#125;</span><br><span class="line">chmod +x test.awk</span><br><span class="line">test.awk -F: min=100 max=200 /etc/passwd</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li>文件ip_list.txt如下格式，请提取” .magedu.com” 前面的主机名部分并写入到回到该文件中<br> 1 blog.magedu.com<br> 2 <a href="http://www.magedu.com" target="_blank" rel="noopener">www.magedu.com</a><br> …<br> 999 study.magedu.com</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">'[ .]'</span> <span class="string">'&#123;print "."$3"."$4&#125;'</span>  ip_list.txt &gt;&gt; ip_list.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>统计/etc/fstab文件中每个文件系统类型出现的次数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/^UUID/&#123;filetype[$3]++&#125;END&#123;for (i in filetype)&#123;print i,filetype[i]&#125;&#125;'</span> /etc/fstab</span><br></pre></td></tr></table></figure><ol start="3"><li>统计/etc/fstab文件中每个单词出现的次数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;i=1;while(i&lt;=NF)&#123;word[$i]++;i++&#125;&#125;END&#123;for(num in word)&#123;print num,word[num]&#125;&#125;'</span> /etc/fstab</span><br></pre></td></tr></table></figure><ol start="4"><li>提取出字符串Yd$C@M05MB%9&amp;Bdh7dq+YVixp3vpw中的所有数字</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Yd<span class="variable">$C</span>@M05MB%9&amp;Bdh7dq+YVixp3vpw"</span>|awk <span class="string">'gsub(/[^0-9]/,"",$0)'</span></span><br><span class="line"><span class="comment">#把不是数字的全部用空代替掉</span></span><br></pre></td></tr></table></figure><ol start="5"><li>有一文件记录了1-100000之间随机的整数共5000个，存储的格式100,50,35,89…请取出其中最大和最小的整数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">','</span> <span class="string">'&#123;i=2;max=$1;min=$1;while(i&lt;=NF)&#123;if &#123;$i &gt; max&#125;&#123;max=$i&#125;else if&#123;$i&lt;min&#125;&#123;min=$i&#125;;i++&#125;END&#123;print "max="max,"min="min&#125;'</span> random.txt</span><br></pre></td></tr></table></figure><ol start="6"><li>解决DOS攻击生产案例：根据web日志或者或者网络连接数，监控当某个IP并发连接数或者短时内PV达到100，即调用防火墙命令封掉对应的IP，监控频率每隔5分钟。防火墙命令为：iptables -A INPUT -s IP -j REJECT</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;access[$1]++&#125;END&#123;for(i in access)&#123;if(access[i]&gt;=100)&#123;print i,access[i]&#125;&#125;&#125;'</span> /var/<span class="built_in">log</span>/httpd/access_log</span><br></pre></td></tr></table></figure><ol start="7"><li>将以下文件内容中FQDN取出并根据其进行计数从高到低排序<br> <a href="http://mail.magedu.com/index.html" target="_blank" rel="noopener">http://mail.magedu.com/index.html</a><br> <a href="http://www.magedu.com/test.html" target="_blank" rel="noopener">http://www.magedu.com/test.html</a><br> <a href="http://study.magedu.com/index.html" target="_blank" rel="noopener">http://study.magedu.com/index.html</a><br> <a href="http://blog.magedu.com/index.html" target="_blank" rel="noopener">http://blog.magedu.com/index.html</a><br> <a href="http://www.magedu.com/images/logo.jpg" target="_blank" rel="noopener">http://www.magedu.com/images/logo.jpg</a><br> <a href="http://blog.magedu.com/20080102.html" target="_blank" rel="noopener">http://blog.magedu.com/20080102.html</a></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F <span class="string">'/'</span> <span class="string">'&#123;fqdn[$3]++&#125;END&#123;for (i in fqdn)&#123;print i fqdn[i]&#125;'</span> filename | sort -k2 -nr</span><br></pre></td></tr></table></figure><ol start="8"><li>将以下文本以inode为标记，对inode相同的counts进行累加，并且统计出同一inode中beginnumber的最小值和endnumber的最大值<br> inode|beginnumber|endnumber|counts|<br> 106|3363120000|3363129999|10000|<br> 106|3368560000|3368579999|20000|<br> 310|3337000000|3337000100|101|<br> 310|3342950000|3342959999|10000|<br> 310|3362120960|3362120961|2|<br> 311|3313460102|3313469999|9898|<br> 311|3313470000|3313499999|30000|<br> 311|3362120962|3362120963|2|<br> 输出的结果格式为：<br> 310|3337000000|3362120961|10103|<br> 311|3313460102|3362120963|39900|</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F<span class="string">'|'</span> <span class="string">'NR==1&#123;print;next&#125;&#123;a[$1]?(a[$1]&gt;$2?a[$1]=$2:0):(a[$1]=$2);b[$1]?(b[$1]&lt;$3?b[$1]=$3:0):(b[$1]=$3);c[$1]+=$4&#125;END&#123;l=asorti(a,d);for(i=1;i&lt;=l;i++)print d[i] FS a[d[i]] FS b[d[i]] FS c[d[i]] FS&#125;'</span> f1.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; Linux文本处理工具三剑客：grep、sed、awk.其中grep是一种文本过滤工具,sed是文本行编辑器,而awk是一种报表生成器，就是对文件进行格式化处理。这里的格式化就是对文件内容进行各种“排版”，进而格式化显示。&lt;br&gt;    在Linux之上我们使用的是GNU
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="文本工具" scheme="http://yoursite.com/tags/%E6%96%87%E6%9C%AC%E5%B7%A5%E5%85%B7/"/>
    
      <category term="awk" scheme="http://yoursite.com/tags/awk/"/>
    
  </entry>
  
  <entry>
    <title>DNS服务</title>
    <link href="http://yoursite.com/2019/01/03/DNS%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/01/03/DNS服务/</id>
    <published>2019-01-02T17:24:16.481Z</published>
    <updated>2019-01-12T04:56:56.915Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;DNS(DomainName Server)是域名解析服务器，提供域名和IP地址之间一种转换机制，IP地址是平面结构不容易记住，DNS是层次化的结构，便于记忆</p><h1 id="DNS域名"><a href="#DNS域名" class="headerlink" title="DNS域名"></a>DNS域名</h1><ol><li>根域：根域位于层次结构的最顶部并用“.”来表示，全球有十三个根服务器，一个主根服务器，十二个辅助根服务器。  </li><li>顶级域:顶级域是按照组织或地理位置来划分的</li></ol><p>.gov：表示政府组织<br>.com：表示商业组织<br>.net：网络中心<br>.org：非营利性组织<br>.edu：教育部门  </p><p>.cn .uk .us：国家国别的代码，cn表示中国，uk表示英国，us表示美国  </p><ol start="3"><li>二级域：由国际域名组织为互联网中的个人或部门指定和登记的二级域，如51cto.com,baidu.com</li></ol><h1 id="DNS服务器类型"><a href="#DNS服务器类型" class="headerlink" title="DNS服务器类型"></a>DNS服务器类型</h1><ol><li>主DNS服务器(Master DNS）:管理和维护所负责解析的域内解析库的服务器  </li><li><p>辅助DNS服务器 (SlaveDNS)：从主服务器或从服务器“复制”（区域传输）解析库副本</p><blockquote><blockquote><p>序列号：解析库版本号，主服务器解析库变化时，其序列递增<br>刷新时间间隔：从服务器从主服务器请求同步解析的时间间隔<br>重试时间间隔：从服务器请求同步失败时，再次尝试时间间隔<br>过期时长：从服务器联系不到主服务器时，多久后停止服务  </p></blockquote></blockquote></li><li><p>缓存DNS服务器:没有自己的区域数据文件，只是帮助客户端向外部DNS请求查询，然后将查询的结果保存到它的缓存中。</p></li></ol><p>“通知”机制：主服务器解析库发生变化时，会主动通知从服务器  </p><p><code>一个域可以有拥有多个从服务器，但只能有一台主服务器</code><br><code>一台从服务器也可以从另一台从服务器那里获取数据</code><br>客户端检索本地数据文件的相关记录，客户端将无法自行解释的需求，通过53端口送给指定的DNS服务器  </p><h1 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h1><h2 id="DNS查询类型"><a href="#DNS查询类型" class="headerlink" title="DNS查询类型"></a>DNS查询类型</h2><p>递归查询<br>迭代查询  </p><h2 id="名称服务器：域内负责解析本域内的名称的主机"><a href="#名称服务器：域内负责解析本域内的名称的主机" class="headerlink" title="名称服务器：域内负责解析本域内的名称的主机"></a>名称服务器：域内负责解析本域内的名称的主机</h2><p>根服务器：13组服务器</p><h2 id="解析类型"><a href="#解析类型" class="headerlink" title="解析类型"></a>解析类型</h2><p>FQDN(Fully Qualified Domain Name)完全合格域名，由主机名+域名组成，如<a href="http://www.51cto.com" target="_blank" rel="noopener">www.51cto.com</a>  </p><blockquote><p>正向解析：FQDN–&gt;IP,把完全合格域名解析为IP地址<br>反向解析：IP–&gt;FQDN，把IP解析为完全合格域名。  </p></blockquote><p><code>注意：正反向解析是两个不同的名称空间，是两棵不同的解析树</code></p><h2 id="解析答案"><a href="#解析答案" class="headerlink" title="解析答案"></a>解析答案</h2><p>肯定答案：<br>否定答案：请求的条目不存在等原因导致无法返回结果<br>权威答案：<br>非权威答案  </p><h1 id="BIND"><a href="#BIND" class="headerlink" title="BIND"></a>BIND</h1><p>&ensp;&ensp;&ensp;&ensp;BIND是BerkeleyInternet Name Daemon的缩写,BIND是在Internet上应用最为广泛的DNS服务器，提供稳定与可信赖的下层结构以提供域名与IP地址的转换  </p><h2 id="Bind的相关软件包"><a href="#Bind的相关软件包" class="headerlink" title="Bind的相关软件包"></a>Bind的相关软件包</h2><p>bind-9.8.2-0.17.rc1.el6.x86_64提供域名服务的主程序和相关文件<br>bind-libs-9.8.2-0.17.rc1.el6.x86_64提供域名域名服务器所依赖的库文件<br>bind-utils-9.8.2-0.17.rc1.el6.x86_64提供了对DNS 服务的测试工具程序  </p><p>注：bind-chroot：安装上这个包之后让named进程有限的活动在/var/named/chroot/中防止黑客攻击导致服务器的崩溃。这里就不安装了，因为安装之后除了路径改变之后其他均不变。所以为了更好的熟悉过程就暂时不装了</p><p>直接用yum安装<br><code>yum install bind -y</code></p><h2 id="bind服务器"><a href="#bind服务器" class="headerlink" title="bind服务器"></a>bind服务器</h2><p>服务脚本和名称：/etc/rc.d/init.d/named /usr/lib/systemd/system/named.service<br>主配置文件：/etc/named.conf, /etc/named.rfc1912.zones, /etc/rndc.key<br>解析库文件：/var/named/ZONE_NAME.ZONE<br>注意：  </p><ol><li>一台物理服务器可同时为多个区域提供解析</li><li>必须要有根区域文件；named.ca</li><li>应该有两个（如果包括ipv6的，应该更多）实现localhost和本地回环地址的解析库</li></ol><h1 id="资源记录"><a href="#资源记录" class="headerlink" title="资源记录"></a>资源记录</h1><h2 id="资源记录定义的格式"><a href="#资源记录定义的格式" class="headerlink" title="资源记录定义的格式"></a>资源记录定义的格式</h2><p>语法：name [TTL] IN rr_type value<br>注意：  </p><ol><li>TTL可从全局继承  </li><li>@可用于引用当前区域的名字  </li><li>同一个名字可以通过多条记录定义多个不同的值；此时DNS服务器会以轮询方式响应  </li><li>同一个值也可能有多个不同的定义名字；通过多个不同的名字指向同一个值进行  </li><li>定义；此仅表示通过多个不同的名字可以找到同一个主机  </li></ol><h2 id="区域解析库：由众多RR组成"><a href="#区域解析库：由众多RR组成" class="headerlink" title="区域解析库：由众多RR组成"></a>区域解析库：由众多RR组成</h2><blockquote><p>资源记录：Resource Record, RR<br>记录类型：A, AAAA, PTR, SOA, NS, CNAME, MX  </p><blockquote><p>A：internet Address，作用，FQDN –&gt; IP<br>AAAA：FQDN –&gt; IPv6<br>PTR：PoinTeR，IP –&gt; FQDN<br>SOA：Start Of Authority，起始授权记录；一个区域解析库有且仅能有一个SOA记录，必须位于解析库的第一条记录<br>NS：Name Server，专用于标明当前区域的DNS服务器<br>CNAME ： Canonical Name，别名记录<br>MX：Mail eXchanger，邮件交换器  </p></blockquote></blockquote><h3 id="SQA"><a href="#SQA" class="headerlink" title="SQA"></a>SQA</h3><blockquote><p>name: 当前区域的名字，例如”magedu.com.”<br>value: 有多部分组成  </p><blockquote><p>当前区域的主DNS服务器的FQDN，也可以使用当前区域的名字；<br>当前区域管理员的邮箱地址；但地址中不能使用@符号，一般用.替换例：admin.magedu.com.<br>主从服务区域传输相关定义以及否定的答案的统一的TTL  </p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@       IN SOA  @ rname.invalid. (</span><br><span class="line">                                        0       ; serial    序列号</span><br><span class="line">                                        1D      ; refresh   刷新时间</span><br><span class="line">                                        1H      ; retry     重试时间</span><br><span class="line">                                        1W      ; expire    过期时间</span><br><span class="line">                                        3H )    ; minimum   否定答案的TTL值</span><br></pre></td></tr></table></figure><h3 id="NS记录"><a href="#NS记录" class="headerlink" title="NS记录"></a>NS记录</h3><ol><li>name: 当前区域的名字  </li><li>value: 当前区域的某DNS服务器的名字，例如ns.magedu.com.  </li><li>注意：一个区域可以有多个NS记录<br>例如：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">magedu.com. IN NS ns1.magedu.com.  </span><br><span class="line">magedu.com. IN NS ns2.magedu.com.</span><br></pre></td></tr></table></figure></li></ol><p><code>注意:</code><br>(1) 相邻的两个资源记录的name相同时，后续的可省略<br>(2) 对NS记录而言，任何一个ns记录后面的服务器名字，都应该在后续有一个A记录  </p><h3 id="MX记录"><a href="#MX记录" class="headerlink" title="MX记录"></a>MX记录</h3><p>name: 当前区域的名字<br>value: 当前区域的某邮件服务器(smtp服务器)的主机名<br>一个区域内，MX记录可有多个；但每个记录的value之前应该有一个数字(0-99)，表示此服务器的优先级；数字越小优先级越高<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">magedu.com. IN MX 10 mx1.magedu.com.  </span><br><span class="line">            IN MX 20 mx2.magedu.com.</span><br></pre></td></tr></table></figure></p><p>注意：对MX记录而言，任何一个MX记录后面的服务器名字，都应该在后续有一个A记录  </p><h3 id="A记录"><a href="#A记录" class="headerlink" title="A记录"></a>A记录</h3><p>1name: 某主机的FQDN<br>value: 主机名对应主机的IP地址<br>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www.magedu.com. IN A 1.1.1.1  </span><br><span class="line">www.magedu.com. IN A 2.2.2.2  </span><br><span class="line">mx1.magedu.com. IN A 3.3.3.3  </span><br><span class="line">mx2.magedu.com. IN A 4.4.4.4  </span><br><span class="line"><span class="variable">$GENERATE</span> 1-254 HOST$ A 1.2.3.$  </span><br><span class="line">*.magedu.com. IN A 5.5.5.5  </span><br><span class="line">magedu.com. IN A 6.6.6.6</span><br></pre></td></tr></table></figure></p><p><strong>避免用户写错名称时给错误答案，可通过泛域名解析进行解析至某特定地址</strong></p><h3 id="其它记录"><a href="#其它记录" class="headerlink" title="其它记录"></a>其它记录</h3><ol><li>AAAA:<br>name: FQDN<br>value: IPv6  </li><li>PTR:<br>name: IP，有特定格式，把IP地址反过来写，1.2.3.4，要写作4.3.2.1；而有特定后缀: <code>in-addr.arpa.</code>，所以完整写法为：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4.3.2.1.in-addr.arpa.</span><br><span class="line">value: FQDN</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.3.2.1.in-addr.arpa. IN PTR www.magedu.com.</span><br></pre></td></tr></table></figure><h2 id="别名记录"><a href="#别名记录" class="headerlink" title="别名记录"></a>别名记录</h2><p>CNAME：<br>name: 别名的FQDN<br>value: 真正名字的FQDN<br>例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.magedu.com. IN CNAME websrv.magedu.com.</span><br></pre></td></tr></table></figure></p><h2 id="子域授权：每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权"><a href="#子域授权：每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权" class="headerlink" title="子域授权：每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权"></a>子域授权：每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权</h2><ol><li><p>类似根域授权tld：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.com. IN NS ns1.com.</span><br><span class="line">.com. IN NS ns2.com.</span><br><span class="line">ns1.com. IN A 2.2.2.1</span><br><span class="line">ns2.com. IN A 2.2.2.2</span><br></pre></td></tr></table></figure></li><li><p>magedu.com. 在.com的名称服务器上，解析库中添加资源记录  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">magedu.com. IN NS ns1.magedu.com.</span><br><span class="line">magedu.com. IN NS ns2.magedu.com.</span><br><span class="line">magedu.com. IN NS ns3.magedu.com.</span><br><span class="line">ns1.magedu.com. IN A 3.3.3.1</span><br><span class="line">ns2.magedu.com. IN A 3.3.3.2</span><br><span class="line">ns3.magedu.com. IN A 3.3.3.3</span><br></pre></td></tr></table></figure></li><li><p>glue record：粘合记录，父域授权子域的记录</p></li></ol><h1 id="DNS实验"><a href="#DNS实验" class="headerlink" title="DNS实验"></a>DNS实验</h1><ol><li><p>正向的主DNS服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#vim /etc/sysconfig/network-scripts/ifcfg-eth0 </span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.183.158</span><br><span class="line">PREFIX=24</span><br><span class="line">DNS1=192.168.183.148    </span><br><span class="line">[root@CentOS6 ~]<span class="comment">#service network restart</span></span><br><span class="line">Shutting down interface eth0:  Device state: 3 (disconnected)</span><br><span class="line">                                                           [  OK  ]</span><br><span class="line">Shutting down loopback interface:                          [  OK  ]</span><br><span class="line">Bringing up loopback interface:                            [  OK  ]</span><br><span class="line">Bringing up interface eth0:  Active connection state: activated</span><br><span class="line">Active connection path: /org/freedesktop/NetworkManager/ActiveConnection/2</span><br><span class="line">                                                           [  OK  ]</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat /etc/resolv.conf</span></span><br><span class="line"><span class="comment"># Generated by NetworkManager</span></span><br><span class="line">domain localdomain</span><br><span class="line">search localdomain</span><br><span class="line">nameserver 192.168.183.148</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ping 114.114.114.114 </span></span><br><span class="line">PING 114.114.114.114 (114.114.114.114) 56(84) bytes of data.</span><br><span class="line">64 bytes from 114.114.114.114: icmp_seq=1 ttl=128 time=14.7 ms</span><br><span class="line">64 bytes from 114.114.114.114: icmp_seq=2 ttl=128 time=13.8 ms</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ping www.baidu.com   </span></span><br><span class="line">ping: unknown host www.baidu.com</span><br><span class="line"></span><br><span class="line">我们需要把192.168.183.148这个DNS服务器配置文件修改下</span><br><span class="line">[root@centos7 ~]<span class="comment">#vim /etc/named.conf</span></span><br><span class="line">//      listen-on port 53 &#123; localhost; &#125;;</span><br><span class="line">......省略.......</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;</span><br><span class="line">        allow-transfer  &#123;192.169.183.136;&#125;;     为后面搭建主备服务器准备的</span><br><span class="line">把这两行注释掉</span><br><span class="line">[root@centos7 ~]<span class="comment">#named-checkconf       检查语法是否有错误</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#rndc reload           修改文件生效</span></span><br><span class="line">server reload successful</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dig www.magedu.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; www.magedu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 55470</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 2, ADDITIONAL: 16</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.magedu.com.                        IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.magedu.com.         600     IN      A       101.200.188.230</span><br><span class="line">......省略.......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment">#vim /etc/named.rfc1912.zones </span></span><br><span class="line">......省略.......</span><br><span class="line">zone <span class="string">"localhost.localdomain"</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> master;</span><br><span class="line">        file <span class="string">"named.localhost"</span>;</span><br><span class="line">        allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone <span class="string">"mmagedu.com"</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> master;</span><br><span class="line">        file <span class="string">"magedu.com.zone"</span>;                                                                   </span><br><span class="line">&#125;;</span><br><span class="line">......省略.......</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment">#cd /var/named/</span></span><br><span class="line"></span><br><span class="line">[root@centos7 named]<span class="comment">#cp -a  named.localhost magedu.com.zone</span></span><br><span class="line">    cp时要注意文件的属性</span><br><span class="line">[root@centos7 named]<span class="comment">#ll</span></span><br><span class="line">total 20</span><br><span class="line">drwxrwx--- 2 named named   23 Nov 24 14:19 data</span><br><span class="line">drwxrwx--- 2 named named   60 Nov 24 14:20 dynamic</span><br><span class="line">-rw-r----- 1 root  named  152 Jun 21  2007 magedu.com.zone</span><br><span class="line">-rw-r----- 1 root  named 2281 May 22  2017 named.ca</span><br><span class="line">-rw-r----- 1 root  named  152 Dec 15  2009 named.empty</span><br><span class="line">-rw-r----- 1 root  named  152 Jun 21  2007 named.localhost</span><br><span class="line">-rw-r----- 1 root  named  168 Dec 15  2009 named.loopback</span><br><span class="line">drwxrwx--- 2 named named    6 Apr 13  2018 slaves</span><br><span class="line">[root@centos7 named]<span class="comment">#vim magedu.com.zone </span></span><br><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@       IN SOA  dns1  admin.magedu.com. (</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      dns1</span><br><span class="line">dns1    A       192.168.183.148                                                                   </span><br><span class="line">www      CNAME   websrv</span><br><span class="line">websrv   A      6.6.6.6</span><br><span class="line">websrv   A      7.7.7.7</span><br><span class="line">websrv   A      8.8.8.8</span><br><span class="line">@        A      6.6.6.6             泛域名解析</span><br><span class="line">*        A      6.6.6.6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@centos7 named]<span class="comment">#rndc reload</span></span><br><span class="line">server reload successful</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dig www.magedu.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; www.magedu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 20887</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 1, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.magedu.com.                        IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.magedu.com.         86400   IN      CNAME   websrv.magedu.com.</span><br><span class="line">websrv.magedu.com.      86400   IN      A       6.6.6.6</span><br><span class="line">websrv.magedu.com.      86400   IN      A       7.7.7.7</span><br><span class="line">websrv.magedu.com.      86400   IN      A       8.8.8.8</span><br></pre></td></tr></table></figure></li><li><p>反向的主DNS服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#vim /etc/named.rfc1912.zones</span></span><br><span class="line">zone <span class="string">"183.168.192.in-addr.arpa"</span> &#123;           </span><br><span class="line">        <span class="built_in">type</span> master;                                  </span><br><span class="line">        file <span class="string">"192.168.183.158.zone"</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[root@centos7 ~]<span class="comment">#cd /var/named/</span></span><br><span class="line">[root@centos7 named]<span class="comment">#vim 192.168.183.zone</span></span><br><span class="line"><span class="variable">$TTL</span> 86400</span><br><span class="line">@ IN SOA dnsserver admin.magedu.com. (                </span><br><span class="line">                                        20181124;</span><br><span class="line">                                        3H;</span><br><span class="line">                                        10M;</span><br><span class="line">                                        1D;</span><br><span class="line">                                        1H);</span><br><span class="line">     NS dnsserver</span><br><span class="line">dnsserver A   192.168.183.148</span><br><span class="line">148     PTR     dnsserver.magedu.com.</span><br><span class="line">100     PTR     www.magedu.com.</span><br><span class="line">120     PTR     blog.magedu.com</span><br><span class="line">&lt;92.168.183.zone<span class="string">" 12L, 227C written</span></span><br><span class="line"><span class="string">[root@centos7 named]#named-checkconf</span></span><br><span class="line"><span class="string">[root@centos7 named]#named-checkzone 183.168.192.in-addr.arpa 192.168.183.zone</span></span><br><span class="line"><span class="string">zone 183.168.192.in-addr.arpa/IN: loaded serial 20181124</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string">[root@centos7 named]#rndc reload</span></span><br><span class="line"><span class="string">server reload successful</span></span><br><span class="line"><span class="string">[root@CentOS6 ~]#dig -x 192.168.183.148</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; -x 192.168.183.148</span></span><br><span class="line"><span class="string">;; global options: +cmd</span></span><br><span class="line"><span class="string">;; Got answer:</span></span><br><span class="line"><span class="string">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 53616</span></span><br><span class="line"><span class="string">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 1, ADDITIONAL: 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;148.183.168.192.in-addr.arpa.  IN      PTR</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ANSWER SECTION:</span></span><br><span class="line"><span class="string">148.183.168.192.in-addr.arpa. 86400 IN  PTR     dnsserver.magedu.com.</span></span><br><span class="line"><span class="string">......省略.......</span></span><br></pre></td></tr></table></figure></li><li><p>DNS冗错(DNS主备服务器的搭建)<br>再找一台主机(192.168.183.137)搭建DNS服务器<br>安装bind yum install bind -y<br>修改配置文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#vim /etc/named.conf</span></span><br><span class="line">......省略.......</span><br><span class="line">//      listen-on port 53 &#123; 127.0.0.1; &#125;;        //注释掉</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">"/var/named"</span>;</span><br><span class="line">        dump-file       <span class="string">"/var/named/data/cache_dump.db"</span>;</span><br><span class="line">        statistics-file <span class="string">"/var/named/data/named_stats.txt"</span>;</span><br><span class="line">        memstatistics-file <span class="string">"/var/named/data/named_mem_stats.txt"</span>;</span><br><span class="line">//      allow-query     &#123; localhost; &#125;;         //注释掉</span><br><span class="line">        allow-transfer  &#123; none;&#125;;</span><br><span class="line">......省略.......</span><br><span class="line">[root@centos7 ~]<span class="comment"># vim /etc/named.rfc1912.zones</span></span><br><span class="line">zone <span class="string">"magedu.com"</span> &#123;</span><br><span class="line">        <span class="built_in">type</span> slave;</span><br><span class="line">        master &#123;192.168.183.148;&#125;;</span><br><span class="line">        file <span class="string">"slaves/magedu.com.zone.slave"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">[root@centos7 ~]<span class="comment">#vim /var/named/magedu.com.zone     //主服务器</span></span><br><span class="line">       NS      dns1</span><br><span class="line">        NS      dns2</span><br><span class="line">dns1    A       192.168.183.148</span><br><span class="line">dns2    A       192.168.183.137                                            </span><br><span class="line">[root@centos7 ~]<span class="comment">#rndc reload</span></span><br><span class="line">server reload successful</span><br><span class="line">[root@centos7 ~]<span class="comment"># systemctl start named</span></span><br><span class="line">[root@centos7 ~]<span class="comment"># cd /var/named/slaves/</span></span><br><span class="line">[root@centos7 slaves]<span class="comment"># ll</span></span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 named named 524 Nov 24 21:20 magedu.com.zone.slave</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dig www.magedu.com   </span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; www.magedu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 33539</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 3, ADDITIONAL: 3</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.magedu.com.                        IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.magedu.com.         86400   IN      CNAME   websrv.magedu.com.</span><br><span class="line">websrv.magedu.com.      86400   IN      A       6.6.6.6</span><br><span class="line">websrv.magedu.com.      86400   IN      A       7.7.7.7</span><br><span class="line">websrv.magedu.com.      86400   IN      A       8.8.8.8</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">magedu.com.             86400   IN      NS      dns1.magedu.com.</span><br><span class="line">magedu.com.             86400   IN      NS      dns2.magedu.com.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">dns1.magedu.com.        86400   IN      A       192.168.183.148</span><br><span class="line">dns2.magedu.com.        86400   IN      A       192.168.183.137</span><br><span class="line"></span><br><span class="line">;; Query time: 6 msec</span><br><span class="line">;; SERVER: 192.168.183.148<span class="comment">#53(192.168.183.148)           主服务器</span></span><br><span class="line">;; WHEN: Sat Nov 24 20:43:12 2018</span><br><span class="line">;; MSG SIZE  rcvd: 206</span><br><span class="line"></span><br><span class="line">把主服务器网线掐断</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dig www.magedu.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.68.rc1.el6 &lt;&lt;&gt;&gt; www.magedu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 55691</span><br><span class="line">;; flags: qr aa rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 3, ADDITIONAL: 3</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.magedu.com.                        IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.magedu.com.         86400   IN      CNAME   websrv.magedu.com.</span><br><span class="line">websrv.magedu.com.      86400   IN      A       7.7.7.7</span><br><span class="line">websrv.magedu.com.      86400   IN      A       8.8.8.8</span><br><span class="line">websrv.magedu.com.      86400   IN      A       6.6.6.6</span><br><span class="line"></span><br><span class="line">;; AUTHORITY SECTION:</span><br><span class="line">magedu.com.             86400   IN      NS      dns2.magedu.com.</span><br><span class="line">magedu.com.             86400   IN      NS      dns1.magedu.com.</span><br><span class="line"></span><br><span class="line">;; ADDITIONAL SECTION:</span><br><span class="line">dns1.magedu.com.        86400   IN      A       192.168.183.148</span><br><span class="line">dns2.magedu.com.        86400   IN      A       192.168.183.137</span><br><span class="line"></span><br><span class="line">;; Query time: 5 msec</span><br><span class="line">;; SERVER: 192.168.183.136<span class="comment">#53(192.168.183.137)        备用服务器</span></span><br><span class="line">;; WHEN: Sat Nov 24 20:48:16 2018</span><br><span class="line">;; MSG SIZE  rcvd: 206</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;DNS(DomainName Server)是域名解析服务器，提供域名和IP地址之间一种转换机制，IP地址是平面结构不容易记住，DNS是层次化的结构，便于记忆&lt;/p&gt;
&lt;h1 id=&quot;DNS域名&quot;&gt;&lt;a href=&quot;#DNS域
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="dns" scheme="http://yoursite.com/tags/dns/"/>
    
      <category term="解析" scheme="http://yoursite.com/tags/%E8%A7%A3%E6%9E%90/"/>
    
      <category term="资源记录" scheme="http://yoursite.com/tags/%E8%B5%84%E6%BA%90%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Ansible基础及常用模块</title>
    <link href="http://yoursite.com/2019/01/03/Ansible%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2019/01/03/Ansible基础及常用模块/</id>
    <published>2019-01-02T17:24:16.479Z</published>
    <updated>2019-01-12T05:04:20.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ansible的概念"><a href="#Ansible的概念" class="headerlink" title="Ansible的概念"></a>Ansible的概念</h1><p>&ensp;&ensp;&ensp;&ensp;概念：是一个配置管理工具，是一个自动化运维工具，通过ssh实现配置管理、应用部署、任务执行等功能。要实现ansible，必须基于key验证<br>作用：可以完成一些批量任务或者完成一些需要经常重复的工作  </p><p>同时在100台服务器上安装服务，并在安装后启动服务<br>将某个文件一次性拷贝到100台服务器上<br>每当有新服务器加入工作环境时都要部署新的服务，也就是需要经常重复完成相同的工作  </p><p>此时都可以用到ansible<br>在复制文件到受控主机时，受控主机目录下有此文件则ansible不做任何处理，若没有则复制，这些功能是shell所不具备的  </p><p>控制其他主机的主机叫主控端<br>被控制的主机叫被控端  </p><p>ansible  中小型企业500台主机左右<br>saltstack 大型企业<br>puppet  超大型企业  </p><h1 id="Ansible的配置文件"><a href="#Ansible的配置文件" class="headerlink" title="Ansible的配置文件"></a>Ansible的配置文件</h1><p>使用ansible前必须做到：<br>1、在主控机上安装ansible基于epel源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum   install ansible  -y</span><br></pre></td></tr></table></figure></p><p>2、在ansible配置文件中将受控主机写入”管理清单（/etc/ansible/hosts）”。</p><p>方式有两种：</p><p>文件配置<br>如果安装后没有配置文件直接使用ansible则会出现如下提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]<span class="comment">#ansible 192.168.183.158 -m ping</span></span><br><span class="line">[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit</span><br><span class="line">localhost does not match <span class="string">'all'</span></span><br><span class="line">[WARNING]: Could not match supplied host pattern, ignoring: 192.168.183.148</span><br><span class="line"></span><br><span class="line">将受控主机的IP写入配置文件/etc/ansible/hosts的最底部如下：</span><br><span class="line"><span class="comment"># Here's another example of host ranges, this time there are no</span></span><br><span class="line"><span class="comment"># leading 0s:</span></span><br><span class="line"><span class="comment">## db-[99:101]-node.example.com</span></span><br><span class="line">192.168.183.158                      </span><br><span class="line">192.168.183.132</span><br><span class="line"></span><br><span class="line">[root@CentOS7 ~]<span class="comment">#ansible 192.168.183.158,192.168.183.132 -m ping</span></span><br><span class="line">192.168.183.132 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n"</span>, </span><br><span class="line">    <span class="string">"unreachable"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.183.158 | UNREACHABLE! =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"Failed to connect to the host via ssh: Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).\r\n"</span>, </span><br><span class="line">    <span class="string">"unreachable"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为ansible是基于ssh的，所以要把受控主机的相关信息也要写全如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## db-[99:101]-node.example.com</span></span><br><span class="line">192.168.183.148 ansible_port=22 ansible_user=root ansible_ssh_pass=123456</span><br><span class="line">192.168.183.132 ansible_port=22 ansible_user=root ansible_ssh_pass=123456                         </span><br><span class="line"><span class="string">"/etc/ansible/hosts"</span> 47L, 1165C written                                         </span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ansible 192.168.183.148,192.168.183.132 -m ping </span></span><br><span class="line">192.168.183.148 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.183.132 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果受控主机较多这样配置显然是不可取的，大多数情况下都使用第二种方法基于秘钥认证<br>基于秘钥认证(由于前文写过，这里简单描述下)<br>首先执行ssh-kengen生成秘钥对<br>将生成的秘钥发送给受控机 <code>ssh-copy-id 192.168.183.158</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 data]<span class="comment">#ansible all  -m ping                               </span></span><br><span class="line">192.168.183.132 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.183.158 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span>, </span><br><span class="line">    <span class="string">"ping"</span>: <span class="string">"pong"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>小结：在使用ansible时首先要安装包，然后将受控主机的IP写入配置文件/etc/ansible/hosts中，使用秘钥验证方式则首先要生成秘钥对ssh-keygen将生成的秘钥发送至受控主机<code>ssh-copy-id IP</code></p><h1 id="ansible命令执行"><a href="#ansible命令执行" class="headerlink" title="ansible命令执行"></a>ansible命令执行</h1><h2 id="ansible命令执行过程"><a href="#ansible命令执行过程" class="headerlink" title="ansible命令执行过程"></a>ansible命令执行过程</h2><p>加载自己的配置文件 默认/etc/ansible/ansible.cfg<br>加载自己对应的模块文件，如command<br>通过ansible将模块或命令生成对应的临时py文件，并将该 文件传输至远程服务器的对应执行用户$HOME/.ansible/tmp/ansible-tmp-数字/XXX.PY文件<br>给文件+x执行<br>执行并返回结果<br>删除临时py文件，sleep 0退出  </p><h2 id="执行状态："><a href="#执行状态：" class="headerlink" title="执行状态："></a>执行状态：</h2><p>绿色：执行成功并且不需要做改变的操作<br>黄色：执行成功并且对目标主机做变更<br>红色：执行失败  </p><h2 id="ansible的Host-pattern"><a href="#ansible的Host-pattern" class="headerlink" title="ansible的Host-pattern"></a>ansible的Host-pattern</h2><p>ansible [-m module_name] [-a args]<br>–version 显示版本<br>ansible –version<br>-v 详细过程 –vv -vvv更详细<br>–list-hosts 显示主机列表，可简写 –list</p><p>ansible all –list-hosts<br>-u, –user=REMOTE_USER 执行远程执行的用户<br>-k, –ask-pass 提示输入ssh连接密码，默认Key验证<br>-K, –ask-become-pass 提示输入sudo时的口令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible 192.168.183.158 -m ping -u xie  -k</span></span><br><span class="line">SSH password:</span><br><span class="line">[root@centos7 ~]<span class="comment">#ansible 192.168.183.158 -m ping -u xie  -K</span></span><br><span class="line">SUDO password:</span><br></pre></td></tr></table></figure><p>-C, –check 检查，并不执行<br>-T, –timeout=TIMEOUT 执行命令的超时时间，默认10s<br>-b, –become 代替旧版的sudo 切换<br>–become-user=USERNAME 指定sudo的runas用户，默认为root   </p><blockquote><p>ansible all -m ping -u wang -k -b –become-user=mage    </p></blockquote><p>All ：表示所有Inventory中的所有主机  </p><blockquote><p>ansible all –m ping</p></blockquote><p>* : 通配符  </p><blockquote><p>ansible “*” -m ping  </p></blockquote><p>或关系  </p><blockquote><p>ansible <code>websrvs:appsrvs</code> -m ping  </p></blockquote><p>逻辑与  </p><blockquote><p>ansible ‘websrvs:&amp;dbsrvs’ –m ping  在websrvs组并且在dbsrvs组中的主机    </p></blockquote><p>逻辑非  </p><blockquote><p>ansible ‘websrvs:!dbsrvs’ –m ping  在websrvs组，但不在dbsrvs组中的主机<br>注意：此处为单引号  </p></blockquote><p>综合逻辑  </p><blockquote><p>ansible ‘websrvs:dbsrvs:&amp;appsrvs:!ftpsrvs’ –m ping  </p></blockquote><p>正则表达式  </p><blockquote><p>ansible ‘~(web|db).*.magedu.com’ –m ping      </p></blockquote><p><code>注：列表清单中最好都使用单引号</code></p><h1 id="Ansible相关文件"><a href="#Ansible相关文件" class="headerlink" title="Ansible相关文件"></a>Ansible相关文件</h1><p>配置文件<br>/etc/ansible/ansible.cfg 主配置文件，配置ansible工作特性<br>/etc/ansible/hosts 主机清单<br>/etc/ansible/roles/ 存放角色的目录  </p><p>程序<br>/usr/bin/ansible 主程序，临时命令执行工具<br>/usr/bin/ansible-doc 查看配置文档，模块功能查看工具<br>/usr/bin/ansible-galaxy 下载/上传优秀代码或Roles模块的官网平台<br>/usr/bin/ansible-playbook 定制自动化任务，编排剧本工具<br>/usr/bin/ansiblepull 远程执行命令的工具<br>/usr/bin/ansible-vault 文件加密工具<br>/usr/bin/ansible-console 基于Console界面与用户交互的执行工具</p><h2 id="Ansible-配置文件-etc-ansible-ansible-cfg-（一般保持默认）"><a href="#Ansible-配置文件-etc-ansible-ansible-cfg-（一般保持默认）" class="headerlink" title="Ansible 配置文件/etc/ansible/ansible.cfg （一般保持默认）"></a>Ansible 配置文件/etc/ansible/ansible.cfg （一般保持默认）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[defaults]</span><br><span class="line"><span class="comment">#inventory = /etc/ansible/hosts  主机列表配置文件  </span></span><br><span class="line"><span class="comment">#library = /usr/share/my_modules/ # 库文件存放目录  </span></span><br><span class="line"><span class="comment">#remote_tmp = $HOME/.ansible/tmp #临时py命令文件存放在远程主机目录  </span></span><br><span class="line"><span class="comment">#local_tmp = $HOME/.ansible/tmp # 本机的临时命令执行目录  </span></span><br><span class="line"><span class="comment">#forks = 5 # 默认并发数  </span></span><br><span class="line"><span class="comment">#sudo_user = root # 默认sudo 用户  </span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True #每次执行ansible命令是否询问ssh密码  </span></span><br><span class="line"><span class="comment">#ask_pass = True  </span></span><br><span class="line"><span class="comment">#remote_port = 22  </span></span><br><span class="line"><span class="comment">#host_key_checking = False # 检查对应服务器的host_key，建议取消注释  </span></span><br><span class="line"><span class="comment">#log_path=/var/log/ansible.log #日志文件  </span></span><br><span class="line"><span class="comment">#module_name = command #默认模块</span></span><br></pre></td></tr></table></figure><h2 id="主机清单inventory"><a href="#主机清单inventory" class="headerlink" title="主机清单inventory"></a>主机清单inventory</h2><p>ansible的主要功用在于批量主机操作，为了便捷地使用其中的部分主机，可以在inventory file中将其分组命名<br>默认的inventory file为/etc/ansible/hosts<br>inventory file可以有多个，且也可以通过Dynamic Inventory来动态生成</p><p>etc/ansible/hosts文件格式</p><p>inventory文件遵循INI文件风格，中括号中的字符为组名。可以将同一个主机同时归并到多个不同的组中；此外，当如若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[webservers]  </span><br><span class="line">www1.magedu.com:2222  </span><br><span class="line">www2.magedu.com  </span><br><span class="line">[dbservers]</span><br><span class="line">db1.magedu.com</span><br><span class="line">db2.magedu.com</span><br></pre></td></tr></table></figure></p><p>如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[websrvs]</span><br><span class="line">www[01:100].example.com</span><br><span class="line">[dbsrvs]</span><br><span class="line">db-[a:f].example.com</span><br></pre></td></tr></table></figure></p><p>ansible-doc: 显示模块帮助<br>ansible-doc [options] [module…]<br>-a 显示所有模块的文档<br>-l, –list 列出可用模块<br>-s, –snippet显示指定模块的playbook片段<br>示例：</p><blockquote><p>ansible-doc –l 列出所有模块<br>ansible-doc ping 查看指定模块帮助用法<br>ansible-doc –s ping 查看指定模块帮助用法<br>ansible-vault  </p></blockquote><p>功能：管理加密解密yml文件<br>ansible-vault [create|decrypt|edit|encrypt|rekey|view]  </p><blockquote><p>ansible-vault encrypt hello.yml 加密<br>ansible-vault decrypt hello.yml 解密<br>ansible-vault view hello.yml 查看<br>ansible-vault edit hello.yml 编辑加密文件<br>?ansible-vault rekey hello.yml 修改口令<br>?ansible-vault create new.yml 创建新文件  </p></blockquote><p>Ansible-console：2.0+新增，可交互执行命令，支持tab  </p><blockquote><p>root@test (2)[f:10] $  </p></blockquote><p>执行用户@当前操作的主机组 (当前组的主机数量)[f:并发数]$<br>设置并发数： forks n 例如： forks 10<br>切换组： cd 主机组 例如： cd web<br>列出当前组主机列表： list<br>列出所有的内置命令： ?或help  </p><p>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@all (2)[f:5]listroot@all(2)[f:5] <span class="built_in">cd</span> appsrvs</span><br><span class="line">root@appsrvs (2)[f:5]listroot@appsrvs(2)[f:5] yum name=httpd state=present</span><br><span class="line">root@appsrvs (2)[f:5]$ service name=httpd state=started</span><br></pre></td></tr></table></figure></p><h2 id="ansible-galaxy"><a href="#ansible-galaxy" class="headerlink" title="ansible-galaxy"></a>ansible-galaxy</h2><p>连接 <a href="https://galaxy.ansible.com" target="_blank" rel="noopener">https://galaxy.ansible.com</a> 下载相应的roles</p><p>安装galaxy</p><blockquote><p>ansible-galaxy install geerlingguy.redis</p></blockquote><p>列出所有已安装的galaxy</p><blockquote><p>ansible-galaxy list</p></blockquote><p>删除galaxy</p><blockquote><p>ansible-galaxy remove geerlingguy.redis</p></blockquote><p>推送命令至远程，效率无限提升，对运维要求较高</p><blockquote><p>ansible-pull</p></blockquote><h2 id="ansible-playbook"><a href="#ansible-playbook" class="headerlink" title="ansible-playbook"></a>ansible-playbook</h2><p>执行playbook<br>示例：ansible-playbook hello.yml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cat hello.yml  </span><br><span class="line"><span class="comment">#hello world yml file  </span></span><br><span class="line">- hosts: websrvs  </span><br><span class="line">  remote_user: root  </span><br><span class="line">  tasks:  </span><br><span class="line">    - name: hello world  </span><br><span class="line">    <span class="built_in">command</span>: /usr/bin/wall hello world</span><br></pre></td></tr></table></figure></p><h1 id="ansible常用模块"><a href="#ansible常用模块" class="headerlink" title="ansible常用模块"></a>ansible常用模块</h1><p>Command：在远程主机执行命令，默认模块，可忽略-m选项<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment">#ansible all -m command -a 'service vsftpd start'</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m command -a 'echo magedu |passwd --stdin xie'</span></span><br><span class="line">此命令不支持 <span class="variable">$VARNAME</span> &lt; &gt; | ; &amp; 等，用shell模块实现</span><br></pre></td></tr></table></figure></p><p>Shell：和command相似，用shell执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m shell -a 'echo magedu | passwd –stdin xie'</span></span><br><span class="line">调用bash执行命令 类似 cat /tmp/stanley.md | awk -F‘|’ ‘&#123;<span class="built_in">print</span> 1,2&#125;’ &amp;&gt; /tmp/example.txt 这些复杂命令，即使使用shell也可能会失败，解决办法：写到脚本时，copy到远程，执行，再把需要的结果拉回执行命令的机器</span><br></pre></td></tr></table></figure></p><p>Script：在远程主机上运行ansible服务器上的脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-a <span class="string">"/PATH/TO/SCRIPT_FILE“</span></span><br><span class="line"><span class="string">ansible websrvs -m script -a /data/f1.sh</span></span><br></pre></td></tr></table></figure></p><p>Copy：从服务器复制文件到客户端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m copy -a "src=/root/f1 dest=/tmp/f2 owner=xie mode=600 backup=yes"</span></span><br><span class="line">如目标存在，默认覆盖，此处指定先备份</span><br><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m copy -a "content='test content\n' dest=/tmp/f1.txt"</span></span><br><span class="line">指定内容，直接生成目标文件</span><br></pre></td></tr></table></figure></p><p>Fetch：从客户端取文件至服务器端，copy相反，目录可先tar<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m fetch -a 'src=/root/a.sh dest=/data/scripts'</span></span><br></pre></td></tr></table></figure></p><p>File：设置文件属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m file -a "path=/data/f1.txt owner=wang mode=755“</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m filw -a "path=/data/f1.txt state=touch"</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m file -a 'src=/data/f1.txt dest=/data/f1.txt-link state=link'</span></span><br></pre></td></tr></table></figure></p><p>Hostname：管理主机名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible websrvs -m hostname -a "name=websrv"</span></span><br></pre></td></tr></table></figure></p><p>Cron：计划任务<br>支持时间：minute，hour，day，month，weekday  </p><p>创建任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m cron -a "minute=*/5 job='/usr/sbin/ntpdate 172.16.0.1 &amp;&gt;/dev/null' name=Synctime"</span></span><br></pre></td></tr></table></figure></p><p>删除任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m cron -a 'state=absent name=Synctime'</span></span><br></pre></td></tr></table></figure></p><p>Yum：管理包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m yum -a 'name=httpd,memcached,vsftpd state=present' 安装               state=present可以省略不写,系统默认</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#ansible all -m yum -a 'name=httpd,memcached,vsftpd state=absent' 删除</span></span><br></pre></td></tr></table></figure></p><p>Service：管理服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment">#ansible all -m service -a 'name=httpd state=stopped'</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m service -a 'name=httpd state=started enabled=yes'          启动服务，并且开机启动</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m service -a 'name=httpd state=reloaded'</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m service -a 'name=httpd state=restarted'</span></span><br></pre></td></tr></table></figure></p><p>User：管理用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment">#ansible all -m user -a 'name=user1 comment="test user" uid=2048 home=/app/user1 group=root shell=/sbin/nologin'</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m user -a 'name=sysuser1 system=yes home=/app/sysuser1'</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m user -a 'name=user1 state=absent remove=yes'</span></span><br><span class="line">          删除账号并且删除家目录</span><br></pre></td></tr></table></figure></p><p>Group：管理组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment">#ansible all -m group -a "name=testgroup system=yes"</span></span><br><span class="line">[root@centos ~]<span class="comment">#ansible all -m group -a "name=testgroup state=absent"</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ansible的概念&quot;&gt;&lt;a href=&quot;#Ansible的概念&quot; class=&quot;headerlink&quot; title=&quot;Ansible的概念&quot;&gt;&lt;/a&gt;Ansible的概念&lt;/h1&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;概念：是一个配置管理工具，是
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="模块" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>DNCP服务</title>
    <link href="http://yoursite.com/2018/11/19/DHCP%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/11/19/DHCP服务/</id>
    <published>2018-11-18T16:00:00.000Z</published>
    <updated>2019-01-12T04:58:53.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>&ensp;&ensp;&ensp;&ensp;DHCP前身是BOOTP，在Linux的网卡配置中也能看到显示的BOOTP，DHCP引进一个bootp没有的概念：租约。bootp分配的地址是永久的，而dhcp分配的地址是可以有期限的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#grep -i bootproto /etc/sysconfig/network-scripts/ifcfg-eth0 </span></span><br><span class="line">    BOOTPROTO=dhcp</span><br></pre></td></tr></table></figure></p><p>DHCP可以自动分配IP、子网掩码、网关、DNS。</p><p>DHCP客户端使用的端口68，服务端使用端口67，使用的UDP应用层的协议。</p><p>&ensp;&ensp;&ensp;&ensp;DHCP一般不为服务器分配IP，因为他们要使用固定IP，所以DHCP一般只为办公环境的主机分配IP。服务器一旦开机则自动分配IP，并有一定的租期，租期到了则收回，IP可以续租，续租失败则收回并重新分配，如果服务器关闭则收回IP，先到先得的原则，哪台主机先申请就优先分配，并且基于广播机制(DHCP服务器和客户端需要在一个局域网).但DHCP也可以为其他网段内主机分配IP，只要连接两个网段中间的路由器能转发DHCP配置请求即可，但这要求路由器配置中继功能。</p><h2 id="续租"><a href="#续租" class="headerlink" title="续租"></a>续租</h2><p>&ensp;&ensp;&ensp;&ensp;50%：租赁时间达到50%时来续租，刚向DHCP服务器发向新的DHCPREQUEST请求。如果dhcp服务没有拒绝的理由，则回应DHCPACK信息。当DHCP客户端收到该应答信息后，就重新开始新的租用周期<br>&ensp;&ensp;&ensp;&ensp;87.5%：如果之前DHCP Server没有回应续租请求，等到租约期的7/8时，主机会再发送一次广播请求   </p><h2 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h2><p>用于内部网络和网络服务供应商自动分配IP地址给用户<br>用于内部网络管理员作为对所有电脑作集中管理的手段  </p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>自动化安装系统<br>解决IPV4资源不足问题DHCP服务  </p><h1 id="DHCP的工作原理-前四种经常用到"><a href="#DHCP的工作原理-前四种经常用到" class="headerlink" title="DHCP的工作原理(前四种经常用到)"></a>DHCP的工作原理(前四种经常用到)</h1><ol><li>DHCP DISCOVER：客户端到服务器，客户端设置为自动获取后一开机就会向网络发广播</li><li>DHCP OFFER ：服务器到客户端，如果网络中有DHCP服务器就会分配一个IP并同时在网络中进行标记此IP已被占用</li><li>DHCP REQUEST：客户端到服务器，网络中有多个DHCP同时分配IP，客户端这时就会选择一个最快到达的ip</li><li>DHCP ACK ：服务器到客户端，服务器最终确认</li><li>DHCP NAK：服务器到客户端,通知用户无法分配合适的IP地址</li><li>DHCP DECLINE ：客户端到服务器，指示地址已被使用</li><li>DHCP RELEASE：客户端到服务器，放弃网络地址和取消剩余的租约时间</li><li>DHCP INFORM：客户端到服务器, 客户端如果需要从DHCP服务器端获取更为详细的配置信息，则发送Inform报文向服务器进行请求，极少用到</li></ol><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/DHCP%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png?raw=true" alt="">  </p><h1 id="模拟dhcp的实现过程"><a href="#模拟dhcp的实现过程" class="headerlink" title="模拟dhcp的实现过程"></a>模拟dhcp的实现过程</h1><ol><li>准备：两台虚拟机（centos7模拟DHCP服务器，centos6模拟客户端）<br>centos7本身使用静态获取，centos6为动态获取 并且为仅主机模式<br>关闭防火墙 iptables -vnL<br>清空防火墙 iptables -F<br>关闭SELinux 检查状态getenforce<br>vim /etc/sysconfig/selinux   改为SELinux=disabled   重启后生效<br>对centos7设置，使其成为dhcp服务器  </li></ol><p>打开虚拟机—&gt;编辑—-&gt;虚拟网络设置—&gt;选中仅主机—&gt;取消下面DHCP设置  </p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/DHCP%201.png?raw=true" alt="">  </p><p>取消DHCP服务就意味着网络中没有了DHCP服务器，那么客户端如果设置DHCP获取那么是不能获取到IP  </p><p>在客户机将其获取方式改为DHCP vim /etc/sysconfig/network-scripts/ifcfg-eth0<br><img src="https://github.com/xiejia1215225/Pictures/blob/master/DHCP%202.png?raw=true" alt="">  </p><p>设置完之后重启，客户机将不能获取IP，因为网络中没有DHCP服务器  </p><ol start="2"><li>开始配置DHCP服务器（centos7）<br>配置前首先安装包  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#yum install dhcp -y</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br></pre></td></tr></table></figure></li></ol><p>在其他的服务安装后就可以开启服务，但dhcp比较特殊，所以此时应先复制模板到配置文件进行相关设置，然后再开启服务<br><img src="https://github.com/xiejia1215225/Pictures/blob/master/DHCP%203.png?raw=true" alt="">  </p><p>如果此时开启服务肯定是失败的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#systemctl start httpd</span></span><br><span class="line">Failed to start httpd.service: Unit not found.</span><br></pre></td></tr></table></figure></p><p>复制模板<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#cp /usr/share/doc/dhcp-4.2.5/dhcpd.conf.example /etc/dhcp/dhcpd.conf</span></span><br><span class="line">cp: overwrite <span class="string">'/etc/dhcp/dhcpd.conf'</span>? y</span><br></pre></td></tr></table></figure></p><p>配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#vim /etc/dhcp/dhcpd.conf</span></span><br><span class="line"><span class="comment"># No service will be given on this subnet, but declaring it helps the </span></span><br><span class="line"><span class="comment"># DHCP server to understand the network topology.</span></span><br><span class="line"></span><br><span class="line">subnet 192.168.183.0 netmask 255.255.255.0 &#123;         <span class="comment">#添加网断及子网掩码</span></span><br><span class="line">        range 192.168.183.10 192.168.183.100;        <span class="comment">#指定ip范围                                            </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a very basic subnet declaration.</span></span><br><span class="line"></span><br><span class="line">subnet 10.254.239.0 netmask 255.255.255.224 &#123;</span><br><span class="line">  range 10.254.239.10 10.254.239.20;</span><br></pre></td></tr></table></figure></p><p>重启服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]<span class="comment">#systemctl restart dhcpd</span></span><br></pre></td></tr></table></figure></p><p>重启完之后再次重启客户端(centos6),然后通过ifcongfig就能看见客户端获取到你指定范围内的ip了。至此已经实现一个模拟的DHCP服务器。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络配置&quot;&gt;&lt;a href=&quot;#网络配置&quot; class=&quot;headerlink&quot; title=&quot;网络配置&quot;&gt;&lt;/a&gt;网络配置&lt;/h1&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;DHCP前身是BOOTP，在Linux的网卡配置中也能看到显示的BOOTP，
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="dhcp" scheme="http://yoursite.com/tags/dhcp/"/>
    
  </entry>
  
  <entry>
    <title>自动化安装系统</title>
    <link href="http://yoursite.com/2018/11/18/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/11/18/自动化安装系统/</id>
    <published>2018-11-17T16:00:00.000Z</published>
    <updated>2019-01-12T04:26:02.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kickstart安装步骤"><a href="#kickstart安装步骤" class="headerlink" title="kickstart安装步骤"></a>kickstart安装步骤</h1><p>    自动化安装之前我们首先要使用相应的工具去生成相应的文件（应答文件），在我们的系统装好之后，在管理员的家目录下都有这样一个文件anaconda-ks.cfg,此文件中的 kickstart就是我们实现自动化安装的重要文件，那么在配置此文件之前首先要安装kickstart所依赖的服务的包system-config-kickstart使用此工具需要在图形界面下进行<br>具体步骤如下：</p><ol><li><p>首先安装包文件system-config-kickstart</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#yum install system-config-kickstart</span></span><br></pre></td></tr></table></figure></li><li><p>安装之后在图形界面下打开system-config-kickstart</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#system-config-kickstart</span></span><br></pre></td></tr></table></figure></li></ol><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart1.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart2.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart3.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart5.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart6.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart7.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart8.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart9.png?raw=true" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">centos7上包安装界面时是空白的，此时需要把yum源的[base]改为[development]</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart10.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart11.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart12.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart13.png?raw=true" alt="img"></p><p>查看下是否生成了<code>ks.cfg</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#ll ks.cfg </span></span><br><span class="line">-rw-r--r-- 1 root root 1345 Nov 18 14:34 ks.cfg</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#mkdir -pv /var/www/html/ksdir/&#123;6,7&#125;</span></span><br><span class="line">mkdir: created directory `/var/www/html/ksdir<span class="string">'</span></span><br><span class="line"><span class="string">mkdir: created directory `/var/www/html/ksdir/6'</span></span><br><span class="line">mkdir: created directory `/var/www/html/ksdir/7<span class="string">'</span></span><br><span class="line"><span class="string">[root@CentOS6 ~]#mv ks.cfg /var/www/html/ksdir/6/ks_mini.cfg  </span></span><br><span class="line"><span class="string">[root@CentOS6 ~]#ll /var/www/html/ksdir/6/ks_mini.cfg</span></span><br><span class="line"><span class="string">-rw-r--r-- 1 root root 1345 Nov 18 14:34 /var/www/html/ksdir/6/ks_mini.cfg</span></span><br></pre></td></tr></table></figure><p>如果对ks_mini.cfg文件进行修改，格式出现错误势必后面的安装也不能正常进行，那么此时我们可以用ksvalidator来进行检查</p><p>格式：ksvalidator ks_mini.cfg</p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/kickstart14.png?raw=true" alt="img"></p><p>    如果访问的时候出现没有权限的提示，首先查看该应答文件是否为644权限<br>如果权限不是此时应该修改权限<br>chmod 644 ks6_mini.cfg<br>如果权限是644权限，那么此时应该关闭selinux</p><p>关闭方法：vim /etc/selinux/config 将SELINUX=enabled 改为SELINUX=disabled,重启即可</p><p>此时已经可以通过刚才生成的文件通过网络来实现自动化安装，点击启动，把刚才的虚拟机重启（此时就需要光盘引导）</p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E5%BC%80%E6%9C%BA%E7%95%8C%E9%9D%A2.png?raw=true" alt="img"></p><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E9%85%8D%E7%BD%AEboot.png?raw=true" alt="img"><br>    此时当你按下ENTER之后，就意味着你可以去休息了，剩下的事情完全自动化安装了。</p><h1 id="kickstart文件的格式"><a href="#kickstart文件的格式" class="headerlink" title="kickstart文件的格式"></a>kickstart文件的格式</h1><ol><li><p>命令段：指明各种安装前配置，如键盘类型等</p></li><li><p>程序包段：指明要安装的程序包组或程序包，不安装的程序包等</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%packages  </span><br><span class="line">@group_name  </span><br><span class="line">package  </span><br><span class="line">-package</span><br><span class="line">%end</span><br></pre></td></tr></table></figure></li><li><p>脚本段：</p><blockquote><p>%pre: 安装前脚本<br>运行环境：运行于安装介质上的微型Linux环境</p></blockquote></li></ol><blockquote><p>%post: 安装后脚本<br>运行环境：安装完成的系统</p><ol><li><p>命令段中的命令：</p><p> 必备命令</p><blockquote><p>authconfig: 认证方式配置<br>authconfig –useshadow –passalgo=sha512<br>bootloader：bootloader的安装位置及相关配置<br>bootloader –location=mbr –driveorder=sda –<br>append=”crashkernel=auto rhgb quiet”<br>keyboard: 设定键盘类型<br>lang: 语言类型<br>part: 创建分区<br>rootpw: 指明root的密码<br>timezone: 时区</p></blockquote></li></ol></blockquote><blockquote><p>可选命令</p><blockquote><p>install OR upgrade<br>text: 文本安装界面<br>network<br>firewall<br>selinux<br>halt<br>poweroff<br>reboot<br>repo<br>user：安装完成后为系统创建新用户<br>url: 指明安装源<br>key –skip 跳过安装号码,适用于rhel版本</p></blockquote></blockquote><h1 id="制作引导光盘和U盘"><a href="#制作引导光盘和U盘" class="headerlink" title="制作引导光盘和U盘"></a>制作引导光盘和U盘</h1><p>创建引导光盘：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir –pv /app/myiso</span><br><span class="line">cp -r /misc/<span class="built_in">cd</span>/isolinux/ /app/myiso/</span><br><span class="line">vim /app/myiso/isolinux/isolinux.cfg</span><br><span class="line">initrd=initrd.img text ks=cdrom:/myks.cfg</span><br><span class="line">cp /root/myks.cfg /app/myiso/</span><br><span class="line">mkisofs -R -J -T -v --no-emul-boot --boot-load-size 4 --boot-info-table -V <span class="string">"CentOS 6.9 x86_64 boot"</span> -b isolinux/isolinux.bin -c isolinux/boot.cat -o /root/boot.iso /app/myiso/</span><br></pre></td></tr></table></figure><p>注意：以上相对路径都是相对于光盘的根，和工作目录无关</p><p>创建U盘启动盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/sr0 of=/dev/sdb</span><br></pre></td></tr></table></figure><h1 id="mkisofs选项"><a href="#mkisofs选项" class="headerlink" title="mkisofs选项"></a>mkisofs选项</h1><p>-o 指定映像文件的名称。<br>-b 指定在制作可开机光盘时所需的开机映像文件。<br>-c 制作可开机光盘时，会将开机映像文件中的 no-eltorito-catalog 全部内容作成一个文件。<br>-no-emul-boot 非模拟模式启动。<br>-boot-load-size 4 设置载入部分的数量<br>-boot-info-table 在启动的图像中现实信息<br>-R 或 -rock 使用 Rock RidgeExtensions<br>-J 或 -joliet 使用 Joliet 格式的目录与文件名称<br>-v 或 -verbose 执行时显示详细的信息<br>-T 或 -translation-table 建立文件名的转换表，适用于不支持 Rock Ridge Extensions 的系统上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#mkdir /data/iso</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cp -r /misc/cd/isolinux/ /data/iso</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#tree /data/iso</span></span><br><span class="line">/data/iso</span><br><span class="line">└── isolinux</span><br><span class="line">├── boot.cat</span><br><span class="line">├── boot.msg</span><br><span class="line">├── grub.conf</span><br><span class="line">├── initrd.img</span><br><span class="line">├── isolinux.bin</span><br><span class="line">├── isolinux.cfg</span><br><span class="line">├── memtest</span><br><span class="line">├── splash.jpg</span><br><span class="line">├── TRANS.TBL</span><br><span class="line">├── vesamenu.c32</span><br><span class="line">└── vmlinuz</span><br><span class="line"></span><br><span class="line">1 directory, 11 files</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cp /var/www/html/ksdir/6/ks_mini.cfg /data/iso/</span></span><br><span class="line">[root@CentOS6 iso]<span class="comment">#mkdir ksdir</span></span><br><span class="line">[root@CentOS6 iso]<span class="comment">#mv ks_mini.cfg ksdir/</span></span><br><span class="line">[root@CentOS6 iso]<span class="comment">#ls</span></span><br><span class="line">isolinux ksdir</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kickstart安装步骤&quot;&gt;&lt;a href=&quot;#kickstart安装步骤&quot; class=&quot;headerlink&quot; title=&quot;kickstart安装步骤&quot;&gt;&lt;/a&gt;kickstart安装步骤&lt;/h1&gt;&lt;p&gt;    自动化安装之前我们首先要使用相应的工具去生成
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="kickstart" scheme="http://yoursite.com/tags/kickstart/"/>
    
      <category term="mkisofs" scheme="http://yoursite.com/tags/mkisofs/"/>
    
  </entry>
  
  <entry>
    <title>加密和安全</title>
    <link href="http://yoursite.com/2018/11/13/%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2018/11/13/加密和安全/</id>
    <published>2018-11-12T16:00:00.000Z</published>
    <updated>2019-01-12T04:51:33.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h1><h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png?raw=true" alt="img"></p><p>加密和解密使用同一个密钥<br>特性：</p><blockquote><p>加密、解密使用同一个密钥，效率高<br>将原始数据分割成固定大小的块，逐个进行加密</p></blockquote><p>缺陷：</p><blockquote><p>密钥过多<br>密钥分发<br>数据来源无法确认</p></blockquote><h1 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h1><h2 id="公钥加密-密钥是成对出现"><a href="#公钥加密-密钥是成对出现" class="headerlink" title="公钥加密:密钥是成对出现"></a>公钥加密:密钥是成对出现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]#cd /etc/ssh</span><br><span class="line">[root@cetos7 ssh]#ll</span><br><span class="line">-rw-r-----. 1 root ssh_keys   1679 Sep 25 11:01 ssh_host_rsa_key</span><br><span class="line">-rw-r--r--. 1 root root        382 Sep 25 11:01 ssh_host_rsa_key.pub</span><br></pre></td></tr></table></figure><blockquote><p>公钥：公开给所有人；public key<br>私钥：自己留存，必须保证其私密性；secret key</p></blockquote><p>特点：用公钥加密数据，只能使用与之配对的私钥解密；反之亦然</p><p>功能：</p><blockquote><p>数字签名：主要在于让接收方确认发送方身份<br>对称密钥交换：发送方用对方的公钥加密一个对称密钥后发送给对方<br>数据加密：适合加密较小数据</p></blockquote><p>缺点：密钥长，加密解密效率低下</p><h2 id="非对称加密-基于一对公钥-密钥对"><a href="#非对称加密-基于一对公钥-密钥对" class="headerlink" title="非对称加密:基于一对公钥/密钥对"></a>非对称加密:基于一对公钥/密钥对</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86.png?raw=true" alt="img"><br>用密钥对中的一个加密，另一个解密</p><ol><li><p>实现加密：</p><blockquote><p>接收者生成公钥/密钥对：P和S ;公开公钥P，保密密钥S<br>发送者使用接收者的公钥来加密消息M ;将P(M)发送给接收者<br>接收者使用密钥S来解密：M=S(P(M))</p></blockquote></li><li><p>实现数字签名</p><blockquote><p>发送者生成公钥/密钥对：P和S ;公开公钥P，保密密钥S ;使用密钥S来加密消息M ;发送给接收者S(M)<br>接收者使用发送者的公钥来解密M=P(S(M))</p></blockquote></li></ol><p>数字签名<br><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png?raw=true" alt="数字签名"></p><ol><li>结合签名和加密</li><li>分离签名</li></ol><h1 id="单向散列-数字指纹"><a href="#单向散列-数字指纹" class="headerlink" title="单向散列(数字指纹)"></a>单向散列(数字指纹)</h1><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97.png?raw=true" alt="img"></p><ol><li><p>将任意数据缩小成固定大小的“指纹”</p><blockquote><p>任意长度输入<br>固定长度输出<br>若修改数据，指纹也会改变（“不会产生冲突”）<br>无法从指纹中重新生成数据（“单向”）</p></blockquote></li><li><p>功能：数据完整性</p></li><li><p>常见算法<br> md5: 128bits、<br> sha1: 160bits、 sha224、sha256、 sha384、 sha512</p></li><li><p>常用工具</p><blockquote><p>md5sum | sha1sum [ –check ] file<br>openssl、 gpg<br>rpm -V</p></blockquote></li></ol><p>加密类型对比</p><table><thead><tr><th></th><th><code>加密速度</code></th><th><code>密钥数</code></th><th><code>分发难度</code></th><th><code>密钥安全性</code></th></tr></thead><tbody><tr><td>对称加密</td><td>中</td><td>多</td><td>难，方式很多，很混乱</td><td>安全机制很不健全</td></tr><tr><td>单向加密</td><td>快</td><td>无</td><td>最简单，官网公布</td><td>不需要安全性</td></tr><tr><td>非对称加密</td><td>慢</td><td>少</td><td>中，通过CA分发</td><td>有健全的安全机制</td></tr></tbody></table><h1 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h1><p>密钥交换：IKE（ Internet Key Exchange ）</p><blockquote><p>公钥加密<br>DH (Deffie-Hellman)：生成会话密钥，</p><blockquote><p>DH</p><blockquote><p>A: g,p 协商生成公开的整数g, 大素数p<br>B: g,p<br>A:生成隐私数据 :a (a&lt;p )，计算得出 g^a%p，发送给B<br>B:生成隐私数据 :b,计算得出 g^b%p，发送给A<br>A:计算得出 [(g^b%p)^a] %p = g^ab%p，生成为密钥<br>B:计算得出 [(g^a%p)^b] %p = g^ab%p，生成为密钥</p></blockquote></blockquote></blockquote><h1 id="使用gpg实现对称加密"><a href="#使用gpg实现对称加密" class="headerlink" title="使用gpg实现对称加密"></a>使用gpg实现对称加密</h1><ol><li><p>对称加密file文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg -c filename</span><br><span class="line">ls filename.gpg</span><br></pre></td></tr></table></figure></li><li><p>在另一台主机上解密filename</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg -o file -d filename.gpg</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用gpg工具实现公钥加密"><a href="#使用gpg工具实现公钥加密" class="headerlink" title="使用gpg工具实现公钥加密"></a>使用gpg工具实现公钥加密</h1><p>在hostB主机上用公钥加密，在hostA主机上解密</p><ol><li><p>在hostA主机上生成公钥/私钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg –gen-key</span><br></pre></td></tr></table></figure></li><li><p>在hostA主机上查看公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg –list-keys</span><br></pre></td></tr></table></figure></li><li><p>在hostA主机上导出公钥到/data/magedupubkey</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg -a –<span class="built_in">export</span> -o /data/magedupubkey</span><br></pre></td></tr></table></figure></li><li><p>从hostA主机上复制公钥文件到需加密的B主机上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp magedupubkey hostB:</span><br></pre></td></tr></table></figure></li><li><p>在需加密数据的hostB主机上生成公钥/私钥对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg –list-keys</span><br><span class="line">gpg –gen-key</span><br></pre></td></tr></table></figure></li><li><p>在hostB主机上导入公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg –import magedupubkey</span><br><span class="line">gpg –list-keys</span><br></pre></td></tr></table></figure></li><li><p>用从hostA主机导入的公钥，加密hostB主机的文件file,生成file.gpg</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg -e -r magedu f1.txt</span><br><span class="line">f1.txt.gpg</span><br></pre></td></tr></table></figure></li><li><p>复制加密文件到hostA主机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp f1.txt.gpg hostA:</span><br></pre></td></tr></table></figure></li><li><p>在hostA主机解密文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg -o f1.txt -d f1.txt.gpg</span><br></pre></td></tr></table></figure></li><li><p>删除公钥和私钥(先删除私钥再删公钥)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg –delete-secret-keys wange</span><br><span class="line">gpg –delete-keys wange</span><br></pre></td></tr></table></figure></li></ol><h1 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h1><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB.png?raw=true" alt="img"></p><h1 id="CA和证书"><a href="#CA和证书" class="headerlink" title="CA和证书"></a>CA和证书</h1><p>PKI: Public Key Infrastructure</p><blockquote><p>签证机构：CA（Certificate Authority）<br>注册机构：RA<br>证书吊销列表：CRL<br>证书存取库：</p></blockquote><h2 id="证书获取"><a href="#证书获取" class="headerlink" title="证书获取"></a>证书获取</h2><p>证书类型：</p><blockquote><p>证书授权机构的证书<br>服务器<br>用户证书<br>获取证书两种方法：</p><ol><li>使用证书授权机构<br> 生成证书请求（csr）<br> 将证书请求csr发送给CA<br> CA签名颁发证书</li><li>自签名的证书<br> 自已签发自己的公钥</li></ol></blockquote><h1 id="安全协议"><a href="#安全协议" class="headerlink" title="安全协议"></a>安全协议</h1><h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><p>功能：机密性，认证，完整性，重放保护<br>两阶段协议，分为握手阶段和应用阶段</p><ol><li><p>握手阶段(协商阶段):客户端和服务器端认证对方身份（依赖于PKI体系，利用数字证书进行身份认证），并协商通信中使用的安全参数、密码套件以及主密钥。 后续通信使用的所有密钥都是通过MasterSecret生成。</p></li><li><p>应用阶段:在握手阶段完成后进入，在应用阶段通信双方使用握手阶段协商好的密钥进行安全通信</p></li></ol><h2 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/SSL%E5%92%8CTLS.png?raw=true" alt="SSL和TLS.png"></p><ul><li>Handshake协议：包括协商安全参数和密码套件、服务器身份认证（客户端身份认证可选）、密钥交换</li><li>ChangeCipherSpec 协议：一条消息表明握手协议已经完成</li><li>Alert 协议：对握手协议中一些异常的错误提醒，分为fatal和warning两个级别，fatal类型错误会直接中断SSL链接，而warning级别的错误SSL链接仍可继续，只是会给出错误警告</li><li>Record 协议：包括对消息的分段、压缩、消息认证和完整性保护、加密等</li><li>HTTPS 协议：就是“HTTP 协议”和“SSL/TLS 协议”的组合。 HTTP overSSL” 或“HTTP over TLS” ，对http协议的文本数据进行加密处理后，成为二进制形式传输</li></ul><h1 id="openssl命令"><a href="#openssl命令" class="headerlink" title="openssl命令"></a>openssl命令</h1><p>两种运行模式：交互模式和批处理模式<br>openssl version：程序版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#openssl version</span></span><br><span class="line">OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure><ol><li><p>对称加密：</p><p>工具：openssl enc, gpg</p><p>算法：3des, aes, blowfish, twofish</p><blockquote><p>enc命令<br>加密：<br>openssl enc -e -des3 -a -salt -in filename -out filename.enc<br>解密：<br>openssl enc -d -des3 -a -salt –in filename.enc -out filename</p></blockquote></li><li><p>单向加密：</p><p>工具：md5sum, sha1sum, sha224sum,sha256sum…</p><blockquote><p>dgst命令：<br>openssl dgst -md5 [-hex默认] filename<br>md5sum filename</p></blockquote></li><li><p>生成用户密码<br> passwd命令:<br> openssl passwd -1<br> openssl passwd -1 -salt “SALT(最多8位)”</p></li><li><p>生成随机数<br> openssl rand -base64|-hex NUM<br> NUM: 表示字节数,使用-hex,每个字符为十六进制,相当于4位二进制,出现的字符数为NUM*2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#openssl rand -base64 3</span></span><br><span class="line">n5c0</span><br><span class="line">[root@cetos7 ~]<span class="comment">#openssl rand -hex 3</span></span><br><span class="line">a8e1d2</span><br></pre></td></tr></table></figure></li><li><p>公钥加密<br> 算法：RSA, ELGamal<br> 工具：gpg, openssl rsautl（man rsautl）</p></li><li><p>数字签名<br> 算法：RSA, DSA, ELGamal</p></li><li><p>密钥交换：</p><p>算法：dh</p><p>生成私钥<br>openssl genrsa -out /PATH/TO/PRIVATEKEY.FILE NUM_BITS</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos~]<span class="comment">#openssl genrsa -out test.key 1024</span></span><br></pre></td></tr></table></figure><p>(umask 077; openssl genrsa –out test.key –des 2048) 加密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos~]<span class="comment">#(umask 077;openssl genrsa -out test.key -des 2048)</span></span><br></pre></td></tr></table></figure><p>openssl rsa -in test.key –out test.bak 将加密key解密</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos~]<span class="comment">#openssl rsa -in test.key -out test.bak</span></span><br></pre></td></tr></table></figure><p>从私钥中提取出公钥</p><blockquote><p>openssl rsa –in test.key –pubout –out test.key.pub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@centos~]<span class="comment">#openssl rsa -in test.key -pubout -out test.key.pub</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>随机数生成器：伪随机数字</p><p>  键盘和鼠标，块设备中断</p><blockquote><p>/dev/random：仅从熵池返回随机数；随机数用尽，阻塞</p><blockquote><p>/dev/urandom：从熵池返回随机数；随机数用尽，会利用软件生成伪随机数,非阻塞OpenSSL</p></blockquote></blockquote><h1 id="创建CA和申请证书"><a href="#创建CA和申请证书" class="headerlink" title="创建CA和申请证书"></a>创建CA和申请证书</h1><ol><li><p>创建所需要的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/pki/CA/index.txt 生成证书索引数据库文件</span><br><span class="line"><span class="built_in">echo</span> 01 &gt; /etc/pki/CA/serial 指定第一个颁发证书的序列号</span><br></pre></td></tr></table></figure></li><li><p>CA自签证书<br> 生成私钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pki/CA/</span><br><span class="line">(<span class="built_in">umask</span> 066; openssl genrsa -out private/cakey.pem 2048)</span><br></pre></td></tr></table></figure></li></ol><p>生成自签名证书</p><blockquote><p>openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -days 3650 -out /etc/pki/CA/cacert.pem<br>选项说明：<br>-new：生成新证书签署请求<br>-x509：专用于CA生成自签证书<br>-key：生成请求时用到的私钥文件<br>-days n：证书的有效期限<br>-out /PATH/TO/SOMECERTFILE: 证书的保存路径  </p></blockquote><ol start="3"><li><p>颁发证书</p><p> 在需要使用证书的主机生成证书请求<br> 给web服务器生成私钥<br> ​    (umask 066; openssl genrsa –out /data/test.key 2048)</p></li></ol><p>生成证书申请文件</p><blockquote><p>openssl req -new -key /data/test.key -out /data/test.csr</p></blockquote><p>将证书请求文件传输给CA</p><p>CA签署证书，并将证书颁发给请求者</p><blockquote><p>openssl ca -in /tmp/test.csr –out /etc/pki/CA/certs/test.crt -days 100<br>注意：默认要求 国家，省，公司名称三项必须和CA一致创建CA和证书管理</p></blockquote><p>查看证书中的信息：</p><blockquote><p>openssl x509 -in /PATH/FROM/CERT_FILE -noout -text|issuer|subject|serial|dates<br>openssl ca -status SERIAL 查看指定编号的证书状态</p></blockquote><ol start="4"><li><p>吊销证书</p><blockquote><p>openssl ca -revoke /etc/pki/CA/newcerts/SERIAL.pem<br>指定第一个吊销证书的编号,注意：第一次更新证书吊销列表前，才需要执行<br>echo 01 &gt; /etc/pki/CA/crlnumber</p></blockquote></li></ol><p>更新证书吊销列表</p><blockquote><p>openssl ca -gencrl -out /etc/pki/CA/crl.pem</p></blockquote><p>查看crl文件：</p><blockquote><p>openssl crl -in /etc/pki/CA/crl.pem -noout -text</p></blockquote><h1 id="SSH-22-tcp"><a href="#SSH-22-tcp" class="headerlink" title="SSH(22/tcp)"></a>SSH(22/tcp)</h1><ol><li><p>具体的软件实现：</p><blockquote><p>OpenSSH: ssh协议的开源实现，CentOS默认安装<br>dropbear：另一个开源实现</p></blockquote></li><li><p>两种方式的用户登录认证：</p><blockquote><p>基于password<br>基于key</p></blockquote></li><li><p>Openssh软件组成<br> 相关包：<br> openssh<br> openssh-clients<br> openssh-server</p></li><li><p>工具：<br> 基于C/S结构</p><blockquote><p>Client: ssh, scp, sftp，slogin<br>Windows客户端:xshell, putty, securecrt, sshsecureshellclient<br>Server: sshd</p></blockquote></li></ol><h2 id="ssh客户端"><a href="#ssh客户端" class="headerlink" title="ssh客户端"></a>ssh客户端</h2><ol><li>允许实现对远程系统经验证地加密安全访问</li><li>当用户远程连接ssh服务器时，会复制ssh服务器/etc/ssh/ssh_host*key.pub（CentOS7默认是ssh_host_ecdsa_key.pub）文件中的公钥到客户机的~./ssh/know_hosts中。下次连接时，会自动匹配相应私钥，不能匹配，将拒绝连接</li></ol><p>客户端组件：<br>ssh, 配置文件：/etc/ssh/ssh_config<br>Host PATTERN<br>StrictHostKeyChecking no 首次登录不显示检查提示<br>格式：ssh [user@]host [COMMAND]<br>ssh [-l user] host [COMMAND]<br>常见选项<br>-p port：远程服务器监听的端口<br>-b：指定连接的源IP<br>-v：调试模式<br>-C：压缩方式<br>-X：支持x11转发<br>-t：强制伪tty分配<br>ssh -t remoteserver1 ssh -t remoteserver2 ssh remoteserver3</p><h2 id="ssh服务登录验证方式："><a href="#ssh服务登录验证方式：" class="headerlink" title="ssh服务登录验证方式："></a>ssh服务登录验证方式：</h2><h3 id="基于用户和口令登录验证"><a href="#基于用户和口令登录验证" class="headerlink" title="基于用户和口令登录验证"></a>基于用户和口令登录验证</h3><blockquote><p>客户端发起ssh请求，服务器会把自己的公钥发送给用户<br>用户会根据服务器发来的公钥对密码进行加密<br>加密后的信息回传给服务器，服务器用自己的私钥解密，如果密码正确，则用户登录成功</p></blockquote><h3 id="基于密钥的登录方式"><a href="#基于密钥的登录方式" class="headerlink" title="基于密钥的登录方式"></a>基于密钥的登录方式</h3><blockquote><p>首先在客户端生成一对密钥（ssh-keygen）<br>并将客户端的公钥ssh-copy-id 拷贝到服务端<br>当客户端再次发送一个连接请求，包括ip、用户名<br>服务端得到客户端的请求后，会到authorized_keys中查找，如果有响应的IP和用户，就会随机生成一个字符串，例如：magedu<br>服务端将使用客户端拷贝过来的公钥进行加密，然后发送给客户端<br>得到服务端发来的消息后，客户端会使用私钥进行解密，然后将解密后的字符串发送给服务端<br>服务端接受到客户端发来的字符串后，跟之前的字符串进行对比，如果一致，就允许免密码登录</p></blockquote><p>基于key认证</p><ol><li><p>在客户端生成密钥对</p><blockquote><p>ssh-keygen -t rsa [-P ‘’] [-f “~/.ssh/id_rsa”]</p></blockquote></li><li><p>把公钥文件传输至远程服务器对应用户的家目录</p><blockquote><p>ssh-copy-id [-i [identity_file]] [user@]host</p></blockquote></li><li><p>重设私钥口令：</p><blockquote><p>ssh-keygen –p</p></blockquote></li><li><p>验证代理（authentication agent）保密解密后的密钥<br> • 这样口令就只需要输入一次<br> • 在GNOME中，代理被自动提供给root用户<br> • 否则运行ssh-agent bash</p></li><li><p>钥匙通过命令添加给代理</p><blockquote><p>ssh-add</p></blockquote></li></ol><h1 id="rsync命令"><a href="#rsync命令" class="headerlink" title="rsync命令"></a>rsync命令</h1><p>基于ssh和rsh服务实现高效率的远程系统之间复制文件<br>使用安全的shell连接做为传输方式</p><blockquote><p>rsync -av /etc server1:/tmp 复制目录和目录下文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@CentOS6 data]<span class="comment">#ll ssl</span></span><br><span class="line">&gt; total 12</span><br><span class="line">&gt; -rw-r--r--. 1 root root 3715 Nov 14 12:27 app.crt</span><br><span class="line">&gt; -rw-r--r--. 1 root root  655 Nov 14 08:52 app.csr</span><br><span class="line">&gt; -rw-------. 1 root root  887 Nov 14 08:48 app.key</span><br><span class="line">&gt; [root@CentOS6 data]<span class="comment">#rsync -av /data/ssl 192.168.183.148:/data</span></span><br><span class="line">&gt; root@192.168.183.148<span class="string">'s password: </span></span><br><span class="line"><span class="string">&gt; sending incremental file list</span></span><br><span class="line"><span class="string">&gt; ssl/</span></span><br><span class="line"><span class="string">&gt; ssl/app.crt</span></span><br><span class="line"><span class="string">&gt; ssl/app.csr</span></span><br><span class="line"><span class="string">&gt; ssl/app.key</span></span><br><span class="line"><span class="string">&gt; </span></span><br><span class="line"><span class="string">&gt; sent 5472 bytes  received 73 bytes  528.10 bytes/sec</span></span><br><span class="line"><span class="string">&gt; total size is 5257  speedup is 0.95</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>rsync -av /etc/ server1:/tmp 只复制目录下文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@CentOS6 data]<span class="comment">#rsync -av /data/ssl/ 192.168.183.148:/data</span></span><br><span class="line">&gt; root@192.168.183.148<span class="string">'s password: </span></span><br><span class="line"><span class="string">&gt; sending incremental file list</span></span><br><span class="line"><span class="string">&gt; ./</span></span><br><span class="line"><span class="string">&gt; app.crt</span></span><br><span class="line"><span class="string">&gt; app.csr</span></span><br><span class="line"><span class="string">&gt; app.key</span></span><br><span class="line"><span class="string">&gt; </span></span><br><span class="line"><span class="string">&gt; sent 5460 bytes  received 72 bytes  1229.33 bytes/sec</span></span><br><span class="line"><span class="string">&gt; total size is 5257  speedup is 0.95</span></span><br><span class="line"><span class="string">&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>比scp更快，只复制不同的文件<br>常用选项：<br>-n 模拟复制过程<br>-v 显示详细过程<br>-r 递归复制目录树<br>-p 保留权限<br>-t 保留时间戳<br>-g 保留组信息<br>-o 保留所有者信息<br>-l 将软链接文件本身进行复制（默认）<br>-L 将软链接文件指向的文件复制<br>-a 存档，相当于–rlptgoD，但不保留ACL（-A）和SELinux属性（-X）</p><h1 id="pssh工具"><a href="#pssh工具" class="headerlink" title="pssh工具"></a>pssh工具</h1><p>pssh是一个python编写可以在多台服务器上执行命令的工具，也可实现文件复制<br>选项如下：<br>–version：查看版本<br>-h：主机文件列表，内容格式” [user@]host[:port]”<br>-H：主机字符串，内容格式” [user@]host[:port]”<br>-A：手动输入密码模式<br>-i：每个服务器内部处理信息输出<br>-l：登录使用的用户名<br>-p：并发的线程数【可选】<br>-o：输出的文件目录【可选】<br>-e：错误输入文件【可选】<br>-t：TIMEOUT 超时时间设置，0无限制【可选】<br>-O：SSH的选项<br>-P：打印出服务器返回信息<br>-v：详细模式</p><p>pssh示例</p><ol><li><p>通过pssh批量关闭seLinux</p><blockquote><p>pssh -H <a href="mailto:root@192.168.183.158" target="_blank" rel="noopener">root@192.168.183.158</a> -i “sed-i “s/SELINUX=enforcing/SELINUX=disabled/“ /etc/selinux/config”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; [root@cetos7 ~]<span class="comment">#pssh -H root@192.168.183.158 -i "sed -i "s/SELINUX=enforcing/SELINUX=disabled/" /etc/selinux/config"</span></span><br><span class="line">&gt; [1] 20:25:13 [SUCCESS] root@192.168.183.158</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>批量发送指令</p><blockquote><p>pssh -H <a href="mailto:root@192.168.1.10" target="_blank" rel="noopener">root@192.168.1.10</a> -i setenforce 0<br>pssh -H <a href="mailto:wang@192.168.1.10" target="_blank" rel="noopener">wang@192.168.1.10</a> -i hostname</p></blockquote></li><li><p>当不支持ssh的key认证时，通过 -A选项，使用密码认证批量执行指令</p><blockquote><p>pssh -H <a href="mailto:wang@192.168.1.10" target="_blank" rel="noopener">wang@192.168.1.10</a> -A -i hostname</p></blockquote></li><li><p>将标准错误和标准正确重定向都保存至/app目录下</p><blockquote><p>pssh -H 192.168.1.10 -o /app -e /app -i “hostname”</p></blockquote></li></ol><h1 id="SSH端口转发"><a href="#SSH端口转发" class="headerlink" title="SSH端口转发"></a>SSH端口转发</h1><p>    SSH会自动加密和解密所有SSH客户端与服务端之间的网络数据。但是SSH还能够将其他TCP端口的网络数据通过SSH链接来转发，并且自动提供了相应的加密及解密服务。这一过程也被叫做“隧道”（tunneling),这是因为 SSH 为其他TCP链接提供了一个安全的通道来进行传输而得名。例如Telnet，SMTP，LDAP这些TCP应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果工作环境中的防火墙限制了一些网络端口的使用，但是允许SSH的连接，也能够通过将TCP端口转发来使用SSH进行通讯</p><p>SSH 端口转发能够提供两大功能：</p><blockquote><p>加密 SSH Client 端至 SSH Server 端之间的通讯数据<br>突破防火墙的限制完成一些之前无法建立的 TCP 连接SSH端口转发</p></blockquote><ol><li><p>本地转发：</p><p> -L localport:remotehost:remotehostport sshserver</p><p> 选项：</p><p> -f 后台启用</p><p> -N 不打开远程shell，处于等待状态</p><p> -g 启用网关功能</p><p> 示例</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ssh –L 9527:telnetsrv:23 -Nfg sshsrv</span><br><span class="line">telnet 127.0.0.1 9527 </span><br><span class="line">​``` </span><br><span class="line">当访问本机的9527的端口时，被加密后转发到sshsrv的ssh服务，再解密被转发到telnetsrv:23</span><br><span class="line">&gt;data &lt;--&gt; localhost:9527 &lt;--&gt; localhost:XXXXX &lt;--&gt; sshsrv:22 &lt;--&gt; sshsrv:YYYYY &lt;--&gt; telnetsrv:23</span><br><span class="line"></span><br><span class="line">2. 远程转发:</span><br><span class="line">-R sshserverport:remotehost:remotehostport sshserver  </span><br><span class="line">示例：</span><br><span class="line">​```bash</span><br><span class="line">ssh –R 9527:telnetsrv:23 –Nf sshsrv</span><br></pre></td></tr></table></figure></li></ol><p>让sshsrv侦听9527端口的访问，如有访问，就加密后通过ssh服务转发请求到本机ssh客户端，再由本机解密后转发到telnetsrv:23</p><blockquote><p>Data <--> sshsrv:9527 <--> sshsrv:22 <--> localhost:XXXXX <-->localhost:YYYYY <--> telnetsrv:23</--></--></--></--></--></p></blockquote><ol><li><p>动态端口转发：<br> 当用firefox访问internet时，本机的1080端口做为代理服务器，firefox的访问请求被转发到sshserver上，由sshserver替之访问internet</p><blockquote><p>ssh -D 1080 root@sshserver -fNg<br>在本机firefox设置代理socket proxy:127.0.0.1:1080<br>curl –socks5 127.0.0.1:1080 <a href="http://www.qq.com" target="_blank" rel="noopener">http://www.qq.com</a></p></blockquote></li><li><p>X 协议转发<br> 所有图形化应用程序都是X客户程序</p><blockquote><p>能够通过tcp/ip连接远程X服务器<br>数据没有加密机，但是它通过ssh连接隧道安全进行</p></blockquote></li></ol><p>ssh -X user@remotehost gedit<br>remotehost主机上的gedit工具，将会显示在本机的X服务器上<br>传输的数据将通过ssh连接加密</p><h1 id="ssh服务器"><a href="#ssh服务器" class="headerlink" title="ssh服务器"></a>ssh服务器</h1><p>服务器端：sshd</p><h2 id="配置文件-etc-ssh-sshd-config"><a href="#配置文件-etc-ssh-sshd-config" class="headerlink" title="配置文件: /etc/ssh/sshd_config"></a>配置文件: /etc/ssh/sshd_config</h2><p>常用参数：<br>Port<br>ListenAddress ip<br>LoginGraceTime 2m<br>PermitRootLogin yes<br>StrictModes yes 检查.ssh/文件的所有者，权限等<br>MaxAuthTries 6<br>MaxSessions 10 同一个连接最大会话<br>PubkeyAuthentication yes<br>PermitEmptyPasswords no<br>PasswordAuthentication yes<br>GatewayPorts no<br>ClientAliveInterval 单位:秒<br>ClientAliveCountMax 默认3<br>UseDNS yes<br>GSSAPIAuthentication yes 提高速度可改为no<br>MaxStartups 未认证连接最大值，默认值10<br>Banner /path/file 登录提示信息<br>限制可登录用户的办法：</p><blockquote><p>AllowUsers user1 user2 user3<br>DenyUsers<br>AllowGroups<br>DenyGroup</p></blockquote><h2 id="sssh服务的最佳实践"><a href="#sssh服务的最佳实践" class="headerlink" title="sssh服务的最佳实践"></a>sssh服务的最佳实践</h2><p>建议使用非默认端口<br>禁止使用protocol version 1<br>限制可登录用户<br>设定空闲会话超时时长<br>利用防火墙设置ssh访问策略<br>仅监听特定的IP地址<br>基于口令认证时，使用强密码策略</p><blockquote><p>tr -dc A-Za-z0-9_ &lt; /dev/urandom | head -c 12| xargs<br>使用基于密钥的认证<br>禁止使用空密码<br>禁止root用户直接登录<br>限制ssh的访问频度和并发在线数<br>经常分析日志</p></blockquote><h1 id="编译安装dropbear"><a href="#编译安装dropbear" class="headerlink" title="编译安装dropbear"></a>编译安装dropbear</h1><p>ssh协议的另一个实现：dropbear</p><h2 id="源码编译安装："><a href="#源码编译安装：" class="headerlink" title="源码编译安装："></a>源码编译安装：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 安装开发包组:yum groupinstall <span class="string">"Development tools"</span>    </span><br><span class="line">2. 下载dropbear-2017.75.tar.bz2 </span><br><span class="line"></span><br><span class="line">wget https://matt.ucc.asn.au/dropbear/dropbear-2017.75.tar.bz2</span><br><span class="line"></span><br><span class="line">3. tar xf dropbear-2017.75.tar.bz2  </span><br><span class="line">4.  cat INSTALL </span><br><span class="line">    cat README  </span><br><span class="line">5. ./configure --prefix=/app/dropbear --sysconfdir=/etc/dropbear</span><br><span class="line">6. make PROGRAMS=<span class="string">"dropbear dbclient dropbearkey dropbearconvert scp"</span>  </span><br><span class="line">7. make PROGRAMS=<span class="string">"dropbear dbclient dropbearkey dropbearconvert scp"</span> install</span><br></pre></td></tr></table></figure><h2 id="启动ssh服务："><a href="#启动ssh服务：" class="headerlink" title="启动ssh服务："></a>启动ssh服务：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. ls /app/dropbear/sbin/ /app/dropbear/bin/  </span><br><span class="line">2. /app/dropbear/sbin/dropbear -h  </span><br><span class="line">3. mkdir /etc/dropbear  </span><br><span class="line">4. <span class="built_in">cd</span> /app/dropbear/bin</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'PATH=$PATH:/app/dropbear/bin:/app/dropbear/sbin'</span> &gt; /etc/profile.d/dropbear.sh</span><br><span class="line">dropbearkey -t rsa -f /etc/dropbear/dropbear_rsa_host_key   </span><br><span class="line">5.  <span class="built_in">cd</span> /app/dropbear/sbin</span><br><span class="line">dropbear -p :2222 -F –E  <span class="comment">#前台运行  </span></span><br><span class="line">dropbear -p :2222        <span class="comment">#后台运行</span></span><br><span class="line">6. 客户端访问：</span><br><span class="line">ssh -p 2222 root@127.0.0.1  </span><br><span class="line">或者</span><br><span class="line"><span class="built_in">cd</span> /app/dropbear/bin</span><br><span class="line">dbclient 127.0.0.1</span><br></pre></td></tr></table></figure><h1 id="AIDE"><a href="#AIDE" class="headerlink" title="AIDE"></a>AIDE</h1><p>    当一个入侵者进入了你的系统并且种植了木马，通常会想办法来隐蔽这个木马（除了木马自身的一些隐蔽特性外,他会尽量给你检查系统的过程设置障碍),通常入侵者会修改一些文件,比如管理员通常用<code>ps -aux</code>来查看系统进程，那么入侵者很可能用自己经过修改的ps程序来替换掉你系统上的ps程序，以使用ps命令查不到正在运行的木马程序。如果入侵者发现管理员正在运行crontab作业,也有可能替换掉crontab程序等等。所以由此可以看出对于系统文件或是关键文件的检查是很必要的.目前就系统完整性检查的工具用的比较多的有两款:Tripwire和AIDE，前者是一款商业软件,后者是一款免费的但功能也很强大的工具.</p><ul><li>AIDE:高级入侵检测环境)是一个入侵检测工具，主要用途是检查文件的完整性，审计计算机上的那些文件被更改过了.</li><li>AIDE能够构造一个指定文件的数据库，它使用aide.conf作为其配置文件。 AIDE数据库能够保存文件的各种属性，包括：权限(permission)、索引节点序号(inode number)、所属用户(user)、所属用户组(group)、文件大小、最后修改时间(mtime)、创建时间(ctime)、最后访问时间(atime)、增加的大小以及连接数。 AIDE还能够使用下列算法：sha1、 md5、 rmd160、 tiger，以密文形式建立每个文件的校验码或散列号</li><li>这个数据库不应该保存那些经常变动的文件信息，例如：日志文件、邮件、 /proc文件系统、用户起始目录以及临时目录.</li></ul><ol><li><p>安装<br> yum install aide</p></li><li><p>修改配置文件</p><p> vim /etc/aide.conf (指定对哪些文件进行检测)</p><blockquote><p>/test/chameleon R<br>/bin/ps R+a<br>/usr/bin/crontab R+a<br>/etc PERMS<br>!/etc/mtab #“!” 表示忽略这个文件的检查<br>R=p+i+n+u+g+s+m+c+md5<br>权限+索引节点+链接数+用户+组+大小+最后一次修改时间+创建时间+md5校验值<br>NORMAL = R+rmd60+sha256</p></blockquote></li><li><p>初始化默认的AIDE的库：</p><blockquote><p>aide –init</p></blockquote></li><li><p>生成检查数据库（建议初始数据库存放到安全的地方）</p><blockquote><p>cd /var/lib/aide<br>mv aide.db.new.gz aide.db.gz</p></blockquote></li><li><p>检测：</p><blockquote><p>aide –check/-C</p></blockquote></li><li><p>更新数据库</p><blockquote><p>aide –update</p></blockquote></li></ol><h1 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h1><ul><li><p>sudo能够授权指定用户在指定主机上运行某些命令。 如果未授权用户尝试使用 sudo，会提示联系管理员</p></li><li><p>sudo可以提供日志，记录每个用户使用sudo操作</p></li><li><p>sudo为系统管理员提供配置文件，允许系统管理员集中地管理用户的使用权限和使用的主机</p></li><li><p>sudo使用时间戳文件来完成类似“检票”的系统，默认存活期为5分钟的“入场券”</p></li><li><p>通过visudo命令编辑配置文件，具有语法检查功能</p><blockquote><p>visudo –c 检查语法<br>visudo -f /etc/sudoers.d/test</p></blockquote></li><li><p>配置文件：/etc/sudoers, /etc/sudoers.d/</p></li><li><p>时间戳文件：/var/db/sudo</p></li><li><p>日志文件：/var/log/secure</p></li><li><p>配置文件支持使用通配符glob</p><blockquote><p>？:任意单一字符</p><ul><li>:匹配任意长度字符</li></ul><p>[wxc]:匹配其中一个字符<br>[!wxc]:除了这三个字符的其它字符<br>\x : 转义<br>[[alpha]]:字母 示例： /bin/ls [[alpha]]*</p></blockquote></li></ul><p>配置文件规则有两类<br>1、别名定义:不是必须的<br>2、授权规则:必须的<br>授权规则格式 ：<br>用户 登入主机=(代表用户) 命令<br>示例：<br>root ALL=(ALL) ALL<br>格式说明：<br>user: 运行命令者的身份<br>host: 通过哪些主机<br>(runas)：以哪个用户的身份<br>command: 运行哪些命令</p><ul><li><p>别名</p><blockquote><p>Users和runas:</p><blockquote><p>username<br>#uid<br>%group_name<br>%#gid<br>user_alias|runas_alias</p></blockquote></blockquote></li><li><p>host:</p><blockquote><p>ip或hostname<br>network(/netmask)<br>host_alias</p></blockquote></li></ul><p>*command:</p><blockquote><p>command name<br>directory<br>sudoedit<br>Cmnd_Alias</p></blockquote><h2 id="sudo别名和示例"><a href="#sudo别名和示例" class="headerlink" title="sudo别名和示例"></a>sudo别名和示例</h2><ul><li>别名有四种类型：User_Alias, Runas_Alias, Host_Alias ，Cmnd_Alias</li><li>别名格式：<a href="[A-Z][0-9]_">A-Z</a>*</li><li>别名定义：<br>  Alias_Type NAME1 = item1, item2, item3 : NAME2 = item4, item5</li></ul><p>示例1：</p><blockquote><p>Student ALL=(ALL) ALL<br>%wheel ALL=(ALL) ALL</p></blockquote><p>示例2：</p><blockquote><p>student ALL=(root) /sbin/pidof,/sbin/ifconfig<br>%wheel ALL=(ALL) NOPASSWD: ALL</p></blockquote><p>示例3</p><blockquote><p>User_Alias NETADMIN= netuser1,netuser2<br>Cmnd_Alias NETCMD = /usr/sbin/ip<br>NETADMIN ALL=（root） NETCMD</p></blockquote><p>示例4</p><blockquote><p>User_Alias SYSADER=wang,mage,%admins<br>User_Alias DISKADER=tom<br>Host_Alias SERS=<a href="http://www.magedu.com,172.16.0.0/24" target="_blank" rel="noopener">www.magedu.com,172.16.0.0/24</a><br>Runas_Alias OP=root<br>Cmnd_Alias SYDCMD=/bin/chown,/bin/chmod<br>Cmnd_Alias DSKCMD=/sbin/parted,/sbin/fdisk<br>SYSADER SERS= SYDCMD,DSKCMD<br>DISKADER ALL=(OP) DSKCMD</p></blockquote><p>示例5</p><blockquote><p>User_Alias ADMINUSER = adminuser1,adminuser2<br>Cmnd_Alias ADMINCMD = /usr/sbin/useradd，/usr/sbin/usermod,<br>/usr/bin/passwd [a-zA-Z]*, !/usr/bin/passwd root<br>ADMINUSER ALL=(root) NOPASSWD:ADMINCMD，<br>PASSWD:/usr/sbin/userdel</p></blockquote><p>示例6</p><blockquote><p>Defaults:wang runas_default=tom<br>wang ALL=(tom,jerry) ALL</p></blockquote><p>示例7</p><blockquote><p>wang 192.168.1.6,192.168.1.8=(root) /usr/sbin/,!/usr/sbin/useradd</p></blockquote><p>示例8</p><blockquote><p>wang ALL=(ALL) /bin/cat /var/log/messages*</p></blockquote><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p>ls -l /usr/bin/sudo<br>sudo –i –u wang 切换身份<br>sudo [-u user] COMMAND</p><blockquote><p>-V 显示版本信息等配置信息<br>-u user 默认为root<br>-l,ll 列出用户在主机上可用的和被禁止的命令<br>-v 再延长密码有效期限5分钟,更新时间戳<br>-k 清除时间戳（1970-01-01），下次需要重新输密码<br>-K 与-k类似，还要删除时间戳文件<br>-b 在后台执行指令<br>-p 改变询问密码的提示符号<br>示例：-p “password on %h for user %p:”</p></blockquote><h1 id="TCP-Wrappers"><a href="#TCP-Wrappers" class="headerlink" title="TCP_Wrappers"></a>TCP_Wrappers</h1><ol><li><p>工作在第四层（传输层）的TCP协议</p></li><li><p>对有状态连接的特定服务进行安全检测并实现访问控制</p></li><li><p>以库文件形式实现</p></li><li><p>某进程是否接受libwrap的控制取决于发起此进程的程序在编译时是否针对libwrap进行编译的</p></li><li><p>判断服务程序是否能够由tcp_wrapper进行访问控制的方法：</p><blockquote><p>ldd /PATH/TO/PROGRAM|grep libwrap.so<br>strings PATH/TO/PROGRAM|grep libwrap.so</p></blockquote></li></ol><h2 id="TCP-Wrappers的使用"><a href="#TCP-Wrappers的使用" class="headerlink" title="TCP_Wrappers的使用"></a>TCP_Wrappers的使用</h2><ol><li>配置文件：/etc/hosts.allow, /etc/hosts.deny</li><li>检查顺序：hosts.allow，hosts.deny<br> 注意：一旦前面规则匹配，直接生效，将不再继续（默认允许）</li><li>基本语法:<br> daemon_list@host: client_list [ :options :option… ]</li><li>Daemon_list@host格式<br> 单个应用程序的二进制文件名，而非服务名，例如vsftpd<br> 以逗号或空格分隔的应用程序文件名列表，如:sshd,vsftpd<br> ALL表示所有接受tcp_wrapper控制的服务程序<br> 主机有多个IP，可用@hostIP来实现控制<br> 如：<a href="mailto:in.telnetd@192.168.0.254" target="_blank" rel="noopener">in.telnetd@192.168.0.254</a></li></ol><h2 id="客户端Client-list格式"><a href="#客户端Client-list格式" class="headerlink" title="客户端Client_list格式"></a>客户端Client_list格式</h2><blockquote><p>以逗号或空格分隔的客户端列表<br>基于IP地址：192.168.10.1 192.168.1.<br>基于主机名：<a href="http://www.magedu.com" target="_blank" rel="noopener">www.magedu.com</a> .magedu.com 较少用<br>基于网络/掩码：192.168.0.0/255.255.255.0<br>基于net/prefixlen: 192.168.1.0/24（CentOS7）<br>基于网络组（NIS 域）：@mynetwork<br>内置ACL：ALL，LOCAL，KNOWN，UNKNOWN，PARANOID<br>EXCEPT用法：<br>示例：<br>vsftpd: 172.16. EXCEPT 172.16.100.0/24 EXCEPT 172.16.100.1<br>示例：只允许192.168.1.0/24的主机访问sshd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; /etc/hosts.allow    </span><br><span class="line">&gt; sshd: 192.168.1.    </span><br><span class="line">&gt; /etc/hosts.deny    </span><br><span class="line">&gt; sshd :ALL</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>示例：只允许192.168.1.0/24的主机访问telnet和vsftpd服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/hosts.allow</span><br><span class="line">vsftpd,in.telnetd: 192.168.1.</span><br><span class="line">/etc/host.deny  </span><br><span class="line">vsftpd,in.telnetd: ALL</span><br></pre></td></tr></table></figure><h2 id="options-选项："><a href="#options-选项：" class="headerlink" title="[:options]选项："></a>[:options]选项：</h2><ol><li><p>deny 主要用在/etc/hosts.allow定义“拒绝”规则<br> 如：vsftpd: 172.16. :deny</p></li><li><p>allow 主要用在/etc/hosts.deny定义“允许” 规则<br> 如：vsftpd:172.16. :allow</p></li><li><p>spawn 启动一个外部程序完成执行的操作<br> 示例</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sshd: ALL :spawn <span class="built_in">echo</span> <span class="string">"<span class="variable">$(date +%%F)</span> login attempt from %c to %s,%d"</span> &gt;&gt; /var/<span class="built_in">log</span>/sshd.log</span><br></pre></td></tr></table></figure></li></ol><p>说明：<br>在/etc/hosts.allow中添加，允许登录，并记录日志<br>在/etc/hosts.deny中添加，拒绝登录，并记录日志</p><blockquote><p>%c 客户端信息<br>%s 服务器端信息<br>%d 服务名<br>%p 守护进程的PID<br>%% 表示%</p><ol><li><p>twist 实际动作是拒绝访问,使用指定操作替换当前服务,标准输出和ERROR</p><p> 发送到客户端,默认至/dev/null</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; vsftpd: 172.16. :twist /bin/<span class="built_in">echo</span> <span class="string">"connection prohibited"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h1 id="PAM模块"><a href="#PAM模块" class="headerlink" title="PAM模块"></a>PAM模块</h1><ol><li><p>认证库：文本文件，MySQL，NIS，LDAP等</p></li><li><p>Sun公司于1995 年开发的一种与认证相关的通用框架机制</p></li><li><p>PAM 是关注如何为服务验证用户的 API，通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开.使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序</p></li><li><p>一种认证框架，自身不做认证</p></li><li><p>它提供了对所有服务进行认证的中央机制，适用于本地登录，远程登录，如：telnet,rlogin,fsh,ftp,点对点协议PPP，su等应用程序中，系统管理员通过PAM配置文件来制定不同应用程序的不同认证策略；应用程序开发者通过在服务程序中使用PAM API(pam_xxxx( ))来实现对认证方法的调用；而PAM服务模块的开发者则利用PAM SPI来编写模块（主要调用函数pam_sm_xxxx( )供PAM接口库调用，将不同的认证机制加入到系统中；PAM接口库（libpam）则读取配置文件，将应用程序和相应的PAM服务模块联系起来</p></li></ol><h2 id="PAM架构"><a href="#PAM架构" class="headerlink" title="PAM架构"></a>PAM架构</h2><p>  <img src="https://github.com/xiejia1215225/Pictures/blob/master/PAM%E6%9E%B6%E6%9E%84.png?raw=true" alt="PAM架构.png"></p><h2 id="PAM相关文件"><a href="#PAM相关文件" class="headerlink" title="PAM相关文件"></a>PAM相关文件</h2><ol><li><p>模块文件目录：/lib64/security/*.so</p></li><li><p>环境相关的设置：/etc/security/</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 bin]<span class="comment">#cd /lib64/security/</span></span><br><span class="line">[root@cetos7 security]<span class="comment">#ls</span></span><br><span class="line">pam_access.so     pam_gdm.so               pam_permit.so          pam_time.so</span><br><span class="line">pam_cap.so        pam_gnome_keyring.so     pam_postgresok.so      pam_timestamp.so</span><br><span class="line">pam_chroot.so     pam_group.so             pam_pwhistory.so       pam_tty_audit.so</span><br><span class="line">pam_console.so    pam_issue.so             pam_pwquality.so       pam_umask.so</span><br><span class="line">pam_cracklib.so   pam_keyinit.so           pam_rhosts.so          pam_unix_acct.so</span><br><span class="line">pam_debug.so      pam_lastlog.so           pam_rootok.so          pam_unix_auth.so</span><br><span class="line">pam_deny.so       pam_limits.so            pam_securetty.so       pam_unix_passwd.so</span><br><span class="line">pam_echo.so       pam_listfile.so          pam_selinux_permit.so  pam_unix_session.so</span><br><span class="line">pam_env.so        pam_localuser.so         pam_selinux.so         pam_unix.so</span><br><span class="line">pam_exec.so       pam_loginuid.so          pam_sepermit.so        pam_userdb.so</span><br><span class="line">pam_faildelay.so  pam_mail.so              pam_shells.so          pam_warn.so</span><br><span class="line">pam_faillock.so   pam_mkhomedir.so         pam_sss.so             pam_wheel.so</span><br><span class="line">pam_filter        pam_motd.so              pam_stress.so          pam_xauth.so</span><br><span class="line">pam_filter.so     pam_namespace.so         pam_succeed_if.so</span><br><span class="line">pam_fprintd.so    pam_nologin.so           pam_systemd.so</span><br><span class="line">pam_ftp.so        pam_oddjob_mkhomedir.so  pam_tally2.so</span><br></pre></td></tr></table></figure></li><li><p>主配置文件:/etc/pam.conf，默认不存在</p></li><li><p>为每种应用模块提供一个专用的配置文件：/etc/pam.d/APP_NAME</p><p> 注意：如/etc/pam.d存在，/etc/pam.conf将失效pam认证原理</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 security]<span class="comment">#cd /etc/pam.d/</span></span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#ls</span></span><br><span class="line">atd                  gdm-launch-environment  pluto         smartcard-auth     system-auth-ac</span><br><span class="line">chfn                 gdm-password            polkit-1      smartcard-auth-ac  systemd-user</span><br><span class="line">chsh                 gdm-pin                 postlogin     smtp               vlock</span><br><span class="line">config-util          gdm-smartcard           postlogin-ac  smtp.postfix       vmtoolsd</span><br><span class="line">crond                liveinst                ppp           sshd               vsftpd</span><br><span class="line">cups                 login                   remote        su                 xserver</span><br><span class="line">fingerprint-auth     other                   runuser       sudo</span><br><span class="line">fingerprint-auth-ac  passwd                  runuser<span class="_">-l</span>     sudo-i</span><br><span class="line">gdm-autologin        password-auth           screen        su<span class="_">-l</span></span><br><span class="line">gdm-fingerprint      password-auth-ac        setup         system-auth</span><br></pre></td></tr></table></figure></li></ol><h2 id="PAM认证原理"><a href="#PAM认证原理" class="headerlink" title="PAM认证原理"></a>PAM认证原理</h2><ol><li>PAM认证一般遵循这样的顺序：Service(服务)→PAM(配置文件)→pam_*.so</li><li>PAM认证首先要确定那一项服务，然后加载相应的PAM的配置文件(位于/etc/pam.d下)，最后调用认证文件(位于/lib/security下)进行安全认证</li></ol><h2 id="PAM配置文件详解"><a href="#PAM配置文件详解" class="headerlink" title="PAM配置文件详解"></a>PAM配置文件详解</h2><p>专用配置文件/etc/pam.d/* 格式<br>type control module-path arguments<br>说明：</p><h3 id="模块类型（module-type）"><a href="#模块类型（module-type）" class="headerlink" title="模块类型（module-type）"></a>模块类型（module-type）</h3><blockquote><p>Auth 账号的认证和授权<br>Account 与账号管理相关的非认证类的功能，如：用来限制/允许用户对某个服务的访问时间，当前有效的系统资源(最多可以有多少个用户)，限制用户的位置(例如：root用户只能从控制台登录)<br>Password 用户修改密码时密码复杂度检查机制等功能<br>Session 用户获取到服务之前或使用服务完成之后需要进行一些附加的操作，如：记录打开/关闭数据的信息，监视目录等<br>-type 表示因为缺失而不能加载的模块将不记录到系统日志,对于那些不总是安装在系统上的模块有用</p></blockquote><h3 id="Control"><a href="#Control" class="headerlink" title="Control:"></a>Control:</h3><ol><li><p>PAM库如何处理与该服务相关的PAM模块成功或失败情况</p></li><li><p>两种方式实现：简单和复杂</p><blockquote><blockquote><p>简单方式实现：一个关健词实现</p><blockquote><p>required ：一票否决，表示本模块必须返回成功才能通过认证，但是如果该模块返回失败，失败结果也不会立即通知用户，而是要等到同一type中的所有模块全部执行完毕再将失败结果返回给应用程序，即为必要条件<br>requisite ：一票否决，该模块必须返回成功才能通过认证，但是一旦该模块返回失败，将不再执行同一type内的任何模块，而是直接将控制权返回给应用程序。是一个必要条件<br>sufficient ：一票通过，表明本模块返回成功则通过身份认证的要求，不必再执行同一type内的其它模块，但如果本模块返回失败可忽略，即为充分条件<br>optional ：表明本模块是可选的，它的成功与否不会对身份认证起关键作用，其返回值一般被忽略<br>include： 调用其他的配置文件中定义的配置信息</p></blockquote></blockquote></blockquote></li></ol><blockquote><blockquote><p>复杂详细实现：使用一个或多个“status=action”<br>[status1=action1 status2=action …]<br>Status:检查结果的返回状态<br>Action:采取行为 ok，done，die，bad，ignore，reset</p><blockquote><p>ok 模块通过，继续检查<br>done 模块通过，返回最后结果给应用<br>bad 结果失败，继续检查<br>die 结果失败，返回失败结果给应用<br>ignore 结果忽略，不影响最后结果<br>reset 忽略已经得到的结果PAM认证机制</p></blockquote></blockquote></blockquote><h3 id="module-path-模块路径"><a href="#module-path-模块路径" class="headerlink" title="module-path: 模块路径"></a>module-path: 模块路径</h3><ol><li><p>相对路径：<br> /lib64/security目录下的模块可使用相对路径<br> 如：pam_shells.so、 pam_limits.so</p></li><li><p>绝对路径：</p><p> 模块通过读取配置文件完成用户对系统资源的使用控制</p><p> /etc/security/*.conf</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意：修改PAM配置文件将马上生效</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编辑pam规则时，保持至少打开一个root会话，以防止root身份验证错误</span><br></pre></td></tr></table></figure><h3 id="Arguments-用来传递给该模块的参数"><a href="#Arguments-用来传递给该模块的参数" class="headerlink" title="Arguments 用来传递给该模块的参数"></a>Arguments 用来传递给该模块的参数</h3></li></ol><h2 id="PAM模块示例"><a href="#PAM模块示例" class="headerlink" title="PAM模块示例"></a>PAM模块示例</h2><h3 id="模块：pam-shells"><a href="#模块：pam-shells" class="headerlink" title="模块：pam_shells"></a>模块：pam_shells</h3><p>功能：检查有效shell<br>man pam_shells<br>示例：不允许使用/bin/csh的用户进行切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#vim /etc/pam.d/su  </span></span><br><span class="line">auth required pam_shells.so  </span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#cat /etc/shells </span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/usr/sbin/nologin</span><br><span class="line">/bin/tcsh</span><br><span class="line"><span class="comment">#/bin/csh                                 用#把/bin/csh注释掉</span></span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#getent passwd mage</span></span><br><span class="line">mage:x:1242:1244::/home/mage:/bin/bash</span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#usermod -s /bin/csh mage</span></span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#getent passwd mage      </span></span><br><span class="line">mage:x:1242:1244::/home/mage:/bin/csh       把账号xie的shell类型改成 /bin/csh</span><br><span class="line">[root@cetos7 pam.d]<span class="comment">#su - mage</span></span><br><span class="line">Password: </span><br><span class="line">su: Authentication failure                   mage账号将不可切换，其它不受影响 </span><br><span class="line">tail /var/<span class="built_in">log</span>/secure</span><br></pre></td></tr></table></figure><h3 id="模块：pam-securetty-so"><a href="#模块：pam-securetty-so" class="headerlink" title="模块：pam_securetty.so"></a>模块：pam_securetty.so</h3><p>功能：只允许root用户在/etc/securetty列出的安全终端上登陆<br>示例：允许root在telnet登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]vim /etc/pam.d/remote  </span><br><span class="line"><span class="comment">#auth required pam_securetty.so #将这一行加上注释  </span></span><br><span class="line">或者/etc/securetty文件中加入  </span><br><span class="line">pts/0,pts/1…pts/n</span><br></pre></td></tr></table></figure><h3 id="模块：pam-nologin-so"><a href="#模块：pam-nologin-so" class="headerlink" title="模块：pam_nologin.so"></a>模块：pam_nologin.so</h3><p>功能：</p><ol><li>如果/etc/nologin文件存在,将导致非root用户不能登陆</li><li>如果用户shell是/sbin/nologin 时，当该用户登陆时，会显示/etc/nologin文件内容，并拒绝登陆</li></ol><h3 id="模块：pam-limits-so"><a href="#模块：pam-limits-so" class="headerlink" title="模块：pam_limits.so"></a>模块：pam_limits.so</h3><p>功能：在用户级别实现对其可使用的资源的限制，例如：可打开的文件数量，可运行的进程数量，可用内存空间<br>修改限制的实现方式：</p><ol><li><p>ulimit命令，立即生效，但无法保存</p><blockquote><p>-n 每个进程最多的打开的文件描述符个数<br>-u 最大用户进程数<br>-S 使用 soft（软）资源限制<br>-H 使用 hard（硬）资源限制</p></blockquote></li><li><p>配置文件：/etc/security/limits.conf, /etc/security/limits.d/*.conf<br> 配置文件：每行一个定义</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;domain&gt;  &lt;<span class="built_in">type</span>&gt;  &lt;item&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>\ 应用于哪些对象</p><blockquote><p>Username 单个用户<br>@group 组内所有用户<br>* 所有用户</p></blockquote></blockquote><blockquote><p>\ 限制的类型</p><blockquote><p>Soft 软限制,普通用户自己可以修改<br>Hard 硬限制,由root用户设定，且通过kernel强制生效<br>- 二者同时限定</p></blockquote></blockquote><blockquote><p>\ 限制的资源</p><blockquote><p>nofile 所能够同时打开的最大文件数量,默认为1024<br>nproc 所能够同时运行的进程的最大数量,默认为1024</p></blockquote></blockquote><blockquote><p>\ 指定具体值</p><blockquote><p>限制用户最多打开的文件数和运行进程数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; /etc/pam.d/system-auth  </span><br><span class="line">&gt; &gt; session required pam_limits.so  </span><br><span class="line">&gt; &gt; </span><br><span class="line">&gt; &gt; vim /etc/security/limits.conf  </span><br><span class="line">&gt; &gt; apache – nofile 10240   用户apache可打开10240个文件  </span><br><span class="line">&gt; &gt; student hard nproc 20   用户student不能运行超过20个进程</span><br><span class="line">&gt; &gt;</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对称加密算法&quot;&gt;&lt;a href=&quot;#对称加密算法&quot; class=&quot;headerlink&quot; title=&quot;对称加密算法&quot;&gt;&lt;/a&gt;对称加密算法&lt;/h1&gt;&lt;h2 id=&quot;对称加密&quot;&gt;&lt;a href=&quot;#对称加密&quot; class=&quot;headerlink&quot; title=&quot;对
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="模块" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97/"/>
    
      <category term="加密" scheme="http://yoursite.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="openssl" scheme="http://yoursite.com/tags/openssl/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
      <category term="CA" scheme="http://yoursite.com/tags/CA/"/>
    
  </entry>
  
  <entry>
    <title>Centos6系统启动流程与grub</title>
    <link href="http://yoursite.com/2018/11/06/Centos6%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E4%B8%8Egrub/"/>
    <id>http://yoursite.com/2018/11/06/Centos6系统启动流程与grub/</id>
    <published>2018-11-05T16:00:00.000Z</published>
    <updated>2019-01-12T05:03:52.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos6启动流程"><a href="#Centos6启动流程" class="headerlink" title="Centos6启动流程"></a>Centos6启动流程</h1><ol><li>POST加电自检,即加载BIOS的硬件信息，获取第一个启动设备</li><li>读取第一个启动设备MBR的引导加载程序(grub)的启动信息</li><li>加载核心操作系统的核心信息，核心开始解压缩，并尝试驱动所有的硬件设备</li><li>核心执行init程序，并获取默认的运行信息</li><li>init程序执行/etc/rc.d/rc.sysinit文件</li><li>启动核心的外挂模块</li><li>init执行运行的各个批处理文件(scripts)</li><li>执行/bin/login程序，等待用户登录</li><li>登录之后开始以Shell控制主机启动流程</li></ol><h2 id="加电自检：power-on-system-test-POST"><a href="#加电自检：power-on-system-test-POST" class="headerlink" title="加电自检：power on system test(POST)"></a>加电自检：power on system test(POST)</h2><p>    自检主要是检测一下硬件设备是否存在并能正常运行，如：CPU、内存、硬盘是否存在并能正常运行。这些自检的功能是有一个软件程序来实现的，这个软件程序叫做：BIOS。BIOS （Basic Input Output System）即基本输入输出系统。它是装载在一个硬件芯片CMOS之上，显然CMOS是一个硬件设备。加电过程就是给CMOS通电，然后启动其上的BIOS程序，BIOS程序会根据CMOS上面的一些配置信息去读取其他的硬件设备信息并检测其是否存在并能正常运行，之后进行硬件设备的初始化。</p><h2 id="读取MBR"><a href="#读取MBR" class="headerlink" title="读取MBR"></a>读取MBR</h2><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/MBR.gif?raw=true" alt="img"><br>    众所周知，硬盘上第0磁道第一个扇区被称为MBR，也就是Master Boot Record，即主引导记录，它的大小是512字节，别看地方不大，可里面却存放了预启动信息、分区表信息。前446字节存放grub的空间，中间64字节是分区表，最后2字节 55AA的标识。<br>系统找到BIOS所指定的硬盘的MBR后，就会将其复制到0×7c00地址所在的物理内存中。其实被复制到物理内存的内容就是Boot Loader。Boot Loader 就是在操作系统内核运行之前运行的一段小程序。</p><h2 id="Grub启动引导阶段"><a href="#Grub启动引导阶段" class="headerlink" title="Grub启动引导阶段"></a>Grub启动引导阶段</h2><p>    grub引导也分为三个阶段stage1阶段、stage1.5阶段和stage2阶段。</p><p>阶段 1<br>    如上文 POST（上电自检）阶段提到的，在 POST 阶段结束时，BIOS 将查找在接入的磁盘中查找引导记录，其通常位于 MBR（主引导记录Master Boot Record），它加载它找到的第一个引导记录中到内存中，并开始执行此代码。引导代码（及阶段 1 代码）必须非常小，因为它必须连同分区表放到硬盘的第一个 512 字节的扇区中。 在传统的常规 MBR 中，引导代码实际所占用的空间大小为 446 字节。这个阶段 1 的 446 字节的文件通常被叫做引导镜像（boot.img），其中不包含设备的分区信息，分区是一般单独添加到引导记录中。</p><p>由于引导记录必须非常的小，它不可能非常智能，且不能理解文件系统结构。因此阶段 1 的唯一功能就是定位并加载阶段 1.5 的代码。为了完成此任务，阶段 1.5 的代码必须位于引导记录与设备第一个分区之间的位置。在加载阶段 1.5 代码进入内存后，控制权将由阶段 1 转移到阶段 1.5。</p><p>阶段 1.5<br>    如上所述，阶段 1.5 的代码必须位于引导记录与设备第一个分区之间的位置。该空间由于历史上的技术原因而空闲。第一个分区的开始位置在扇区 63 和 MBR（扇区 0）之间遗留下 62 个 512 字节的扇区（共 31744 字节），该区域用于存储阶段 1.5 的代码镜像 core.img 文件。该文件大小为 25389 字节，故此区域有足够大小的空间用来存储 core.img。</p><p>因为有更大的存储空间用于阶段 1.5，且该空间足够容纳一些通用的文件系统驱动程序，如标准的 EXT 和其它的 Linux 文件系统，如 FAT 和 NTFS 等。故阶段 2 的文件可以存放于 /boot 文件系统中，一般在 /boot/grub 目录下。</p><p><strong>注意 /boot 目录必须放在一个 GRUB 所支持的文件系统（并不是所有的文件系统均可）。阶段 1.5 的功能是开始执行存放阶段 2 文件的 /boot 文件系统的驱动程序，并加载相关的驱动程序。</strong></p><p>阶段 2<br>    GRUB 阶段 2 所有的文件都已存放于 /boot/grub 目录及其几个子目录之下。该阶段没有一个类似于阶段 1 与阶段 1.5 的镜像文件。相应地，该阶段主要需要从 /boot/grub2/i386-pc 目录下加载一些内核运行时模块。</p><p>GRUB 阶段 2 的主要功能是定位和加载 Linux 内核到内存中，并转移控制权到内核。内核的相关文件位于 /boot 目录下，这些内核文件可以通过其文件名进行识别，其文件名均带有前缀 vmlinuz。你可以列出 /boot 目录中的内容来查看操作系统中当前已经安装的内核。</p><p>Red Hat 包管理器（DNF）支持保留多个内核版本，以防最新版本内核发生问题而无法启动时，可以恢复老版本的内核。默认情况下，GRUB 提供了一个已安装内核的预引导菜单，其中包括问题诊断菜单（recuse）以及恢复菜单（如果配置已经设置恢复镜像）。</p><p>阶段 2 加载选定的内核到内存中，并转移控制权到内核代码。</p><h2 id="加载内核"><a href="#加载内核" class="headerlink" title="加载内核"></a>加载内核</h2><p>    根据grub设定的内核映像所在路径，系统读取内存映像，并进行解压缩操作。此时，屏幕一般会输出“Uncompressing Linux”的提示。当解压缩内核完成后，屏幕输出“OK, booting the kernel”。<br>系统将解压后的内核放置在内存之中，并调用start_kernel()函数来启动一系列的初始化函数并初始化各种设备，完成Linux核心环境的建立。至此，Linux内核已经建立起来了，基于Linux的程序应该可以正常运行了。</p><h2 id="用户层init依据inittab文件来设定运行等级"><a href="#用户层init依据inittab文件来设定运行等级" class="headerlink" title="用户层init依据inittab文件来设定运行等级"></a>用户层init依据inittab文件来设定运行等级</h2><p>    内核被加载后，第一个运行的程序便是/sbin/init，该文件会读取/etc/inittab文件，并依据此文件来进行初始化工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 rc5.d]<span class="comment">#cat /etc/inittab</span></span><br><span class="line"><span class="comment"># inittab is only used by upstart for the default runlevel.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">  ADDING OTHER CONFIGURATION HERE WILL HAVE NO EFFECT ON YOUR SYSTEM.</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># System initialization is started by /etc/init/rcS.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Individual runlevels are started by /etc/init/rc.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Ctrl-Alt-Delete is handled by /etc/init/control-alt-delete.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Terminal gettys are handled by /etc/init/tty.conf and /etc/init/serial.conf,</span></span><br><span class="line"><span class="comment"># with configuration in /etc/sysconfig/init.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For information on how to write upstart event handlers, or how</span></span><br><span class="line"><span class="comment"># upstart works, see init(5), init(8), and initctl(8).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Default runlevel. The runlevels used are:</span></span><br><span class="line"><span class="comment">#   0 - halt (Do NOT set initdefault to this)</span></span><br><span class="line"><span class="comment">#   1 - Single user mode</span></span><br><span class="line"><span class="comment">#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</span></span><br><span class="line"><span class="comment">#   3 - Full multiuser mode</span></span><br><span class="line"><span class="comment">#   4 - unused</span></span><br><span class="line"><span class="comment">#   5 - X11</span></span><br><span class="line"><span class="comment">#   6 - reboot (Do NOT set initdefault to this)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">id:5:initdefault:</span><br></pre></td></tr></table></figure><p>其实/etc/inittab文件最主要的作用就是设定Linux的运行等级，</p><ul><li>运行级别：为系统运行或维护等目的而设定；0-6：7个级别<br>  0：关机<br>  1：单用户模式(root自动登录), single, 维护模式<br>  2：多用户模式，启动网络功能，但不会启动NFS；维护模式<br>  3：多用户模式，正常模式；文本界面<br>  4：保留，未使用<br>  5：多用户模式，正常模式；图形界面<br>  6：重启</li><li>默认级别：3, 5</li><li>切换级别：init #</li><li>查看级别：runlevel ; who -r</li></ul><p>每一行格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id:runlevel:action:process</span><br></pre></td></tr></table></figure><ul><li><p>id：是惟一标识该项的字符序列</p></li><li><p>runlevels： 定义了操作所使用的运行级别</p></li><li><p>action： 指定了要执行的特定操作</p><blockquote><blockquote><blockquote><blockquote><p>wait: 切换至此级别运行一次<br>respawn：此process终止，就重新启动之<br>initdefault：设定默认运行级别；process省略<br>sysinit：设定系统初始化方式</p></blockquote></blockquote></blockquote></blockquote></li><li><p>process：定义了要执行的进程</p></li></ul><p>故</p><p>id:5:initdefault:</p><p>这就表明Linux需要开机运行在5模式  </p><ul><li>破解CentOS5和6的root口令<br>进入单用户模式即可</li></ul><h2 id="init进程执行rc-sysinit"><a href="#init进程执行rc-sysinit" class="headerlink" title="init进程执行rc.sysinit"></a>init进程执行rc.sysinit</h2><p>/etc/rc.d/rc.sysinit: 系统初始化脚本（一般情况下，我们不需要改）  </p><ol><li>设置主机名  </li><li>设置欢迎信息  </li><li>激活udev和selinux  </li><li>挂载/etc/fstab文件中定义的文件系统  </li><li>检测根文件系统，并以读写方式重新挂载根文件系统  </li><li>设置系统时钟  </li><li>激活swap设备  </li><li>根据/etc/sysctl.conf文件设置内核参数  </li><li>激活lvm及software raid设备  </li><li>加载额外设备的驱动程序  </li><li>清理操作启动流程  </li></ol><h2 id="执行不同运行级别的脚本程序"><a href="#执行不同运行级别的脚本程序" class="headerlink" title="执行不同运行级别的脚本程序"></a>执行不同运行级别的脚本程序</h2><p>根据运行级别的不同，系统会运行rc0.d到rc6.d中的相应的脚本程序，来完成相应的初始化工作和启动相应的服务。<br>说明：rc N –&gt; 意味着读取/etc/rc.d/rcN.d/<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 rc.d]<span class="comment">#ll</span></span><br><span class="line">total 60</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Nov  6 09:32 init.d</span><br><span class="line">-rwxr-xr-x. 1 root root  2617 Jun 20 00:12 rc</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc0.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc1.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc2.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc3.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc4.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Nov  7 11:26 rc5.d</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Oct 30 20:19 rc6.d</span><br><span class="line">-rwxr-xr-x. 1 root root   220 Jun 20 00:12 rc.local</span><br><span class="line">-rwxr-xr-x. 1 root root 20199 Jun 20 00:12 rc.sysinit</span><br></pre></td></tr></table></figure></p><p>K<em>: K##</em>：##运行次序；数字越小，越先运行；数字越小的服务，通常为依赖到别的服务<br>S<em>: S##</em>：##运行次序；数字越小，越先运行；数字越小的服务，通常为被依赖到的服务  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> srv <span class="keyword">in</span> /etc/rc.d/rcN.d/K*; <span class="keyword">do</span></span><br><span class="line"><span class="variable">$srv</span> stop</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> srv <span class="keyword">in</span> /etc/rc.d/rcN.d/S*; <span class="keyword">do</span></span><br><span class="line"><span class="variable">$srv</span> start</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="执行-etc-rc-d-rc-local"><a href="#执行-etc-rc-d-rc-local" class="headerlink" title="执行/etc/rc.d/rc.local"></a>执行/etc/rc.d/rc.local</h2><p>你如果打开了此文件，里面有一句话，读过之后，你就会对此命令的作用一目了然：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 rc.d]<span class="comment">#cat /etc/rc.d/rc.local </span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script will be executed *after* all the other init scripts.</span></span><br><span class="line"><span class="comment"># You can put your own initialization stuff in here if you don't</span></span><br><span class="line"><span class="comment"># want to do the full Sys V style init stuff.</span></span><br><span class="line"></span><br><span class="line">touch /var/lock/subsys/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p><code>注意：</code>正常级别下，最后启动一个服务S99local没有链接至/etc/rc.d/init.d一个服务脚本，而是指向了/etc/rc.d/rc.local脚本<br>不便或不需写为服务脚本放置于/etc/rc.d/init.d/目录，且又想开机时自动运行的命令，可直接放置于/etc/rc.d/rc.local文件中<br>/etc/rc.d/rc.local在指定运行级别脚本后运行<br>可以根据情况，进行自定义修改</p><h2 id="执行-bin-login程序，进入登录状态"><a href="#执行-bin-login程序，进入登录状态" class="headerlink" title="执行/bin/login程序，进入登录状态"></a>执行/bin/login程序，进入登录状态</h2><p>此时，系统已经进入到了等待用户输入username和password的时候了，你已经可以用自己的帐号登入系统了。</p><h1 id="Grub"><a href="#Grub" class="headerlink" title="Grub"></a>Grub</h1><h2 id="Grub-GRand-Unified-Bootloader"><a href="#Grub-GRand-Unified-Bootloader" class="headerlink" title="Grub: GRand Unified Bootloader"></a>Grub: GRand Unified Bootloader</h2><p>如前面所述，grub分为三个阶段<br>stage1: mbr<br>stage1.5: mbr之后的扇区，让stage1中的bootloader能识别stage2所在的分区上的文件系统<br>stage2：磁盘分区(/boot/grub/)</p><h2 id="Grub安装"><a href="#Grub安装" class="headerlink" title="Grub安装"></a>Grub安装</h2><ol><li><p>grub-install<br> 安装grub stage1和stage1_5到/dev/DISK磁盘上，并复制GRUB相关文件<br> 到 DIR/boot目录下<br> grub-install –root-directory=DIR /dev/DISK</p></li><li><p>grub<br> grub&gt; root (hd#,#)<br> grub&gt; setup (hd#)grub</p></li><li><p>识别硬盘设备</p><p> (hd#,#)</p><p> hd#: 磁盘编号，用数字表示；从0开始编号</p><p> #: 分区编号，用数字表示; 从0开始编号</p><p> (hd0,0) 第一块硬盘，第一个分区</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#dd if=/dev/zero of=/dev/sda bs=1 count=446</span></span><br><span class="line">446+0 records <span class="keyword">in</span></span><br><span class="line">446+0 records out</span><br><span class="line">446 bytes (446 B) copied, 0.00308127 s, 145 kB/s</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#hexdump -C /dev/sda -n 512</span></span><br><span class="line">00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 80 20  |............... |</span><br><span class="line">000001c0  21 00 83 aa 28 82 00 08  00 00 00 00 20 00 00 aa  |!...(....... ...|</span><br><span class="line">000001d0  29 82 83 fe ff ff 00 08  20 00 00 80 1a 06 00 fe  |)....... .......|</span><br><span class="line">000001e0  ff ff 83 fe ff ff 00 88  3a 06 00 80 a9 03 00 fe  |........:.......|</span><br><span class="line">000001f0  ff ff 05 fe ff ff 00 08  e4 09 00 f8 1b 0f 55 aa  |..............U.|</span><br><span class="line">00000200</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#grub</span></span><br><span class="line">Probing devices to guess BIOS drives. This may take a long time.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    GNU GRUB  version 0.97  (640K lower / 3072K upper memory)</span><br><span class="line"></span><br><span class="line"> [ Minimal BASH-like line editing is supported.  For the first word, TAB</span><br><span class="line">   lists possible <span class="built_in">command</span> completions.  Anywhere <span class="keyword">else</span> TAB lists the possible</span><br><span class="line">   completions of a device/filename.]</span><br><span class="line">grub&gt; root (hd0,0)                 </span><br><span class="line">root (hd0,0)</span><br><span class="line"> Filesystem <span class="built_in">type</span> is ext2fs, partition <span class="built_in">type</span> 0x83</span><br><span class="line">grub&gt; setup (hd0)</span><br><span class="line">setup (hd0)</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/boot/grub/stage1"</span> exists... no</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/grub/stage1"</span> exists... yes</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/grub/stage2"</span> exists... yes</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/grub/e2fs_stage1_5"</span> exists... yes</span><br><span class="line"> Running <span class="string">"embed /grub/e2fs_stage1_5 (hd0)"</span>...  27 sectors are embedded.</span><br><span class="line">succeeded</span><br><span class="line"> Running <span class="string">"install /grub/stage1 (hd0) (hd0)1+27 p (hd0,0)/grub/stage2 /grub/grub.conf"</span>... succeeded</span><br><span class="line">Done.</span><br><span class="line">grub&gt;</span><br></pre></td></tr></table></figure></li></ol><p>如果我们把/boot/grub/* 的文件移走</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#mv /boot/grub/* /data</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dd if=/dev/zero of=/dev/sda bs=1 count=446</span></span><br><span class="line">446+0 records <span class="keyword">in</span></span><br><span class="line">446+0 records out</span><br><span class="line">446 bytes (446 B) copied, 0.00398936 s, 112 kB/s</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#hexdump -C /dev/sda -n 512</span></span><br><span class="line">00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">000001b0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 80 20  |............... |</span><br><span class="line">000001c0  21 00 83 aa 28 82 00 08  00 00 00 00 20 00 00 aa  |!...(....... ...|</span><br><span class="line">000001d0  29 82 83 fe ff ff 00 08  20 00 00 80 1a 06 00 fe  |)....... .......|</span><br><span class="line">000001e0  ff ff 83 fe ff ff 00 88  3a 06 00 80 a9 03 00 fe  |........:.......|</span><br><span class="line">000001f0  ff ff 05 fe ff ff 00 08  e4 09 00 f8 1b 0f 55 aa  |..............U.|</span><br><span class="line">00000200</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#grub</span></span><br><span class="line">Probing devices to guess BIOS drives. This may take a long time.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    GNU GRUB  version 0.97  (640K lower / 3072K upper memory)</span><br><span class="line"></span><br><span class="line"> [ Minimal BASH-like line editing is supported.  For the first word, TAB</span><br><span class="line">   lists possible <span class="built_in">command</span> completions.  Anywhere <span class="keyword">else</span> TAB lists the possible</span><br><span class="line">   completions of a device/filename.]</span><br><span class="line">grub&gt; root (hd0,0)</span><br><span class="line">root (hd0,0)</span><br><span class="line"> Filesystem <span class="built_in">type</span> is ext2fs, partition <span class="built_in">type</span> 0x83</span><br><span class="line">grub&gt; setup (hd0)</span><br><span class="line">setup (hd0)</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/boot/grub/stage1"</span> exists... no</span><br><span class="line"> Checking <span class="keyword">if</span> <span class="string">"/grub/stage1"</span> exists... no</span><br><span class="line"></span><br><span class="line">Error 15t: File not found</span><br><span class="line">grub&gt; </span><br><span class="line">[root@CentOS6 ~]<span class="comment">#grub-install /dev/sda</span></span><br><span class="line">Probing devices to guess BIOS drives. This may take a long time.</span><br><span class="line">Installation finished. No error reported.</span><br><span class="line">This is the contents of the device map /boot/grub/device.map.</span><br><span class="line">Check <span class="keyword">if</span> this is correct or not. If any of the lines is incorrect,</span><br><span class="line">fix it and re-run the script `grub-install<span class="string">'.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(fd0)   /dev/fd0</span></span><br><span class="line"><span class="string">(hd0)   /dev/sda</span></span><br></pre></td></tr></table></figure><p>由此实验我们可以看出grub&gt; root (hd#,#)；grub&gt; setup (hd#)这种修复方法依赖于/boot/grub/ <em>文件而grub-install这种修复方法不依赖/boot/grub/</em> 文件，感觉更通用一些。</p><h2 id="grub"><a href="#grub" class="headerlink" title="grub"></a>grub</h2><p>stage2及内核等通常放置于一个基本磁盘分区<br>功用：</p><ol><li><p>提供启动菜单、并提供交互式接口</p><blockquote><p>a：内核参数<br>e: 编辑模式，用于编辑菜单<br>c: 命令模式，交互式接口</p></blockquote></li><li><p>加载用户选择的内核或操作系统</p><blockquote><p>允许传递参数给内核<br>可隐藏启动菜单</p></blockquote></li><li><p>为菜单提供了保护机制</p><blockquote><p>为编辑启动菜单进行认证<br>为启用内核或操作系统进行认证grub legacy</p></blockquote></li></ol><p>grub的命令行接口</p><ul><li>help: 获取帮助列表</li><li>help KEYWORD: 详细帮助信息</li><li>find (hd#,#)/PATH/TO/SOMEFILE：</li><li>root (hd#,#)</li><li>kernel /PATH/TO/KERNEL_FILE: 设定本次启动时用到的内核文件；额外还可添加许多内核支持使用的cmdline参数<br>  例如：max_loop=100 selinux=0 init=/path/to/init</li><li>initrd /PATH/TO/INITRAMFS_FILE: 设定为选定的内核提供额外文件的ramdisk</li><li>boot: 引导启动选定的内核</li></ul><p>cat /proc/cmdline 内核参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]#cat /proc/cmdline </span><br><span class="line">ro root=UUID=d3df2aba-5cd3-47fe-8128-3445b87dba11 rd_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16   KEYBOARDTYPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</span><br></pre></td></tr></table></figure><p>手动在grub命令行接口启动系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grub&gt; root (hd<span class="comment">#,#)</span></span><br><span class="line">grub&gt; kernel /vmlinuz-VERSION-RELEASE ro root=/dev/DEVICE</span><br><span class="line">grub&gt; initrd /initramfs-VERSION-RELEASE.img</span><br><span class="line">grub&gt; bootgrub legacy配置文件</span><br></pre></td></tr></table></figure><h2 id="配置文件-boot-grub-grub-conf-lt-etc-grub-conf"><a href="#配置文件-boot-grub-grub-conf-lt-etc-grub-conf" class="headerlink" title="配置文件: /boot/grub/grub.conf &lt;- /etc/grub.conf"></a>配置文件: /boot/grub/grub.conf &lt;- /etc/grub.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]#vim  /boot/grub/grub.conf</span><br><span class="line"># grub.conf generated by anaconda                                                                 </span><br><span class="line">#</span><br><span class="line"># Note that you do not have to rerun grub after making changes to this file</span><br><span class="line"># NOTICE:  You have a /boot partition.  This means that</span><br><span class="line">#          all kernel and initrd paths are relative to /boot/, eg.</span><br><span class="line">#          root (hd0,0)</span><br><span class="line">#          kernel /vmlinuz-version ro root=/dev/sda2</span><br><span class="line">#          initrd /initrd-[generic-]version.img</span><br><span class="line">#boot=/dev/sda</span><br><span class="line">default=0</span><br><span class="line">timeout=5</span><br><span class="line">splashimage=(hd0,0)/grub/splash.xpm.gz</span><br><span class="line">hiddenmenu</span><br><span class="line">title CentOS 6 (2.6.32-754.el6.x86_64)</span><br><span class="line">        root (hd0,0)</span><br><span class="line">        kernel /vmlinuz-2.6.32-754.el6.x86_64 ro root=UUID=d3df2aba-5cd3-47fe-8128-3445b87dba11 rd</span><br><span class="line">_NO_LUKS rd_NO_LVM LANG=en_US.UTF-8 rd_NO_MD SYSFONT=latarcyrheb-sun16 crashkernel=auto  KEYBOARDT</span><br><span class="line">YPE=pc KEYTABLE=us rd_NO_DM rhgb quiet</span><br><span class="line">        initrd /initramfs-2.6.32-754.el6.x86_64.img</span><br></pre></td></tr></table></figure><p>参数：<br>default=#: 设定默认启动的菜单项；落单项(title)编号从0开始<br>timeout=#：指定菜单项等待选项选择的时长<br>splashimage=(hd#,#)/PATH/XPM_FILE：菜单背景图片文件路径<br>password [–md5] STRING: 启动菜单编辑认证<br>hiddenmenu：隐藏菜单<br>title TITLE：定义菜单项“标题” , 可出现多次<br>root (hd#,#)：查找stage2及kernel文件所在设备分区；为grub的根<br>kernel /PATH/TO/VMLINUZ_FILE [PARAMETERS]：启动的内核<br>initrd /PATH/TO/INITRAMFS_FILE: 内核匹配的ramfs文件</p><h2 id="grub加密"><a href="#grub加密" class="headerlink" title="grub加密"></a>grub加密</h2><p>因为linux只要进入单用户模式下就很轻易的破解root口令，所以我们在/boot/grub/grub.conf文件里加上一行passwd.<br>password [–md5|–encrypted ] STRING: 启动选定的内核或操作系统时进行认证</p><ol><li><p>生成grub口令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grub-md5-crypt</span><br><span class="line">grub-crypt</span><br></pre></td></tr></table></figure></li><li><p>破解root口令</p><p>启动系统时，设置其运行级别1，进入单用户模式：</p><blockquote><p>编辑grub菜单(选定要编辑的title，而后使用a 或 e 命令)<br>在选定的kernel后附加1, s, S，single 都可以<br>在kernel所在行，键入“b” 命令</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Centos6启动流程&quot;&gt;&lt;a href=&quot;#Centos6启动流程&quot; class=&quot;headerlink&quot; title=&quot;Centos6启动流程&quot;&gt;&lt;/a&gt;Centos6启动流程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;POST加电自检,即加载BIOS的硬件信息，获取第一个启
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="启动流程" scheme="http://yoursite.com/tags/%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    
      <category term="grub" scheme="http://yoursite.com/tags/grub/"/>
    
  </entry>
  
  <entry>
    <title>Linux用户、组和权限管理</title>
    <link href="http://yoursite.com/2018/09/21/Linux%E7%94%A8%E6%88%B7%E3%80%81%E7%BB%84%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/09/21/Linux用户、组和权限管理/</id>
    <published>2018-09-20T16:00:00.000Z</published>
    <updated>2019-01-12T04:40:11.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-用户和用户组基础概念"><a href="#Linux-用户和用户组基础概念" class="headerlink" title="Linux 用户和用户组基础概念"></a>Linux 用户和用户组基础概念</h1><p>&ensp;&ensp;&ensp;&ensp; Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><h2 id="用户、用户组的类别："><a href="#用户、用户组的类别：" class="headerlink" title="用户、用户组的类别："></a>用户、用户组的类别：</h2><ul><li><p>用户user  </p><blockquote><p>Linux用户： Username/UID  </p><blockquote><p>管理员： root, 0<br>普通用户： 1-60000 自动分配  </p><blockquote><p>系统用户： 1-499, 1-999 （CentOS7） 对守护进程获取资源进行权限分配<br>登录用户： 500+, 1000+（CentOS7）通过交互式方式登录  </p></blockquote></blockquote></blockquote></li><li><p>组group  </p><blockquote><p>Linux组： Groupname/GID  </p><blockquote><p>管理员组： root, 0<br>普通组：  </p><blockquote><p>系统组： 1-499, 1-999（centos7）<br>普通组： 500+, 1000+（centos7）  </p></blockquote></blockquote></blockquote></li></ul><p>对于一个用户而言可以有不同的组，分别称为用户的基本组（主组）和附加组；基本组组名与用户名相同，且仅包含一个用户，也叫私有组。基本组以外的的组属于用户的附加组。  </p><p><code>判断用户和组是不是管理员，不是根据名字叫root来判断的，而是根据UID和GID是不是等于0来判断的。等于0则为管理员，否则则不是。</code></p><h2 id="用户配置文件"><a href="#用户配置文件" class="headerlink" title="用户配置文件"></a>用户配置文件</h2><ul><li><p>用户及其属性信息(名称、 UID、主组ID等）：/etc/passwd</p></li><li><p>组及其属性信息：/etc/group</p></li><li><p>用户密码及相关属性：/etc/shadow</p></li><li><p>组密码及相关属性：/etc/gshadow</p></li></ul><h2 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#cat /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure><p>/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段：</p><ul><li>用户名:口令:UID:GID:注释性描述:主目录:登录Shell类型</li></ul><p>系统中有一类用户称为系统用户，这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求.<br>系统用户含义:<br>bin 拥有可执行的用户命令文件<br>sys 拥有系统文件<br>adm 拥有帐户文件<br>uucp UUCP使用<br>lp lp或lpd子系统使用<br>nobody NFS使用  </p><h2 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a>/etc/group</h2><p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#cat /etc/group</span></span><br><span class="line">root:x:0:</span><br><span class="line">bin:x:1:</span><br><span class="line">daemon:x:2:</span><br><span class="line">sys:x:3:</span><br><span class="line">adm:x:4:</span><br><span class="line">tty:x:5:</span><br><span class="line">disk:x:6:</span><br><span class="line">lp:x:7:</span><br></pre></td></tr></table></figure></p><p>此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p><ul><li>组名:口令:组标识号:组内用户列表</li></ul><p>组名:是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。<br>口令:字段存放的是用户组加密后的口令字。<br>组标识号:与用户标识号类似，也是一个整数，被系统内部用来标识组。<br>组内用户列表:是属于这个组的所有用户的列表，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组</p><h2 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h2><p>/etc/shadow文件用于单独存放加密后的口令字，只有超级用户才拥有该文件读权限<br><code>注意：/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#cat /etc/shadow</span></span><br><span class="line">root:<span class="variable">$6</span><span class="variable">$9T5n</span>/VcnCXrseL/f<span class="variable">$Nqs3zA</span>.hfJPXIrNtuiyUD9Ps6s.aGC.XYPrABjgPPABgvRIyMntuEkw2All7VhDQd5XM3AiN2RqAdwuoUfJ0K1::0:99999:7:::</span><br><span class="line">bin:*:17632:0:99999:7:::</span><br><span class="line">daemon:*:17632:0:99999:7:::</span><br><span class="line">adm:*:17632:0:99999:7:::</span><br><span class="line">lp:*:17632:0:99999:7:::</span><br></pre></td></tr></table></figure></p><p>它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p><ul><li>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志<br><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E5%AF%86%E7%A0%81%E6%9C%9F%E9%99%90.jpg?raw=true" alt=""></li></ul><p>登录名:/etc/passwd文件中的登录名相一致的用户账号<br>口令:字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；<br>最后一次修改时间:表示的是从某个时刻起，到用户最后一次修改口令时的天数<br>最小时间间隔:指的是两次修改口令之间所需的最小天数<br>最大时间间隔:指的是口令保持有效的最大天数<br>警告时间:字段表示的是从系统开始警告用户到用户密码正式失效之间的天数<br>不活动时间:表示的是用户没有登录活动但账号仍能保持有效的最大天数<br>失效时间:字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。  </p><h2 id="etc-gshadow"><a href="#etc-gshadow" class="headerlink" title="/etc/gshadow"></a>/etc/gshadow</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#cat /etc/gshadow</span></span><br><span class="line">root:::</span><br><span class="line">bin:::</span><br><span class="line">daemon:::</span><br><span class="line">sys:::</span><br><span class="line">adm:::</span><br><span class="line">tty:::</span><br><span class="line">disk:::</span><br><span class="line">lp:::</span><br></pre></td></tr></table></figure><p>它的文件格式与/etc/group类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：<br>群组名称：就是群组名称<br>群组密码：<br>组管理员列表：组管理员的列表，更改组密码和成员<br>以当前组为附加组的用户列表： (分隔符为逗号)</p><h1 id="用户和组的管理命令"><a href="#用户和组的管理命令" class="headerlink" title="用户和组的管理命令"></a>用户和组的管理命令</h1><p>用户管理命令  </p><blockquote><p>useradd(创建用户)<br>usermod(修改用户)<br>userdel(删除用户)</p></blockquote><p>组管理命令  </p><blockquote><p>groupadd(创建组)<br>groupmod(修改组)<br>groupdel(删除组)</p></blockquote><p>密码配置命令  </p><blockquote><p>passwd(设置用户密码)<br>gpasswd（设置组密码）</p></blockquote><h2 id="用户创建-useradd"><a href="#用户创建-useradd" class="headerlink" title="用户创建:useradd"></a>用户创建:useradd</h2><ul><li>useradd  [options] LOGIN  </li></ul><p>-u UID:用户ID的数字值。此值必须为唯一的，除非使用了-o选项。此值必须非负，默认使用大于等于UID_MIN，且大于任何其他用户ID最小值<br>-o 配合-u 选项，不检查UID的唯一性<br>-g GID：指明用户所属基本组，可为组名，也可以GID<br>-c “COMMENT”：用户的注释信息<br>-d HOME_DIR: 以指定的路径(不存在)为家目录<br>-s SHELL: 指明用户的默认shell程序，可用列表在/etc/shells文件中<br>-G GROUP1[,GROUP2,…]：为用户指明附加组，组须事先存在<br>-N 不创建私用组做主组，使用users组做主组<br>-r 创建系统用户 CentOS 6: ID&lt;500， CentOS 7: ID&lt;1000<br>-m 创建家目录，用于系统用户<br>-M 不创建家目录，用于非系统用户   </p><p>useradd -D：显示创建用户时的默认设置；<br>useradd -D  选项：设置某默认选项；  </p><p>例1：创建一个用户sam，为sam指定主目录为/usr/sam<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /usr/sam sam</span><br></pre></td></tr></table></figure></p><p>例2：创建用户gentoo，附加组为bin和root，默认shell为/bin/csh，注释信息为<br>“Gentoo Distribution”<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -c <span class="string">"Gentoo Distribution"</span> -G bin,root -s /bin/csh gentoo</span><br></pre></td></tr></table></figure></p><p>例3:新建用户gem，指定该用户的登录Shell是 /bin/sh，指定它属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd group</span><br><span class="line">groupadd adm</span><br><span class="line">useradd -s /bin/sh -g group –G <span class="string">"adm,root"</span> gem</span><br></pre></td></tr></table></figure></p><p>例4:创建下面的用户、组和组成员关系<br>名字为webs 的组<br>用户nginx 使用webs 作为附属组<br>用户varnish，也使用webs 作为附属组<br>用户mysql，不可交互登录系统，且不是webs 的成员， nginx， varnish，mysql密码都是magedu<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">groupadd webs</span><br><span class="line">useradd nginx -G webs</span><br><span class="line">useradd varnish -G webs</span><br><span class="line">useradd mysql -s /sbin/nologin</span><br><span class="line"><span class="built_in">echo</span> magedu | passwd --stdin nginx</span><br><span class="line"><span class="built_in">echo</span> magedu | passwd --stdin varnish</span><br><span class="line"><span class="built_in">echo</span> magedu | passwd --stdin mysql</span><br></pre></td></tr></table></figure></p><h2 id="用户属性修改-usermod"><a href="#用户属性修改-usermod" class="headerlink" title="用户属性修改:usermod"></a>用户属性修改:usermod</h2><p><code>注意：usermod不允许改变正在线上的使用者帐号名称。当usermod改变userID,必须确认这名user没在电脑上执行任何程序</code>  </p><ul><li>usermod [OPTION] login<br>-u UID: 新UID<br>-g GID: 新主组<br>-G GROUP1[,GROUP2,…[,GROUPN]]]：新附加组，原来的附加组将会被覆盖；若保留原有，则要同时使用-a选项<br>-s SHELL：新的默认SHELL<br>-c ‘COMMENT’：新的注释信息<br>-d HOME: 新家目录不会自动创建；若要创建新家目录并移动原家数据，同时使用-m选项<br>-l login_name: 新的名字<br>-L: lock指定用户,在/etc/shadow 密码栏的增加 !<br>-U: unlock指定用户,将 /etc/shadow 密码栏的 ! 拿掉<br>-e YYYY-MM-DD: 指明用户账号过期日期<br>-f INACTIVE: 设定非活动期限  </li></ul><h2 id="删除用户-userdel"><a href="#删除用户-userdel" class="headerlink" title="删除用户:userdel"></a>删除用户:userdel</h2><ul><li>userdel [OPTION]… login<br>-r：用户主目录中的文件将随用户主目录和用户邮箱一起删除</li></ul><h2 id="创建组-groupadd"><a href="#创建组-groupadd" class="headerlink" title="创建组:groupadd"></a>创建组:groupadd</h2><ul><li>groupadd [OPTION]… group_name<br>-g GID :指明GID,默认是上一个组的GID+1<br>-r:创建系统组，默认为1-999数字  </li></ul><h2 id="修改和删除组"><a href="#修改和删除组" class="headerlink" title="修改和删除组"></a>修改和删除组</h2><blockquote><p>组属性修改:groupmod  </p><ul><li>groupmod [OPTION]… group<br>-n group_name: 新名字<br>-g GID: 新的GID  </li></ul></blockquote><blockquote><p>组删除：groupdel<br>groupdel GROUP</p></blockquote><h2 id="passwd：密码设置常用命令"><a href="#passwd：密码设置常用命令" class="headerlink" title="passwd：密码设置常用命令"></a>passwd：密码设置常用命令</h2><p><code>以下命令只有root才有权限操作</code><br>passwd：修改自己的密码<br>passwd  username：修改其它用户的密码<br>-d：删除指定用户密码<br>-l： 锁定指定用户<br>-e：强制用户下次登录修改密码<br>-f：强制操作<br>-n mindays：指定最短使用期限<br>-x maxdays： 最大使用期限<br>-w warndays：提前多少天开始警告<br>-i inactivedays：非活动期限<br>–stdin：从标准输入接收用户密码<br>echo “PASSWORD” | passwd –stdin USERNAME<br>​                           </p><h2 id="更改组密码-gpasswd"><a href="#更改组密码-gpasswd" class="headerlink" title="更改组密码:gpasswd"></a>更改组密码:gpasswd</h2><ul><li>gpasswd [OPTION] GROUP<br>-a UserName：把用户添加至组中<br>-d UserName：从此组中移除此用户；</li><li>newgrp命令：登录到一个新组   </li><li>chage命令：修改用户账号的各种期限；修改账户或口令的期限设定<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 口令最短使用期限7天，最长使用期限30天，警告期3天，非活动期3天。          </span><br><span class="line">[root@localhost ~]<span class="comment"># chage -m7 -M30 -W3 -I3 mageedu          </span></span><br><span class="line">2. 修改口令最近一次修改时间，需转换为设定时间到1970年1月1日的天数          </span><br><span class="line">[root@localhost ~]<span class="comment"># chage -d16860 mageedu          </span></span><br><span class="line">3. 设置账户过期时间，需转换为设定时间到1970年1月1日的天数。          </span><br><span class="line">[root@localhost ~]<span class="comment"># chage -E16920 mageedu</span></span><br></pre></td></tr></table></figure></li></ul><p>chsh：更换登入系统时使用的shell,</p><p>chfn：提供使用者更改个人资讯,</p><p>finger：使用者查询一些其他使用者的资料,</p><p>pwck : 检查密码文件的完整性, </p><p>grpck：检查组文件的完整性</p><h2 id="su：切换用户"><a href="#su：切换用户" class="headerlink" title="su：切换用户"></a>su：切换用户</h2><ol><li>不读取目标用户的配置文件,不改变当前工作目录（非登录式切换，半切换)<br>su  UserName   </li><li>读取目标用户的配置文件,切换至家目录（登录式切换，完全切换)<br>su  -  UserName  </li><li>仅以指定的用户的身份运行此处指定的命令，而不执行真正的身份切换操作<br>su [-] UserName -c ‘COMMAND’<br><code>注意：root切换至任何其它用户无须认证密码；普通用户切换至其它用户，都需要密码</code>  </li></ol><h1 id="用户和用户组权限管理"><a href="#用户和用户组权限管理" class="headerlink" title="用户和用户组权限管理"></a>用户和用户组权限管理</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#ll -d /etc       # 显示文件名与相关属性命令</span></span><br><span class="line">drwxr-xr-x. 137 root root 12288 Oct 21 09:57 /etc</span><br></pre></td></tr></table></figure><ol><li>类型和权限(permission)：</li></ol><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7.png?raw=true" alt=""><br>显示格式：</p><ul><li>类型和权限  连接数  所有者   用户组   文件大小  修改日期   文件名</li></ul><ol start="2"><li>权限组合机制：(8bites 二进制)</li></ol><p><img src="https://github.com/xiejia1215225/Pictures/blob/master/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90.jpg?raw=true" alt=""></p><p>第二道十个字符：每三个为一组，均为’rwx’三个参数组合<br>rwxrwxrwx每个位置固定不定，若无则为空，用’-‘符号表示</p><p>r：readable, 读；w：writable, 写；x：excutable，执行</p><p>r=4    w=2   x=1 -=0</p><ol start="3"><li>文件权限系统主要分为3类用户：</li></ol><p>属主：owner,u          属组：group,g       其他：other,o</p><p>其与之对应的权限:<br>​     rwx                rwx                     rwx</p><ol start="4"><li>文件和目录的权限管理：</li></ol><p>对于文件的含义:  </p><blockquote><p>r：可获取文件的数据；可以使用类似于cat命令查看文件内容</p></blockquote><blockquote><p>w: 可修改文件的数据；可以编或者删除此文件</p></blockquote><blockquote><p>x：可将此文件运行为进程；可以在命令提示符下当做命令提交给内核运行</p></blockquote><p>对于目录的含义:</p><blockquote><p>r：可使用ls命令获取其下的所有文件列表；</p></blockquote><blockquote><p>w: 可修改此目录下的文件列表；即创建或删除文件；</p></blockquote><blockquote><p>x: 可cd至此目录中，且可使用ls -l来获取所有文件的详细属性信息；</p></blockquote><blockquote><p>X: 只针对目录添加x权限，不对目录下的文件添加x权限；</p></blockquote><h1 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h1><h2 id="chmod-更改文件目录权限"><a href="#chmod-更改文件目录权限" class="headerlink" title="chmod:更改文件目录权限"></a>chmod:更改文件目录权限</h2><p>用户类型：u：属主   g：属组   o：其它    a: 所有</p><p>chmod [OPTION]…  MODE[,MODE]… FILE…  </p><ol><li><p>赋权表示法：直接操作一类用户的所有权限位rwx<br>用等号表示：[u|g|o|a]=rwx中的一位或者多位 </p></li><li><p>授权表示法：直接操作一类用户的一个权限位r,w,x<br>用加减号表示：[u|g|o|a][+|-]rwx  </p></li></ol><p>chmod [OPTION]…  OCTAL-MODE FILE…<br>直接使用三位数字的方式给文件目录增加权限，分别表示所有者、所属组、其他人的权限<br>数字的表示方法同上：8bites 二进制表示权限的组合机制<br>r=4   w=2   x=1  三位相加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 data]<span class="comment">#ll</span></span><br><span class="line">--w-------. 1 root root     0 Oct 21 20:29 f1</span><br><span class="line">[root@CentOS6 data]<span class="comment">#chmod 666 f1    #对 (u g o)添加读写权限</span></span><br><span class="line">[root@CentOS6 data]<span class="comment">#ll</span></span><br><span class="line">-rw-rw-rw-. 1 root root     0 Oct 21 20:29 f1</span><br></pre></td></tr></table></figure></p><p>chmod [OPTION]…  –reference=RFILE FILE…   参照某个文件的权限来进行授权操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 data]<span class="comment">#ll</span></span><br><span class="line">--w-------. 1 root root     0 Oct 21 20:29 f1</span><br><span class="line">-rw-r--r--. 1 root root     0 Oct 21 21:20 f2</span><br><span class="line">-rw-r--r--. 1 root root     0 Oct 21 21:20 f3</span><br><span class="line">[root@CentOS6 data]<span class="comment">#chmod --reference=f1 f2 f3</span></span><br><span class="line">[root@CentOS6 data]<span class="comment">#ll</span></span><br><span class="line">--w-------. 1 root root     0 Oct 21 20:29 f1</span><br><span class="line">--w-------. 1 root root     0 Oct 21 21:20 f2</span><br><span class="line">--w-------. 1 root root     0 Oct 21 21:20 f3</span><br></pre></td></tr></table></figure></p><p><code>注意：普通用户仅能修改属主为自己的那些文件的权限；root可以更改所有用户</code></p><h2 id="chown-更改文件目录的所有者，也可以更改所属组"><a href="#chown-更改文件目录的所有者，也可以更改所属组" class="headerlink" title="chown:更改文件目录的所有者，也可以更改所属组"></a>chown:更改文件目录的所有者，也可以更改所属组</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 data]<span class="comment">#ll f1</span></span><br><span class="line">-rw-rw-rw-. 1 root root     0 Oct 21 20:29 f1</span><br><span class="line">[root@CentOS6 data]<span class="comment">#chown xie f1</span></span><br><span class="line">[root@CentOS6 data]<span class="comment">#ll f1</span></span><br><span class="line">-rw-rw-rw-. 1 xie root 0 Oct 21 20:29 f1</span><br></pre></td></tr></table></figure><ol><li>chgrp [OPTION]… GROUPFILE… 更改所属组<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 data]<span class="comment">#ll f1</span></span><br><span class="line">-rw-rw-rw-. 1 xie root 0 Oct 21 20:29 f1</span><br><span class="line">[root@CentOS6 data]<span class="comment">#ll f1</span></span><br><span class="line">-rw-rw-rw-. 1 xie rpc 0 Oct 21 20:29 f1</span><br></pre></td></tr></table></figure></li></ol><p><code>注意：</code></p><ol><li>普通用户是不能更改文件的所有者的</li><li>作为普通用户，要想更改文件的所属组：  <blockquote><p>文件是普通用户它自己的<br>如果要更改的组，普通用户必须在这个组里</p></blockquote></li></ol><h2 id="umask-文件的权限反向掩码，遮罩码"><a href="#umask-文件的权限反向掩码，遮罩码" class="headerlink" title="umask:文件的权限反向掩码，遮罩码"></a>umask:文件的权限反向掩码，遮罩码</h2><ol><li>umask：查看当前umask<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#umask</span></span><br><span class="line">0022</span><br></pre></td></tr></table></figure></li></ol><p>系统默认为：0022 表示特殊权限、所有者权限、所有组权限、其他人权限<br>更改默认设置位置：/etc/bashrc </p><ol start="2"><li>对文件目录的umask操作 <blockquote><p>文件：666-umask 文件默认不能拥有执行权限;如果减得的结果中有执行权限，则需要将其加1<br>文件夹：777-umask</p></blockquote></li></ol><h1 id="Linux文件系统上的特殊权限"><a href="#Linux文件系统上的特殊权限" class="headerlink" title="Linux文件系统上的特殊权限"></a>Linux文件系统上的特殊权限</h1><h2 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h2><p>功能：继承二进制程序所有者的权限<br>权限设定：<br>chmod u+s file…<br>chmod u-s file…<br>chmod 4### file…<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#ll f1</span></span><br><span class="line">-rw-r--r--. 1 root root 595 Oct 14 14:16 f1</span><br><span class="line">[root@localhost data]<span class="comment">#chmod  u+s f1</span></span><br><span class="line">[root@localhost data]<span class="comment">#ll f1</span></span><br><span class="line">-rwSr--r--. 1 root root 595 Oct 14 14:16 f1</span><br><span class="line">[root@localhost data]<span class="comment">#chmod u-s f1</span></span><br><span class="line">[root@localhost data]<span class="comment">#ll f1</span></span><br><span class="line">-rw-r--r--. 1 root root 595 Oct 14 14:16 f1</span><br><span class="line">[root@localhost data]<span class="comment">#chmod 4644 f1</span></span><br><span class="line">[root@localhost data]<span class="comment">#ll f1        </span></span><br><span class="line">-rwSr--r--. 1 root root 595 Oct 14 14:16 f1</span><br></pre></td></tr></table></figure></p><p>SUID只对二进制可执行程序有效<br>SUID设置在目录上无意义</p><h2 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h2><ol><li><p>可执行文件上SGID权限<br>功能：继承二进制程序所有组的权限<br>权限设定：<br>chmod g+s file…<br>chmod g-s file…<br>chmod 2### file…  </p></li><li><p>目录上的SGID权限<br>功能：此目录新建的文件继承目录的所属组<br>权限设定：<br>chmod g+s dir…<br>chmod g-s dir…<br>chmod 2### dir…  </p></li></ol><h2 id="Sticky位"><a href="#Sticky位" class="headerlink" title="Sticky位"></a>Sticky位</h2><p>功能：作用于目录，此目录的文件只能被所有者或root删除<br>权限设定:<br>chmod o+t dir…<br>chmod o-t dir…<br>chmod 1### dir…<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#ll -d /tmp</span></span><br><span class="line">drwxrwxrwt. 15 root root 4096 Oct 23 18:33 /tmp</span><br></pre></td></tr></table></figure></p><h2 id="权限位映射"><a href="#权限位映射" class="headerlink" title="权限位映射"></a>权限位映射</h2><p>SUID: user,占据属主的执行权限位<br>s： 属主拥有x权限<br>S：属主没有x权限<br>SGID: group,占据属组的执行权限位<br>s： group拥有x权限<br>S： group没有x权限<br>Sticky: other,占据other的执行权限位<br>t： other拥有x权限<br>T： other没有x权限  </p><h1 id="访问控制列表"><a href="#访问控制列表" class="headerlink" title="访问控制列表"></a>访问控制列表</h1><p>ACL： Access Control List，实现灵活的权限管理<br>除了文件的所有者，所属组和其它人，可以对更多的用户设置权限<br>CentOS7 默认创建的xfs和ext4文件系统具有ACL功能<br>CentOS7 之前版本，默认手工创建的ext4文件系统无ACL功能,需手动增加<br>tune2fs –o acl /dev/sdb1<br>mount –o acl /dev/sdb1 /mnt/test<br>ACL生效顺序：所有者，自定义用户，自定义组，其他人</p><ol><li>常见的一些命令<br>setfacl -m u:username:rwx file  为用户的文件赋予访问权限rwx<br>setfacl -m g:groupname:rw file  为组的文件赋予访问权限rwx<br>getfacl filename  查看设置的acl权限<br>setfacl -b filename 清空acl权限<br>setfacl -k dir 删除默认ACL权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#ll f1</span></span><br><span class="line">-rw-r--r--. 1 root root 595 Oct 14 14:16 f1</span><br><span class="line">[root@localhost data]<span class="comment">#setfacl -m u:xie:rw f1</span></span><br><span class="line">[root@localhost data]<span class="comment">#ll f1</span></span><br><span class="line">-rw-rw-r--+ 1 root root 595 Oct 14 14:16 f1  <span class="comment"># +代表有acl权限</span></span><br><span class="line">[root@localhost data]<span class="comment">#getfacl f1</span></span><br><span class="line"><span class="comment"># file: f1</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rw-</span><br><span class="line">user:xie:rw-</span><br><span class="line">group::r--</span><br><span class="line">mask::rw-</span><br><span class="line">other::r--</span><br><span class="line">[root@localhost data]<span class="comment">#setfacl -b f1</span></span><br><span class="line">[root@localhost data]<span class="comment">#ll f1</span></span><br><span class="line">-rw-r--r--. 1 root root 595 Oct 14 14:16 f1</span><br><span class="line">[root@localhost data]<span class="comment">#getfacl f1</span></span><br><span class="line"><span class="comment"># file: f1</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rw-</span><br><span class="line">group::r--</span><br><span class="line">other::r--</span><br></pre></td></tr></table></figure></li></ol><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><p>当用户docker对/testdir 目录无执行权限时，意味着无法做哪些操作？<br>答:无法cd至此目录中；无法查看目录的详细属性；无法查看文件的内容；</p></li><li><p>当用户mongodb对/testdir 目录无读权限时，意味着无法做哪些操作？<br>答:可使用ls命令获取其下的所有文件列表</p></li><li><p>当用户redis 对/testdir 目录无写权限时，该目录下的只读文件file1是否可<br>修改和删除？<br>答:不行，文件能不能删除由目录的权限决定的。（rw）</p></li><li><p>当用户zabbix对/testdir 目录有写和执行权限时，该目录下的只读文件file1<br>是否可修改和删除？<br>答:可以</p></li><li><p>复制/etc/fstab文件到/var/tmp下，设置文件所有者为tomcat读写权限，所<br>属组为apps组有读写权限，其他人无权限  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useradd tomcat</span><br><span class="line">groupadd apps</span><br><span class="line">cp /etc/fstab /var/tmp</span><br><span class="line">chown tomcat /var/tmp/fstab</span><br><span class="line">chgrp apps /var/tmp/fstab</span><br><span class="line">chmod 660 /var/tmp/fstab</span><br></pre></td></tr></table></figure></li><li><p>误删除了用户git的家目录，请重建并恢复该用户家目录及相应的权限属性  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useradd git</span><br><span class="line">rm -rf /home/git</span><br><span class="line">mkdir /home/git</span><br><span class="line">cp -a /etc/skel/.[^.]* /home/git</span><br><span class="line">chown -R git.git /home/git</span><br><span class="line">chmod 700 /home/git</span><br></pre></td></tr></table></figure></li><li><p>在/testdir/dir里创建的新文件自动属于webs组，组apps的成员如：<br>tomcat能对这些新文件有读写权限，组dbs的成员如： mysql只能对新文件有读权限，其它用户（不属于webs,apps,dbs）不能访问这个文件夹  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir     -p     /testdir/dir</span><br><span class="line">groupadd webs</span><br><span class="line">chgrp     webs   /testdir/dir</span><br><span class="line">chmod    g+s     /testdir/dir </span><br><span class="line">groupadd apps  </span><br><span class="line">groupadd dbs</span><br><span class="line">useradd -G apps tomcat</span><br><span class="line">useradd -G dbs mysql</span><br><span class="line">setfacl -m g:apps:rw /testdir/dir/</span><br><span class="line">setfacl -m g:dbs:r /testdir/dir/</span><br><span class="line">chmod o= /testdir/dir</span><br></pre></td></tr></table></figure></li><li><p>备份/testdir/dir里所有文件的ACL权限到/root/acl.txt中，清除/testdir/dir中所有ACL权限，最后还原ACL权限  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getfacl -R /testdir/dir &gt; /root/acl.txt </span><br><span class="line">setfacl -b /testdir/dir</span><br><span class="line">setfacl -R –<span class="built_in">set</span>-file=acl.txt /testdir/dir</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-用户和用户组基础概念&quot;&gt;&lt;a href=&quot;#Linux-用户和用户组基础概念&quot; class=&quot;headerlink&quot; title=&quot;Linux 用户和用户组基础概念&quot;&gt;&lt;/a&gt;Linux 用户和用户组基础概念&lt;/h1&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;e
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="user" scheme="http://yoursite.com/tags/user/"/>
    
      <category term="group" scheme="http://yoursite.com/tags/group/"/>
    
      <category term="权限" scheme="http://yoursite.com/tags/%E6%9D%83%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>Ansible的高级用法之playbook和roles</title>
    <link href="http://yoursite.com/2018/09/10/Ansible%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95%E4%B9%8Bplaybook%E5%92%8Croles/"/>
    <id>http://yoursite.com/2018/09/10/Ansible的高级用法之playbook和roles/</id>
    <published>2018-09-09T16:00:00.000Z</published>
    <updated>2019-01-12T05:04:46.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="playbook概念"><a href="#playbook概念" class="headerlink" title="playbook概念"></a>playbook概念</h1><p>playbook是由一个或多个“play” 组成的列表<br>play的主要功能在于将预定义的一组主机，装扮成事先通过ansible中的task定义好的角色。 Task实际是调用ansible的一个module，将多个play组织在一个playbook中，即可以让它们联合起来，按事先编排的机制执行预定义的动作<br>Playbook采用YAML语言编写  </p><h1 id="YAML介绍"><a href="#YAML介绍" class="headerlink" title="YAML介绍"></a>YAML介绍</h1><p>&ensp;&ensp;&ensp;&ensp;YAML是一个可读性高的用来表达资料序列的格式。 YAML参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822等。 Clark Evans在2001年在首次发表了这种语言，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者.</p><p>YAML Ain’t Markup Language，即YAML不是XML。不过，在开发的这种语言时，YAML的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li><p>YAML的可读性好  </p></li><li><p>YAML和脚本语言的交互性好  </p></li><li>YAML使用实现语言的数据类型  </li><li>YAML有一个一致的信息模型  </li><li>YAML易于实现  </li><li>YAML可以基于流来处理  </li><li>YAML表达能力强，扩展性好  </li></ol><h1 id="YAML语法简介"><a href="#YAML语法简介" class="headerlink" title="YAML语法简介"></a>YAML语法简介</h1><ul><li><p>在单一档案中，可用连续三个连字号(—)区分多个档案。另外，还有选择性的连续三个点号( … )用来表示档案结尾  </p></li><li><p>次行开始正常写Playbook的内容，一般建议写明该Playbook的功能  </p></li><li>使用#号注释代码  </li><li>缩进必须是统一的，不能空格和tab混用  </li><li>缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行来实现的</li><li>YAML文件内容是区别大小写的，k/v的值均需大小写敏感  </li><li>k/v的值可同行写也可换行写。同行使用:分隔  </li><li>v可是个字符串，也可是另一个列表  </li><li>一个完整的代码块功能需最少元素需包括 name: task  </li><li>一个name只能包括一个task  </li><li>YAML文件扩展名通常为yml或yaml  </li></ul><h2 id="List：列表，其所有元素均使用“-”-打头"><a href="#List：列表，其所有元素均使用“-”-打头" class="headerlink" title="List：列表，其所有元素均使用“-” 打头"></a>List：列表，其所有元素均使用“-” 打头</h2><p>示例：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A list of tasty fruits  </span></span><br><span class="line"></span><br><span class="line">- Apple</span><br><span class="line">- Orange</span><br><span class="line">- Strawberry</span><br><span class="line">- Mango</span><br></pre></td></tr></table></figure><h2 id="Dictionary：字典，通常由多个key与value构成"><a href="#Dictionary：字典，通常由多个key与value构成" class="headerlink" title="Dictionary：字典，通常由多个key与value构成"></a>Dictionary：字典，通常由多个key与value构成</h2><h2 id="示例："><a href="#示例：" class="headerlink" title="示例： "></a>示例： </h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="comment"># An employee record  </span></span><br><span class="line">name: Example Developer  </span><br><span class="line">job: Developer  </span><br><span class="line">skill: Elite</span><br></pre></td></tr></table></figure><p>也可以将key:value放置于{}中进行表示，用,分隔多个key:value</p><h2 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例：  "></a>示例：  </h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="comment"># An employee record  </span></span><br><span class="line">&#123;name: Example Developer, job: Developer, skill: Elite&#125;</span><br></pre></td></tr></table></figure><p>YAML的语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。其结构（Structure）通过空格来展示，序列（Sequence）里的项用”-“来代表，Map里的键值对用”:”分隔<br>示例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">name: John Smith</span><br><span class="line">age: 41</span><br><span class="line">gender: Male</span><br><span class="line">spouse:</span><br><span class="line">name: Jane Smith</span><br><span class="line">age: 37</span><br><span class="line">gender: Female</span><br><span class="line">children:</span><br><span class="line">- name: Jimmy Smith</span><br><span class="line">age: 17</span><br><span class="line">gender: Male</span><br><span class="line">- name: Jenny Smith</span><br><span class="line">age 13</span><br><span class="line">gender: Female</span><br></pre></td></tr></table></figure></p><h1 id="Playbook核心元素"><a href="#Playbook核心元素" class="headerlink" title="Playbook核心元素"></a>Playbook核心元素</h1><ol><li>Hosts 执行的远程主机列表  </li><li>Tasks 任务集  </li><li>Varniables 内置变量或自定义变量在playbook中调用  </li><li>Templates 模板，可替换模板文件中的变量并实现一些简单逻辑的文件  </li><li>Handlers 和notity结合使用，由特定条件触发的操作，满足条件方才执行，否则不执行  </li><li>tags 标签 指定某条任务执行，用于选择运行playbook中的部分代码。 ansible具有幂等性，因此会自动跳过没有变化的部分，即便如此，有些代码为测试其确实没有发生变化的时间依然会非常地长。此时，如果确信其没有变化，就可以通过tags跳过此些代码片断  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook –t tagsname useradd.yml</span><br></pre></td></tr></table></figure></li></ol><h1 id="playbook基础组件"><a href="#playbook基础组件" class="headerlink" title="playbook基础组件"></a>playbook基础组件</h1><h2 id="Hosts"><a href="#Hosts" class="headerlink" title="Hosts"></a>Hosts</h2><p>&ensp;&ensp;&ensp;&ensp;playbook中的每一个play的目的都是为了让特定主机以某个指定的用户身份执行任务。 hosts用于指定要执行指定任务的主机，须事先定义在主机清单中<br>可以是如下形式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">one.example.com</span><br><span class="line">one.example.com:two.example.com</span><br><span class="line">192.168.1.50</span><br><span class="line">192.168.1.*</span><br></pre></td></tr></table></figure></p><p>Websrvs:dbsrvs 或者，两个组的并集<br>Websrvs:&amp;dbsrvs 与，两个组的交集<br>webservers:!phoenix 在websrvs组，但不在dbsrvs组<br>示例: <code>- hosts: websrvs：dbsrvs</code>   </p><h2 id="remote-user"><a href="#remote-user" class="headerlink" title="remote_user"></a>remote_user</h2><p>&ensp;&ensp;&ensp;&ensp;用于Host和task中。也可以通过指定其通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务；此外，甚至可以在sudo时使用sudo_user指定sudo时切换的用户<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- hosts: websrvs</span><br><span class="line">remote_user: root</span><br><span class="line">tasks:</span><br><span class="line">- name: <span class="built_in">test</span> connection</span><br><span class="line">ping:</span><br><span class="line">remote_user: magedu</span><br><span class="line">sudo: yes                默认sudo为root</span><br><span class="line">sudo_user:wang           sudo为wang</span><br></pre></td></tr></table></figure></p><h2 id="task列表和action"><a href="#task列表和action" class="headerlink" title="task列表和action"></a>task列表和action</h2><p>&ensp;&ensp;&ensp;&ensp;play的主体部分是task list。 task list中的各任务按次序逐个在hosts中指定的所有主机上执行，即在所有主机上完成第一个任务后，再开始第二个任务<br>task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致<br>每个task都应该有其name，用于playbook的执行结果输出，建议其内容能清晰地描述任务执行步骤。如果未提供name，则action的结果将用于输出  </p><h3 id="tasks：任务列表"><a href="#tasks：任务列表" class="headerlink" title="tasks：任务列表"></a>tasks：任务列表</h3><p>两种格式：</p><ul><li>action: module arguments</li><li>module: arguments 建议使用<br><code>注意：shell和command模块后面跟命令，而非key=value</code></li></ul><p>任务可以通过”tags“打标签，可在ansible-playbook命令上使用-t指定进行调用<br>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tasks:  </span><br><span class="line">- name: <span class="built_in">disable</span> selinux  </span><br><span class="line"><span class="built_in">command</span>: /sbin/setenforce 0  </span><br><span class="line"></span><br><span class="line">如果命令或脚本的退出码不为零，可以使用如下方式替代  </span><br><span class="line"></span><br><span class="line">tasks:  </span><br><span class="line">- name: run this <span class="built_in">command</span> and ignore the result  </span><br><span class="line">shell: /usr/bin/somecommand || /bin/<span class="literal">true</span>  </span><br><span class="line"></span><br><span class="line">或者使用ignore_errors来忽略错误信息  </span><br><span class="line"></span><br><span class="line">tasks:  </span><br><span class="line">- name: run this <span class="built_in">command</span> and ignore the result  </span><br><span class="line">shell: /usr/bin/somecommand  </span><br><span class="line">ignore_errors: True</span><br></pre></td></tr></table></figure></p><h1 id="运行playbook的方式"><a href="#运行playbook的方式" class="headerlink" title="运行playbook的方式"></a>运行playbook的方式</h1><blockquote><p>ansible-playbook &lt;filename.yml&gt; … [options]</p></blockquote><p>常见选项:<br>–check -C 只检测可能会发生的改变，但不真正执行操作<br>–list-hosts 列出运行任务的主机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook test.yml --list-hosts</span></span><br><span class="line"></span><br><span class="line">playbook: test.yml</span><br><span class="line"></span><br><span class="line">  play <span class="comment">#1 (appsrvs): appsrvs    TAGS: []</span></span><br><span class="line">    pattern: [u<span class="string">'appsrvs'</span>]</span><br><span class="line">    hosts (2):</span><br><span class="line">      192.168.183.132</span><br><span class="line">      192.168.183.129</span><br></pre></td></tr></table></figure></p><p>–list-tags 列出tag<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook test.yml --list-tags  </span></span><br><span class="line"></span><br><span class="line">playbook: test.yml</span><br><span class="line"></span><br><span class="line">  play <span class="comment">#1 (appsrvs): appsrvs    TAGS: []</span></span><br><span class="line">      TASK TAGS: []</span><br></pre></td></tr></table></figure></p><p>–list-tasks 列出task<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook test.yml --list-tasks</span></span><br><span class="line">playbook: test.yml</span><br><span class="line"></span><br><span class="line">  play <span class="comment">#1 (appsrvs): appsrvs    TAGS: []</span></span><br><span class="line">    tasks:</span><br><span class="line">      first task        TAGS: []</span><br><span class="line">      second task       TAGS: []</span><br></pre></td></tr></table></figure></p><p>–limit 主机列表 只针对主机列表中的主机执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook test.yml --limit 192.168.183.129</span></span><br></pre></td></tr></table></figure></p><p>-v -vv -vvv 显示过程</p><h1 id="Playbook示例"><a href="#Playbook示例" class="headerlink" title="Playbook示例"></a>Playbook示例</h1><p>安装httpd，并且开机启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@cetos7 ~]<span class="comment">#vim /etc/ansible/hosts </span></span><br><span class="line"></span><br><span class="line"><span class="comment">##[dbservers]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##db01.intranet.mydomain.net</span></span><br><span class="line"><span class="comment">##db02.intranet.mydomain.net</span></span><br><span class="line"><span class="comment">##10.25.1.56</span></span><br><span class="line"><span class="comment">##10.25.1.57</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Here's another example of host ranges, this time there are no</span></span><br><span class="line"><span class="comment"># leading 0s:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## db-[99:101]-node.example.com   </span></span><br><span class="line"></span><br><span class="line">[appsrvs]             <span class="comment">#添加分组</span></span><br><span class="line">192.168.183.132</span><br><span class="line">192.168.183.129</span><br><span class="line">~                                                        </span><br><span class="line"><span class="string">"/etc/ansible/hosts"</span> 50L, 1100C        47,0-1        Bot</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim httpd.yml                </span></span><br><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: creat group</span><br><span class="line">      group: name=apache system=yes gid=80</span><br><span class="line">    - name: creat user</span><br><span class="line">      user: name=apache group=apache uid=80 shell=/sbin/nologin home=/usr/share/httpd system=yes password=<span class="string">'$1$MrKn.0gj$CvMvkger.03UzBwQIrya.0'</span></span><br><span class="line">    - name: install package</span><br><span class="line">      yum: name=httpd</span><br><span class="line">    - name: config file</span><br><span class="line">      copy: src=/root/playbook/httpd.conf dest=/etc/httpd/conf/ backup=yes</span><br><span class="line">    - name: service</span><br><span class="line">      service: name=httpd state=started enabled=yes      </span><br><span class="line">~</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook httod.yml</span></span><br></pre></td></tr></table></figure></p><h2 id="handlers和notify结合使用触发条件"><a href="#handlers和notify结合使用触发条件" class="headerlink" title="handlers和notify结合使用触发条件"></a>handlers和notify结合使用触发条件</h2><p>Handlers<br>是task列表，这些task与前述的task并没有本质上的不同,用于当关注的资源发生变化时，才会采取一定的操作<br>Notify<br>此action可用于在每个play的最后被触发，这样可避免多次有改变发生时每次都执行指定的操 作，仅在所有的变化发生完成后一次性地执行指定操作。在notify中列出的操作称handler，也即notify中调用handler中定义的操作  </p><p>&ensp;&ensp;&ensp;&ensp;如果httpd.conf文件内容修改了再运行一遍httpd.yml，只有config file发生改变，其他任务不会继续做了，所以把上述的playbook改写一下,加上notify和handlers：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#vim httpd.yml                </span></span><br><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: creat group</span><br><span class="line">      group: name=apache system=yes gid=80</span><br><span class="line">    - name: creat user</span><br><span class="line">      user: name=apache group=apache uid=80 shell=/sbin/nologin home=/usr/share/httpd system=yes password=<span class="string">'$1$MrKn.0gj$CvMvkger.03UzBwQIrya.0'</span></span><br><span class="line">    - name: install package</span><br><span class="line">      yum: name=httpd</span><br><span class="line">    - name: config file</span><br><span class="line">      copy: src=/root/playbook/httpd.conf dest=/etc/httpd</span><br><span class="line">      notify: restart service</span><br><span class="line">/conf/ backup=yes</span><br><span class="line">    - name: service</span><br><span class="line">      service: name=httpd state=started enabled=yes</span><br><span class="line">   handlers: </span><br><span class="line">    - name: restart service</span><br><span class="line">      service: name=httpd state=restart</span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook httod.yml</span></span><br><span class="line">如果我们httpd端口80 改成8080，再运行一遍`ansible-playbook`时，这时就只会触发重启httpd服务</span><br></pre></td></tr></table></figure></p><h2 id="Playbook中tags使用"><a href="#Playbook中tags使用" class="headerlink" title="Playbook中tags使用"></a>Playbook中tags使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#vim httpd.yml                </span></span><br><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: creat group</span><br><span class="line">      group: name=apache system=yes gid=80</span><br><span class="line">    - name: creat user</span><br><span class="line">      user: name=apache group=apache uid=80 shell=/sbin/nologin home=/usr/share/httpd system=yes password=<span class="string">'$1$MrKn.0gj$CvMvkger.03UzBwQIrya.0'</span></span><br><span class="line">    - name: install package</span><br><span class="line">      yum: name=httpd</span><br><span class="line">      tags: install</span><br><span class="line">    - name: config file</span><br><span class="line">      copy: src=/root/playbook/httpd.conf dest=/etc/httpd</span><br><span class="line">      tags: config</span><br><span class="line">      notify: restart service</span><br><span class="line">/conf/ backup=yes</span><br><span class="line">    - name: service</span><br><span class="line">      service: name=httpd state=started enabled=yes</span><br><span class="line">   handlers: </span><br><span class="line">    - name: restart service</span><br><span class="line">      service: name=httpd state=restart</span><br></pre></td></tr></table></figure><p>给playbook打上tags我们就可以单独的执行tags的那部分tasks</p><p><code>[root@centos7 playbook]#ansible-playbook -t install httpd.yml</code>   仅仅执行了安装httpd</p><h1 id="Playbook中变量使用"><a href="#Playbook中变量使用" class="headerlink" title="Playbook中变量使用"></a>Playbook中变量使用</h1><h2 id="变量来源："><a href="#变量来源：" class="headerlink" title="变量来源："></a>变量来源：</h2><ol><li>ansible setup facts 远程主机的所有变量都可直接调用  </li><li><p>在/etc/ansible/hosts中定义  </p><blockquote><p>普通变量：主机组中主机单独定义，优先级高于公共变量<br>公共（组）变量：针对主机组中所有主机定义统一变量  </p></blockquote></li><li><p>通过命令行指定变量，优先级最高</p><blockquote><p>ansible-playbook –e varname=value</p></blockquote></li><li><p>在playbook中定义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vars:</span><br><span class="line">- var1: value1</span><br><span class="line">- var2: value2</span><br></pre></td></tr></table></figure></li><li><p>在独立的变量YAML文件中定义  </p></li><li>在role中定义  </li></ol><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><p>变量名仅能由字母、数字和下划线组成，且只能以字母开头  </p><h2 id="变量定义：key-value"><a href="#变量定义：key-value" class="headerlink" title="变量定义：key=value"></a>变量定义：key=value</h2><p>示例：<code>http_port=80</code>  </p><h2 id="变量调用方式"><a href="#变量调用方式" class="headerlink" title="变量调用方式"></a>变量调用方式</h2><p>通过 调用变量，且变量名前后必须有空格，有时用“”才生效</p><blockquote><p>ansible-playbook –e 选项指定<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook test.yml -e “hosts=www user=magedu”</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="使用setup变量"><a href="#使用setup变量" class="headerlink" title="使用setup变量"></a>使用setup变量</h3><p>示例：var.yml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: create <span class="built_in">log</span> file</span><br><span class="line">      file: name=/var/<span class="built_in">log</span>/ &#123;&#123; ansible_fqdn &#125;&#125; state=touch</span><br><span class="line">ansible-playbook var.yml</span><br></pre></td></tr></table></figure></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>示例：var.yml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- hosts: websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  vars:</span><br><span class="line">    - username: user1</span><br><span class="line">    - groupname: group1</span><br><span class="line"></span><br><span class="line">  tasks:</span><br><span class="line">    - name: create group</span><br><span class="line">      group: name=&#123;&#123; groupname &#125;&#125; state=present</span><br><span class="line">    - name: create user</span><br><span class="line">      user: name=&#123;&#123; username &#125;&#125; state=present</span><br><span class="line">ansible-playbook var.yml</span><br><span class="line">ansible-playbook -e <span class="string">"username=user2 groupname=group2” var2.yml</span></span><br></pre></td></tr></table></figure></p><ol><li>主机变量  </li></ol><p>可以在inventory中定义主机时为其添加主机变量以便于在playbook中使用<br>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[websrvs]</span><br><span class="line">www1.magedu.com http_port=80 maxRequestsPerChild=808</span><br><span class="line">www2.magedu.com http_port=8080 maxRequestsPerChild=909</span><br></pre></td></tr></table></figure></p><ol start="2"><li>组变量  </li></ol><p>组变量是指赋予给指定组内所有主机上的在playbook中可用的变量<br>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[websrvs]</span><br><span class="line">www1.magedu.com</span><br><span class="line">www2.magedu.com</span><br><span class="line">[websrvs:vars]</span><br><span class="line">ntp_server=ntp.magedu.com</span><br><span class="line">nfs_server=nfs.magedu.com</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>普通变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[websrvs]</span><br><span class="line">192.168.99.101 http_port=8080 hname=www1</span><br><span class="line">192.168.99.102 http_port=80 hname=www2</span><br></pre></td></tr></table></figure></li><li><p>公共（组）变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[websvrs:vars]</span><br><span class="line">http_port=808</span><br><span class="line">mark=“_”</span><br><span class="line">[websrvs]</span><br><span class="line">192.168.99.101 http_port=8080 hname=www1</span><br><span class="line">192.168.99.102 http_port=80 hname=www2</span><br><span class="line">ansible websvrs –m hostname –a <span class="string">'name=&#123;&#123; hname &#125;&#125;&#123;&#123; mark &#125;&#125;&#123;&#123; http_port &#125;&#125;'</span></span><br></pre></td></tr></table></figure></li><li><p>命令行指定变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible websvrs –e http_port=8000 –m hostname –a <span class="string">'name=&#123;&#123; hname &#125;&#125;&#123;&#123; mark &#125;&#125;&#123;&#123; http_port &#125;&#125;'</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="模板templates"><a href="#模板templates" class="headerlink" title="模板templates"></a>模板templates</h1><ol><li>文本文件，嵌套有脚本（使用模板编程语言编写）  </li><li><p>Jinja2语言，使用字面量，有下面形式  </p><blockquote><p>字符串：使用单引号或双引号<br>数字：整数，浮点数<br>列表：[item1, item2, …]<br>元组：(item1, item2, …)<br>字典：{key1:value1, key2:value2, …}<br>布尔型：true/false<br>算术运算：+, -, *, /, //, %, **<br>比较操作：==, !=, &gt;, &gt;=, &lt;, &lt;=<br>逻辑运算：and, or, not<br>流表达式：For If When  </p></blockquote></li><li><p>templates功能：根据模块文件动态生成对应的配置文件  </p></li><li>templates文件必须存放于templates目录下，且命名为 .j2 结尾  </li><li><p>yaml/yml 文件需和templates目录平级，目录结构如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./</span><br><span class="line">├── temnginx.yml</span><br><span class="line">└── templates</span><br><span class="line">    └── nginx.conf.j2</span><br></pre></td></tr></table></figure></li><li><p>Playbook中template变更替换  </p></li><li>Playbook中template算术运算  </li></ol><h2 id="Templates示例"><a href="#Templates示例" class="headerlink" title="Templates示例"></a>Templates示例</h2><p>利用templates 同步nginx配置文件，并修改配置文件nginx.conf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#mkdir templates</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#mv nginx.conf templates/nginx.conf.j2</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── test_templ.yml</span><br><span class="line">├── templates</span><br><span class="line">   └── nginx.conf.j2</span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim test_templ.yml</span></span><br><span class="line">---</span><br><span class="line">  - hosts: appsrvs</span><br><span class="line">    remote_user: root</span><br><span class="line"></span><br><span class="line">    tasks:</span><br><span class="line">      - name: install</span><br><span class="line">        yum: name=nginx</span><br><span class="line">      - name: template</span><br><span class="line">        template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line">        notify: restart</span><br><span class="line">      - name: service</span><br><span class="line">        service: name=nginx state=started enabled=yes</span><br><span class="line">    handlers:</span><br><span class="line">      - name: restart</span><br><span class="line">        service: name=nginx state=restarted</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook test_templ.yml</span></span><br><span class="line">.........省略结果</span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible appsrvs -a 'ss -ntlp' #查看80端口是否开启</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible appsrvs -m shell -a 'ps axu | grep nginx'</span></span><br><span class="line">192.168.183.137 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      16688  0.0  0.1 120812  2228 ?        Ss   21:15   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     16689  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">nginx     16690  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx:  worker process</span><br><span class="line">root      16755  0.0  0.0 113172  1196 pts/1    S+   21:15   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      16757  0.0  0.0 112704   940 pts/1    S+   21:15   0:00 grep nginx</span><br><span class="line">192.168.183.136 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      18759  0.0  0.1 122924  2100 ?        Ss   20:46   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     18760  0.0  0.1 125472  3540 ?        S    20:46   0:00 nginx: worker process</span><br><span class="line">root      36053  0.0  0.0 113128  1196 pts/1    S+   21:15   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      36055  0.0  0.0 112664   948 pts/1    S+   21:15   0:00 grep nginx</span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible appsrvs -m shell -a 'ps axu | grep nginx'           </span></span><br><span class="line">192.168.183.137 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      16688  0.0  0.1 120812  2228 ?        Ss   21:15   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     16689  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">nginx     16690  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">root      16755  0.0  0.0 113172  1196 pts/1    S+   21:15   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      16757  0.0  0.0 112704   940 pts/1    S+   21:15   0:00 grep nginx</span><br><span class="line"></span><br><span class="line">192.168.183.136 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      18759  0.0  0.1 122924  2100 ?        Ss   20:46   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     18760  0.0  0.1 125472  3540 ?        S    20:46   0:00 nginx: worker process</span><br><span class="line">root      36053  0.0  0.0 113128  1196 pts/1    S+   21:15   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      36055  0.0  0.0 112664   948 pts/1    S+   21:15   0:00 grep nginx</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible appsrvs -m setup -a 'filter=ansible_processor_count'</span></span><br><span class="line">192.168.183.136 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"ansible_processor_count"</span>: 1</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">192.168.183.137 | SUCCESS =&gt; &#123;</span><br><span class="line">    <span class="string">"ansible_facts"</span>: &#123;</span><br><span class="line">        <span class="string">"ansible_processor_count"</span>: 2</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">"changed"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker process 与 CPU数量一致</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim templates/nginx.conf.j2</span></span><br><span class="line">.....省略.....</span><br><span class="line">worker_processes &#123;&#123; ansible_processor_count*2 &#125;&#125;;   <span class="comment">#Playbook中template算术运算</span></span><br><span class="line">.....省略.....</span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible appsrvs -m shell -a 'ps axu | grep nginx'           </span></span><br><span class="line">192.168.183.136 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      18759  0.0  0.1 122924  2100 ?        Ss   20:46   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     18760  0.0  0.1 125472  3540 ?        S    20:46   0:00 nginx: worker process</span><br><span class="line">nginx     18761  0.0  0.1 125472  3540 ?        S    20:46   0:00 nginx: worker process</span><br><span class="line">root      36485  0.0  0.0 113128  1196 pts/1    S+   21:36   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      36487  0.0  0.0 112664   944 pts/1    S+   21:36   0:00 grep nginx</span><br><span class="line"></span><br><span class="line">192.168.183.137 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">root      16688  0.0  0.1 120812  2228 ?        Ss   21:15   0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">nginx     16689  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">nginx     16690  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">nginx     16691  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">nginx     16692  0.0  0.1 123360  3524 ?        S    21:15   0:00 nginx: worker process</span><br><span class="line">root      17220  0.0  0.0 113172  1200 pts/1    S+   21:36   0:00 /bin/sh -c ps axu | grep nginx</span><br><span class="line">root      17222  0.0  0.0 112704   940 pts/1    S+   21:36   0:00 grep nginx</span><br></pre></td></tr></table></figure></p><h1 id="when"><a href="#when" class="headerlink" title="when"></a>when</h1><p>&ensp;&ensp;&ensp;&ensp;条件测试:如果需要根据变量、 facts或此前任务的执行结果来做为某task执行与否的前提时要用到条件测试,通过when语句实现，在task中使用，jinja2的语法<br>格式  </p><p>when语句<br>在task后添加when子句即可使用条件测试；when语句支持Jinja2表达式语法<br>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#tree templates/</span></span><br><span class="line">templates/</span><br><span class="line">├── httpd6.conf.j2</span><br><span class="line">└── httpd7.conf.j2</span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim httpd.yml </span></span><br><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: install </span><br><span class="line">      yum: name=httpd</span><br><span class="line">    - name: template1</span><br><span class="line">      template: src=httpd6.conf.j2 dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">      when: ansible_distribution_major_version==<span class="string">"6"</span></span><br><span class="line">      notify: restart</span><br><span class="line">    - name: template2</span><br><span class="line">      template: src=httpd7.conf.j2 dest=/etc/httpd/conf/httpd.conf</span><br><span class="line">      when: ansible_distribution_major_version==<span class="string">"7"</span></span><br><span class="line">      notify: restart</span><br><span class="line">    - name: service</span><br><span class="line">      service: name=httpd state=started enabled=yes</span><br><span class="line">  handlers:</span><br><span class="line">    - name: restart</span><br><span class="line">      service: name=httpd state=restart</span><br></pre></td></tr></table></figure></p><h1 id="迭代：with-items"><a href="#迭代：with-items" class="headerlink" title="迭代：with_items"></a>迭代：with_items</h1><p>迭代：当有需要重复性执行的任务时，可以使用迭代机制  </p><blockquote><p>对迭代项的引用，固定变量名为”item”<br>要在task中使用with_items给定要迭代的元素列表<br>列表格式：  </p><blockquote><p>字符串<br>字典  </p></blockquote></blockquote><p>示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: add several users</span><br><span class="line">  user: name=&#123;&#123; item &#125;&#125; state=present groups=wheel</span><br><span class="line">  with_items:</span><br><span class="line">    - testuser1</span><br><span class="line">    - testuser2</span><br></pre></td></tr></table></figure></p><p>迭代嵌套子变量<br>例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- hosts：websrvs</span><br><span class="line">  remote_user: root</span><br><span class="line">  tasks:</span><br><span class="line">    - name: add groups</span><br><span class="line">      group: name=&#123;&#123; item &#125;&#125;</span><br><span class="line">      with_items:</span><br><span class="line">        - group1</span><br><span class="line">        - group2</span><br><span class="line">        - group3</span><br><span class="line">    - name: add users</span><br><span class="line">      user: name=&#123;&#123; item.name &#125;&#125; group=&#123;&#123; item.group &#125;&#125;</span><br><span class="line">      with_items:</span><br><span class="line">        - &#123; name: <span class="string">'user1'</span>, group: <span class="string">'group1'</span> &#125;</span><br><span class="line">        - &#123; name: <span class="string">'user2'</span>, group: <span class="string">'group2'</span> &#125;</span><br><span class="line">        - &#123; name: <span class="string">'user3'</span>, group: <span class="string">'group3'</span> &#125;</span><br></pre></td></tr></table></figure></p><h1 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h1><p>&ensp;&ensp;&ensp;&ensp;ansible自1.2版本引入的新特性，用于层次性、结构化地组织playbook。roles能够根据层次型结构自动装载变量文件、tasks以及handlers等。要使用roles只需要在playbook中使用include指令即可。简单来讲,roles就是通过分别将变量、文件、任务、模板及处理器放置于单独的目录中，并可以便捷地include它们的一种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中。</p><p>复杂场景：建议使用roles，代码复用度高  </p><p>变更指定主机或主机组<br>如命名不规范维护和传承成本大<br>某些功能需多个Playbook，通过includes即可实现  </p><h2 id="角色-roles-：角色集合"><a href="#角色-roles-：角色集合" class="headerlink" title="角色(roles)：角色集合"></a>角色(roles)：角色集合</h2><p>roles/<br>  mysql/<br>  httpd/<br>  nginx/<br>  memcached/</p><h2 id="roles目录结构"><a href="#roles目录结构" class="headerlink" title="roles目录结构"></a>roles目录结构</h2><p>每个角色，以特定的层级目录结构进行组织<br>roles目录结构：</p><p>playbook.yml<br>roles/<br>project/<br>tasks/<br>files/<br>vars/<br>templates/<br>handlers/<br>default/ 不常用<br>meta/ 不常用  </p><h2 id="Roles各目录作用"><a href="#Roles各目录作用" class="headerlink" title="Roles各目录作用"></a>Roles各目录作用</h2><p>/roles/project/ :项目名称,有以下子目录<br>files/ ：存放由copy或script模块等调用的文件<br>templates/：template模块查找所需要模板文件的目录<br>tasks/：定义task,role的基本元素，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含<br>handlers/：至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含<br>vars/：定义变量，至少应该包含一个名为main.yml的文件；其它的文件需要在此文件中通过include进行包含<br>meta/：定义当前角色的特殊设定及其依赖关系,至少应该包含一个名为main.yml的文件，其它文件需在此文件中通过include进行包含<br>default/：设定默认变量时使用此目录中的main.yml文件  </p><h2 id="创建role"><a href="#创建role" class="headerlink" title="创建role"></a>创建role</h2><p>创建role的步骤  </p><ol><li>创建以roles命名的目录  </li><li>在roles目录中分别创建以各角色名称命名的目录，如webservers等  </li><li>在每个角色命名的目录中分别创建files、 handlers、 meta、 tasks、templates和vars目录；用不到的目录可以创建为空目录，也可以不创建  </li><li>在playbook文件中，调用各角色  </li></ol><h2 id="针对大型项目使用Roles进行编排"><a href="#针对大型项目使用Roles进行编排" class="headerlink" title="针对大型项目使用Roles进行编排"></a>针对大型项目使用Roles进行编排</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 playbook]<span class="comment">#mkdir roles</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#mkdir roles/httpd</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#tree roles/</span></span><br><span class="line">roles/</span><br><span class="line">└── httpd</span><br><span class="line"></span><br><span class="line">1 directories, 0 files</span><br><span class="line">[root@centos7 playbook]<span class="comment">#mkdir roles/httpd/&#123;files,tasks,templates,handlers,vars&#125;</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#tree roles/</span></span><br><span class="line">roles/</span><br><span class="line">└── httpd</span><br><span class="line">    ├── files</span><br><span class="line">    ├── handlers</span><br><span class="line">    ├── tasks</span><br><span class="line">    ├── templates</span><br><span class="line">    └── vars</span><br><span class="line"></span><br><span class="line">6 directories, 0 files</span><br><span class="line">[root@centos7 playbook]<span class="comment">#cd roles/httpd/</span></span><br><span class="line">[root@centos7 httpd]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">├── handlers</span><br><span class="line">├── tasks</span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br><span class="line"></span><br><span class="line">5 directories, 0 files</span><br><span class="line">[root@centos7 httpd]<span class="comment">#cd tasks/</span></span><br><span class="line">[root@centos7 tasks]<span class="comment">#touch user.yml group.yml config.yml install.yml service.yml</span></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim group.yml </span></span><br><span class="line">- name: useradd group</span><br><span class="line">  group: name=apache system=yes gid=80                   </span><br><span class="line">                                          </span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim user.yml </span></span><br><span class="line">- name: useradd user</span><br><span class="line">  user: name=apache group=apache shell=/sbin/nologin home=/usr/share/httpd system=yes                             </span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim install.yml </span></span><br><span class="line">- name: install package</span><br><span class="line">  yum: name=httpd</span><br><span class="line">                                                        </span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim config.yml </span></span><br><span class="line">- name: config file</span><br><span class="line">  copy: src=httpd.conf dest=/etc/httpd/conf/ backup=yes                       notify: restart</span><br><span class="line">                                             </span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim service.yml </span></span><br><span class="line">- name: service</span><br><span class="line">  service: name=httpd state=started enabled=yes</span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#ll</span></span><br><span class="line">total 20</span><br><span class="line">-rw-r--r-- 1 root root  76 Nov 24 00:41 config.yml</span><br><span class="line">-rw-r--r-- 1 root root  61 Nov 24 00:30 group.yml</span><br><span class="line">-rw-r--r-- 1 root root  42 Nov 24 00:39 install.yml</span><br><span class="line">-rw-r--r-- 1 root root  62 Nov 24 00:42 service.yml</span><br><span class="line">-rw-r--r-- 1 root root 107 Nov 24 00:34 user.yml</span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim main.yml</span></span><br><span class="line">- include: group.yml</span><br><span class="line">- include: user.yml</span><br><span class="line">- include: install.yml</span><br><span class="line">- include: config.yml</span><br><span class="line">- include: service.yml         </span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#cd ..</span></span><br><span class="line"></span><br><span class="line">[root@centos7 httpd]<span class="comment">#vim handlers/main.yml</span></span><br><span class="line">- name: restart</span><br><span class="line">  service: name=httpd state=restarted</span><br><span class="line"></span><br><span class="line">[root@centos7 httpd]<span class="comment">#cp /etc/httpd/conf/httpd.conf files/</span></span><br><span class="line">[root@centos7 httpd]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">│   └── httpd.conf</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tasks</span><br><span class="line">│   ├── config.yml</span><br><span class="line">│   ├── group.yml</span><br><span class="line">│   ├── install.yml</span><br><span class="line">│   ├── main.yml</span><br><span class="line">│   ├── service.yml</span><br><span class="line">│   └── user.yml</span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br><span class="line"></span><br><span class="line">5 directories, 8 files</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">[root@centos7 httpd]<span class="comment">#cd ../../</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim httpd_roles.yml</span></span><br><span class="line">---</span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  roles: </span><br><span class="line">    - role: httpd                                        </span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook httpd_roles.yml</span></span><br><span class="line"></span><br><span class="line">把httpd的文件复制一份到nginx里，然后改改</span><br><span class="line"></span><br><span class="line">[root@centos7 roles]<span class="comment">#cp -r httpd/ nginx/</span></span><br><span class="line">[root@centos7 roles]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── httpd</span><br><span class="line">│   ├── files</span><br><span class="line">│   │   └── httpd.conf</span><br><span class="line">│   ├── handlers</span><br><span class="line">│   │   └── main.yml</span><br><span class="line">│   ├── tasks</span><br><span class="line">│   │   ├── config.yml</span><br><span class="line">│   │   ├── group.yml</span><br><span class="line">│   │   ├── install.yml</span><br><span class="line">│   │   ├── main.yml</span><br><span class="line">│   │   ├── service.yml</span><br><span class="line">│   │   └── user.yml</span><br><span class="line">│   ├── templates</span><br><span class="line">│   └── vars</span><br><span class="line">└── nginx</span><br><span class="line">    ├── files</span><br><span class="line">    │   └── httpd.conf</span><br><span class="line">    ├── handlers</span><br><span class="line">    │   └── main.yml</span><br><span class="line">    ├── tasks</span><br><span class="line">    │   ├── config.yml</span><br><span class="line">    │   ├── group.yml</span><br><span class="line">    │   ├── install.yml</span><br><span class="line">    │   ├── main.yml</span><br><span class="line">    │   ├── service.yml</span><br><span class="line">    │   └── user.yml</span><br><span class="line">    ├── templates</span><br><span class="line">    └── vars</span><br><span class="line"></span><br><span class="line">12 directories, 16 files</span><br><span class="line">[root@centos7 roles]<span class="comment">#cd nginx/</span></span><br><span class="line">[root@centos7 nginx]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">│   └── httpd.conf</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tasks</span><br><span class="line">│   ├── config.yml</span><br><span class="line">│   ├── group.yml</span><br><span class="line">│   ├── install.yml</span><br><span class="line">│   ├── main.yml</span><br><span class="line">│   ├── service.yml</span><br><span class="line">│   └── user.yml</span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br><span class="line"></span><br><span class="line">5 directories, 8 files</span><br><span class="line">[root@centos7 nginx]<span class="comment">#rm -f tasks/&#123;group,user&#125;.yml</span></span><br><span class="line">[root@centos7 nginx]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">│   └── httpd.conf</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tasks</span><br><span class="line">│   ├── config.yml</span><br><span class="line">│   ├── install.yml</span><br><span class="line">│   ├── main.yml</span><br><span class="line">│   └── service.yml</span><br><span class="line">├── templates</span><br><span class="line">└── vars</span><br><span class="line"></span><br><span class="line">5 directories, 6 files</span><br><span class="line">[root@centos7 nginx]<span class="comment">#cp /etc/nginx/nginx.conf templates/nginx.conf.j2</span></span><br><span class="line">[root@centos7 nginx]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── files</span><br><span class="line">│   └── httpd.conf</span><br><span class="line">├── handlers</span><br><span class="line">│   └── main.yml</span><br><span class="line">├── tasks</span><br><span class="line">│   ├── config.yml</span><br><span class="line">│   ├── install.yml</span><br><span class="line">│   ├── main.yml</span><br><span class="line">│   └── service.yml</span><br><span class="line">├── templates</span><br><span class="line">│   └── nginx.conf.j2</span><br><span class="line">└── vars</span><br><span class="line"></span><br><span class="line">5 directories, 7 files</span><br><span class="line">[root@centos7 nginx]<span class="comment">#cd tasks/</span></span><br><span class="line">[root@centos7 tasks]<span class="comment">#tree</span></span><br><span class="line">.</span><br><span class="line">├── config.yml</span><br><span class="line">├── install.yml</span><br><span class="line">├── main.yml</span><br><span class="line">└── service.yml</span><br><span class="line"></span><br><span class="line">0 directories, 4 files</span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim config.yml </span></span><br><span class="line">- name: config file</span><br><span class="line">  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf                       notify: restart</span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim install.yml </span></span><br><span class="line">- name: install package</span><br><span class="line">  yum: name=nginx  </span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim main.yml  </span></span><br><span class="line">- include: install.yml                                                     </span><br><span class="line">- include: config.yml</span><br><span class="line">- include: service.yml</span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#vim service.yml </span></span><br><span class="line">- name: service</span><br><span class="line">  service: name=nginx state=started enabled=yes </span><br><span class="line"></span><br><span class="line">[root@centos7 tasks]<span class="comment">#cd ../../../</span></span><br><span class="line">[root@centos7 playbook]<span class="comment">#vim nginx_roles.yml</span></span><br><span class="line">- hosts: appsrvs</span><br><span class="line">  remote_user: root</span><br><span class="line"></span><br><span class="line">  roles:</span><br><span class="line">    - role: nginx     </span><br><span class="line"></span><br><span class="line">[root@centos7 playbook]<span class="comment">#ansible-playbook nginx_roles.yml</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;playbook概念&quot;&gt;&lt;a href=&quot;#playbook概念&quot; class=&quot;headerlink&quot; title=&quot;playbook概念&quot;&gt;&lt;/a&gt;playbook概念&lt;/h1&gt;&lt;p&gt;playbook是由一个或多个“play” 组成的列表&lt;br&gt;play的主要
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="ansible" scheme="http://yoursite.com/tags/ansible/"/>
    
      <category term="playbook" scheme="http://yoursite.com/tags/playbook/"/>
    
      <category term="role" scheme="http://yoursite.com/tags/role/"/>
    
  </entry>
  
  <entry>
    <title>Linux磁盘存储和文件系统</title>
    <link href="http://yoursite.com/2018/05/19/%E7%A3%81%E7%9B%98%E5%AD%98%E5%82%A8%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yoursite.com/2018/05/19/磁盘存储和文件系统/</id>
    <published>2018-05-18T16:00:00.000Z</published>
    <updated>2019-01-12T04:49:04.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h1><h2 id="设备类型"><a href="#设备类型" class="headerlink" title="设备类型"></a>设备类型</h2><p>（1）块设备：block ，存取单位“块”，磁盘</p><p>（2）字符设备：char ，存取单位“字符”，键盘</p><h2 id="设备号码"><a href="#设备号码" class="headerlink" title="设备号码"></a>设备号码</h2><p>（1）主设备号：major number, 标识设备类型</p><p>（2）次设备号：minor number, 标识同一类型下的不同设备</p><h2 id="机械硬盘和固态硬盘"><a href="#机械硬盘和固态硬盘" class="headerlink" title="机械硬盘和固态硬盘"></a>机械硬盘和固态硬盘</h2><p>&ensp;&ensp;&ensp;&ensp;机械硬盘（HDD）：即是传统普通硬盘，主要由：盘片，磁头，盘片转轴及控制电机，磁头控制器，数据转换器，接口，缓存等几个部分组成。机械硬盘中所有的盘片都装在一个旋转轴上，每张盘片之间是平行的，在每个盘片的存储面上有一个磁头，磁头与盘片之间的距离比头发丝的直径还小，所有的磁头联在一个磁头控制器上，由磁头控制器负责各个磁头的运动。磁头可沿盘片的半径方向运动，加上盘片每分钟几千转的高速旋转，磁头就可以定位在盘片的指定位置上进行数据的读写操作。数据通过磁头由电磁流来改变极性方式被电磁流写到磁盘上，也可以通过相反方式读取。硬盘为精密设备，进入硬盘的空气必须过滤。</p><p>&ensp;&ensp;&ensp;&ensp;固态硬盘（SSD）：用固态电子存储芯片阵列而制成的硬盘，由控制单元和存储单元（FLASH 芯片、DRAM 芯片）组成。固态硬盘在接口的规范和定义、功能及使用方法上与普通硬盘的完全相同，在产品外形和尺寸上也与普通硬盘一致。</p><p>比较：</p><p>相较于HDD ，SSD 在防震抗摔、传输速率、功耗、重量、噪音上有明显优势，SSD 传输速率性能是HDD 的2倍</p><p>相较于SSD ，HDD 在价格、容量、使用寿命上占有绝对优势</p><p>硬盘有价，数据无价，目前SSD 不能完全取代HHD</p><h2 id="设备文件"><a href="#设备文件" class="headerlink" title="设备文件"></a>设备文件</h2><p>① 磁盘设备的设备文件命名：  </p><ul><li>IDE: /dev/hd</li><li>SCSI,SATA,SAS,USB: /dev/sd</li></ul><p>② 不同磁盘标识：a-z,aa,ab…</p><p>​    /dev/sda, /dev/sdb, … /dev/sdaa,/dev/sdab…</p><p>同一设备上的不同分区：1,2, …</p><p>​    /dev/sda1, /dev/sda5</p><p>③ 机械硬盘存储术语</p><p>　　head ：磁头</p><p>　　track ：磁道</p><p>　　cylinder:  柱面</p><p>　　secotr:  扇区，512bytes（最小单位）</p><h2 id="两种寻址方法：CHS和LBA"><a href="#两种寻址方法：CHS和LBA" class="headerlink" title="两种寻址方法：CHS和LBA"></a>两种寻址方法：CHS和LBA</h2><p> CHS：</p><p>　　采用24bit 位寻址</p><p>　　其中前10 位表示cylinder ，中间8 位表示head ，后面6 位表示sector。 。</p><p>　　最大寻址空间8GB</p><p>LBA （logical block addressing）：</p><p>　　LBA 是一个整数，通过转换成CHS 格式完成磁盘具体寻址</p><p>　　LBA 采用48 个bit 位寻址</p><p>　　最大寻址空间128PB</p><p>由于CHS 寻址方式的寻址空间在大概8GB 以内，所以在磁盘容量小于大概8GB 时，可以使用CHS 寻址方式或是LBA 寻址方式；在磁盘容量大于大概8GB 时，则只能使用LBA 寻址方式</p><h2 id="使用分区空间"><a href="#使用分区空间" class="headerlink" title="使用分区空间"></a>使用分区空间</h2><p>1、 设备识别</p><p>2、 设备分区</p><p>3、 文件系统类型格式化</p><p>4、 在/etc/fstab 文件中创建条目</p><p>5、 mount 挂载新的文件系统</p><h1 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h1><h2 id="为什么分区"><a href="#为什么分区" class="headerlink" title="为什么分区"></a>为什么分区</h2><p>1、 优化I/O 性能</p><p>2、 实现磁盘空间配额限制</p><p>3、 提高修复速度</p><p>4、 隔离系统和程序</p><p>5、 安装多个OS</p><p>6、 采用不同文件系统</p><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>两种分区方式：MBR ，GPT</p><p>（1）MBR: Master Boot Record ，1982年， 使用32位表示扇区数 ， 分区不超过2T</p><p>（2）如何分区：按柱面</p><p>（2）0 磁道0 扇区：512bytes</p><p>　　    446bytes: boot loader</p><p>　　    64bytes ：分区表</p><p>　　    16bytes:  标识一个分区</p><p>　　    2bytes: 55AA，结束标志</p><p>（2）4 个主分区；3 主分区+1 扩展(N 个逻辑分区)</p><h3 id="MBR分区结构"><a href="#MBR分区结构" class="headerlink" title="MBR分区结构"></a>MBR分区结构</h3><p>&ensp;&ensp;&ensp;&ensp;硬盘主引导记录MBR 主要由 4 个部分组成</p><p>1、主引导程序（偏移地址0000H–0088H ），它负责从活动分区中装载，并运行系统引导程序。</p><p>2、出错信息数据区，偏移地址0089H–00E1H 为出错信息，00E2H–01BDH 全为0 字节。</p><p>3、分区表（DPT,Disk Partition Table ）含4 个分区项，偏移地址01BEH–01FDH, 每个分区表项长16 个字节，共64 字节为分区项1 、分区项2 、分区项3 、分区项4</p><p>4、 结束标志字，偏移地址01FE–01FF 的2 个字节值为结束标志 55AA</p><h3 id="GPT分区"><a href="#GPT分区" class="headerlink" title="GPT分区"></a>GPT分区</h3><p>1、GPT:GUID （Globals Unique Identifiers） partitiontable  支持128个分区，使用64 位，支持8Z（512Byte/block ）64Z （4096Byte/block）</p><p>2、使用128 位UUID(Universally Unique Identifier)  表示磁盘区 和分区 GPT 分区表自动备份在头和尾两份，并有CRC 校验位</p><p>3、UEFI ( 统一扩展固件接口) 硬件支持GPT ，使操作系统启动 </p><h2 id="管理分区"><a href="#管理分区" class="headerlink" title="管理分区"></a>管理分区</h2><h3 id="列出块设备"><a href="#列出块设备" class="headerlink" title="列出块设备"></a>列出块设备</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l /dev/sda 看硬盘分区表</span><br><span class="line">lsblk</span><br><span class="line">cat /proc/partitions  查看内核是否已经识别新的分区</span><br></pre></td></tr></table></figure><h3 id="创建分区使用的命令"><a href="#创建分区使用的命令" class="headerlink" title="创建分区使用的命令"></a>创建分区使用的命令</h3><p>（1） fdisk  创建MBR 分区</p><p> <code>fdisk /dev/sdX</code>进行分区（交互式），建立分区时　　</p><p>　　 m 帮助</p><p> 　　n 建立分区，建立分区时先选择 p主分区primary partition 或e 选择扩展分区extended，建议前3个建立逻辑分区，最后把所有空间给4扩展分区，有扩展分区可以创建多个逻辑分区。</p><p>　　 d 删除分区</p><p>　　 p 显示分区信息</p><p>　　 t 转换分区类型</p><p>　　 a 将指定分区设置/取消 活动分区   第一位为80活动</p><p>　　 L 查看分区类型</p><p>　　 o 重建分区表</p><p>　　 v 验证分区表，显示剩余没有被分区划分的扇区数量</p><p>　　 g 创建GPT格式的分区（centos7)不推荐使用，最好用gdisk</p><p>　　 q 退出不保存</p><p>　　 w 退出并保存,同步</p><p><strong>注：因为fdisk 是交互式创建分区，所以写入脚本时需要：</strong></p><p>　　<code>echo -e &quot;n\np\n1\n\n+1G\nw\n&quot; |fdisk /dev/sdb</code> 来实现非交互创建分区</p><p>（2） gdisk  创建GPT 分区（用法和fdisk相似）</p><p>　　　　n创建分区时，直接从2-128进行分区，不分主分区，扩展分区</p><p>（3） parted  高级分区操作（创建、复制、调整大小等等）实时性，小心使用，不用再w已经保存，可以直接非交互式创建分区，aix, amiga, bsd, dvh, gpt, mac, msdos, pc98, sun, loop 都能创建。（不常用）</p><p>　　<code>parted /dev/sdX</code></p><p>　　　　help 寻求帮助，有很清晰的帮助的信息。</p><p>　　　　mklabel help 有mklabel使用帮助信息</p><p>　　　　mklabel msdos 选择msdos 方式分区</p><p>　　　　mkpart 开始创建分区</p><p>　　　　rm 删除分区</p><p>　　　　p 查看分区信息</p><p>　　　　q 退出</p><p>（4）重置内存中分区信息（当系统正在使用的分区修改时，内存不会改变）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">centos 5和7可以使用</span><br><span class="line">新增分区时，同步 partx -a /dev/sdX</span><br><span class="line"></span><br><span class="line">centos6</span><br><span class="line">新增分区时，同步 kpartx -a /dev/DEVICE -f: force</span><br><span class="line"></span><br><span class="line">删除分区时，同步 partx -d /dev/sdX   所有系统都能用，centos 6也可以</span><br></pre></td></tr></table></figure><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><p>&ensp;&ensp;&ensp;&ensp;文件系统是操作系统用于明确存储设备或分区上的文件的方法和数据结构；即在存储设备上组织文件的方法。操作系统中负责管理和存储文件信息的软件结构称为文件管理系统，简称文件系统 </p><p>查看支持的文件系统：<code>/lib/modules/</code>uname –r<code>/kernel/fs</code></p><h2 id="文件系统类型"><a href="#文件系统类型" class="headerlink" title="文件系统类型"></a>文件系统类型</h2><p>（1） Linux 文件系统</p><ol><li>ext2(Extended file system) :适用于那些分区容量不是太大，更新也不频繁的情况，例如 /boot 分区</li><li>ext3:是 ext2 的改进版本，其支持日志功能，能够帮助系统从非正常关机导致的异常中恢复。它通常被用作通用的文件系统</li><li>ext4:是 ext 文件系统的最新版。提供了很多新的特性，包括纳秒级时间戳、创建和使用巨型文件(16TB)、最大1EB的文件系统，以及速度的提升</li><li>xfs：SGI，支持最大8EB的文件系统</li><li>btrfs（Oracle）, reiserfs, jfs（AIX）, swap </li></ol><p>（2） 光盘：iso9660</p><p>（3） Windows ：FAT32, exFAT,NTFS</p><p>（4） Unix: FFS （fast ）, UFS （unix ）, JFS2</p><p>（5） 网络文件系统：NFS, CIFS</p><p>（6） 集群文件系统：GFS2, OCFS2 （oracle） 例：11.11 淘宝</p><p>（7） 分布式文件系统： fastdfs,ceph, moosefs, mogilefs,glusterfs, Lustre</p><p>（8） RAW：未经处理或者未经格式化产生的文件系统</p><h2 id="文件系统分类"><a href="#文件系统分类" class="headerlink" title="文件系统分类"></a>文件系统分类</h2><ul><li>根据其是否支持”journal” 功能：</li></ul><p>　　日志型文件系统: ext3, ext4, xfs, …</p><p>　　非日志型文件系统: ext2, vfat</p><ul><li><p>文件系统的组成部分：</p><p>  ​    内核中的模块：ext4, xfs, vfat</p><p>  ​    用户空间的管理工具：mkfs.ext4, mkfs.xfs,mkfs.vfat</p></li><li><p>Linux的虚拟文件系统：VFS</p></li><li><p>查前支持的文件系统：cat /proc/filesystems </p></li></ul><h2 id="创建文件系统"><a href="#创建文件系统" class="headerlink" title="创建文件系统"></a>创建文件系统</h2><p>（1）mkfs 命令</p><p>　　mkfs.   能创建很多类文件系统 例：<code>mkfs.xfs /dev/sda1</code> 给/dev/sda1创建xfs类型的文件系统</p><p>　　　　  （ext# 　　xfs　　 btrfs　　 vfa）</p><p>　　mkfs -t 是个c写的脚本，就是调用mkfs. 命令 例：<code>mkfs -t ext4 /dev/sda1</code> 给/dev/sda1创建ext4类型的文件系统</p><p>　　　　      -f  强制重建，如果这个设备已经分过其他格式的文件系统了</p><p>（2）mke2fs ：创建文件系统，ext系列文件系统专用管理工具，</p><p>例：<code>mke2fs -t ext4 -L test /dev/sdc1</code>        给/dev/sdc1创建ext4卷标为test的文件系统</p><p>　　    -t {ext2|ext3|ext4} 格式</p><p>　　    -b {1024|4096} block快大小</p><p>　　    -L ‘LABEL’ 卷标</p><p>　　    -j: 于 相当于 -t ext3</p><p>　　　　        mkfs.ext3 = mkfs -t ext3 = mke2fs -j = mke2fs -t ext3</p><p>　　    -i #:  为数据空间中每多少个字节创建一个inode ；此大小不应该小于block 的大小</p><p>　　    -N # ：指定分区中创建多少个inode</p><p>　　    -I  一个inode 记录占用的磁盘空间大小，128—4096</p><p>　　    -m #:  默认5%, 为管理人员预留空间占总空间的百分比</p><p>　　    -O FEATURE[,…] ：启用指定特性（只能开启以下特性） -O ^FEATURE 禁用指定特性</p><p>（3）tune2fs：修改文件系统信息，重新设定ext 系列文件系统可调整参数的值  </p><p>例：<code>tune2fs -o acl /dev/sdb2</code>         开启/dev/sdb2的acl功能</p><p>　　    -l ：查看指定文件系统超级块信息；super block</p><p>　　    -L ‘LABEL’ ：修改卷标（ext）</p><p>　　　　        mkfs -L ‘LABEL’  或  mke2fs -L ‘LABEL’ 创建时设置卷标</p><p>　　　　            e2label /dev/sd# 查看卷标</p><p>　　　　            e2label /dev/sd# ‘LABEL’ 重命名卷标</p><p>　        -m # ：修预留给管理员的空间百分比</p><p>　　    -j:  将ext2 升级为ext3</p><p>　　    -O:  文件系统属性启用或禁用, –O ^has_journal</p><p>　　    -o:  调整文件系统的默认挂载选项，–o ^acl （centos7里默认开启acl   6 默认不开启）</p><p>　　    -U UUID:  修改UUID号</p><p>（4）查看信息</p><p>　　blkid：块设备属性信息查看（centos 7里默认显示sr0    6 里需blkid /dev/sr0显示光盘）</p><p>　　　　-U UUID:  根据指定的UUID 来查找对应的设备</p><p>　　　　-L LABEL ：根据指定的LABEL</p><p>　　 findfs：查找分区(ext)</p><p>　　　　findfs [options] LABEL=<label></label></p><p>　　　　findfs [options] UUID=<uuid></uuid></p><p> 　　dumpe2fs /dev/sda# 查看文件系统信息：superblock信息及block group信息</p><p>　　　　-h ：查看超级块，不显示block group而只显示superblock 与tune2fs -l一致</p><p>小知识：超级块就是文件系统的内置，指定文件系统类型</p><p>　　　　block group 0里有super block ，后奇数组都有备份，能用于修复</p><p>（5）文件系统检测和修复</p><p>　　常发生于死机或者非正常关机之后，挂载为文件系统有几率标记为“no clean” ”</p><p>　注意：一定不要在挂载状态下修复</p><p>fsck: File System Check<br>​    fsck.FS_TYPE<br>​    fsck -t FS_TYPE<br>​    -p 自动修复错误<br>​    -r 交互式修复错误<br>​    FS_TYPE 一定要与分区上已经文件类型相同</p><p>e2fsck：ext系列文件专用的检测修复工具<br>​    -y 自动回答为yes<br>​    -f 强制修复 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#lsblk</span></span><br><span class="line">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sdb      8:16   0  200G  0 disk </span><br><span class="line">├─sdb1   8:17   0   10G  0 part </span><br><span class="line">├─sdb2   8:18   0    2G  0 part </span><br><span class="line">└─sdb3   8:19   0    1K  0 part </span><br><span class="line">sda      8:0    0  200G  0 disk </span><br><span class="line">├─sda1   8:1    0    1G  0 part /boot</span><br><span class="line">├─sda2   8:2    0 48.8G  0 part /</span><br><span class="line">├─sda3   8:3    0 29.3G  0 part /data</span><br><span class="line">├─sda4   8:4    0    1K  0 part </span><br><span class="line">└─sda5   8:5    0    2G  0 part [SWAP]</span><br><span class="line">sr0     11:0    1  3.7G  0 rom  /media/CentOS_6.10_Final</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#dd if=/dev/zero of=/dev/sdb2 bs=1M count=20</span></span><br><span class="line">20+0 records <span class="keyword">in</span></span><br><span class="line">20+0 records out</span><br><span class="line">20971520 bytes (21 MB) copied, 0.110713 s, 189 MB/s</span><br><span class="line"></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#tune2fs -l /dev/sdb2</span></span><br><span class="line">tune2fs 1.41.12 (17-May-2010)</span><br><span class="line">tune2fs: Bad magic number <span class="keyword">in</span> super-block <span class="keyword">while</span> trying to open /dev/sdb2</span><br><span class="line">Couldn<span class="string">'t find valid filesystem superblock.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[root@CentOS6 ~]#fsck /dev/sdb2 -y</span></span><br><span class="line"><span class="string">fsck from util-linux-ng 2.17.2</span></span><br><span class="line"><span class="string">e2fsck 1.41.12 (17-May-2010)</span></span><br><span class="line"><span class="string">fsck.ext2: Superblock invalid, trying backup blocks...</span></span><br><span class="line"><span class="string">/dev/sdb2 was not cleanly unmounted, check forced.</span></span><br><span class="line"><span class="string">Resize inode not valid.  Recreate? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Pass 1: Checking inodes, blocks, and sizes</span></span><br><span class="line"><span class="string">Root inode is not a directory.  Clear? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Pass 2: Checking directory structure</span></span><br><span class="line"><span class="string">Pass 3: Checking directory connectivity</span></span><br><span class="line"><span class="string">Root inode not allocated.  Allocate? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/lost+found not found.  Create? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Pass 4: Checking reference counts</span></span><br><span class="line"><span class="string">Pass 5: Checking group summary information</span></span><br><span class="line"><span class="string">Block bitmap differences:  +(0--616)</span></span><br><span class="line"><span class="string">Fix? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Free blocks count wrong for group #0 (32144, counted=32149).</span></span><br><span class="line"><span class="string">Fix? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Free blocks count wrong (517078, counted=517083).</span></span><br><span class="line"><span class="string">Fix? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Inode bitmap differences:  +1 +(3--10)</span></span><br><span class="line"><span class="string">Fix? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Free inodes count wrong for group #0 (7732, counted=7733).</span></span><br><span class="line"><span class="string">Fix? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Directories count wrong for group #0 (3, counted=2).</span></span><br><span class="line"><span class="string">Fix? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Free inodes count wrong (131636, counted=131637).</span></span><br><span class="line"><span class="string">Fix? yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/dev/sdb2: ***** FILE SYSTEM WAS MODIFIED *****</span></span><br><span class="line"><span class="string">/dev/sdb2: 11/131648 files (0.0% non-contiguous), 9045/526128 blocks</span></span><br></pre></td></tr></table></figure><h2 id="挂载，卸载"><a href="#挂载，卸载" class="headerlink" title="挂载，卸载"></a>挂载，卸载</h2><p>任何块设备都不能直接访问，需挂载在目录上访问</p><p>挂载: 将额外文件系统与根文件系统某现存的目录建立起关联关系，进而使得此目录做为其它文件访问入口的行为（挂载的设备必须有文件系统）</p><p>卸载:为解除此关联关系的过程</p><p>mount [-选项] DEVICE（设备） MOUNT_POINT（挂载点）</p><p>（1）device ：指明要挂载的设备</p><ul><li><p>　　设备文件：例如/dev/sda5</p></li><li><p>　　卷标：-L ‘LABEL’, 如 例如 -L mage</p></li><li><p>　　UUID, -U ‘UUID’</p></li></ul><p>（2）挂载点下原有文件在挂载完成后会被临时隐藏</p><p>　　事先存在；建议使用空目录，进程正在使用中的设备无法被卸载</p><p>（3）/etc/mtab： 文件显示当前已挂载的所有设备（在CentOS 7中，是/proc/mounts的软连接，查看结果一样，centos 6中，ASCII text，查询结果和/proc/mounts不一样）</p><h3 id="mount：挂载常用命令选项"><a href="#mount：挂载常用命令选项" class="headerlink" title="mount：挂载常用命令选项"></a>mount：挂载常用命令选项</h3><p>查看挂载情况：findmnt  查看所有设备挂载情况（树状结构显示）</p><p>  　　　　　　　　 findmnt 设备   查看单个设备的挂载情况</p><p> 　　　　　　  mount ：查看所有设备挂载情况</p><p>  　　　　　　 cat /proc/mounts：查看内核追踪到的已挂载的所有设备</p><p>mount -选项 设备 挂载点</p><p>　　-t：vsftype ：指定要挂载的设备上的文件系统类型（不常用，不加-t默认自带自己的文件系统类型），有时，系统报错提示，没指定文件系统类型，-t指定后，仍然有错。（注释1）</p><p>　　-r：readonly ，只读挂载，不能进行其他操作，和权限无关，介质只能读，多用于冷备份。在mount 查询时时显示 ro</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：mount -r /dev/sdb1 /app/sdb1将/dev/sdb1只读挂载到/app/sdb上</span><br></pre></td></tr></table></figure><p>　　-w：read and write,  读写挂载（defaults默认）</p><p>　　-n：隐藏挂载信息不显示 ，但在/proc/mounts可以查到，卸载只能 umount /app/sdb2（挂载点）</p><p>　　-a：自动挂载/etc/fstab文件没有挂载的设备( 定义在了/etc/fstab文件中，且挂载选项中有auto 功能，默认中包括) ，不看已挂载过的设备，如果在/etc/fstab里挂载过的设备修改了设置，不刷新；</p><p>如果想刷新修改过已挂载的设备，mount -o remount /dev/sdX（挂载点）</p><p>　　-L ‘LABEL’： 以卷标指定挂载设备</p><p>　　-U ‘UUID’：以UUID 指定要挂载的设备</p><p>　　-B  –bind：绑定目录到另一个目录上，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例： mount -B /var/ftp/pub /app/apache     /app/apache就是显示 /var/ftp/pub目录的东西</span><br></pre></td></tr></table></figure><p>　　 -o options：( 挂载文件系统的选项) ，多个选项使用逗号分隔</p><p>　　　　async（defaults)，sync  异步，同步，内存更改时，同时写磁盘（可以用于重要数据）</p><p>　　　　atime(defaults),noatime  是否在读访问时更新atime</p><p>　　　　diratime(defaults),nodiratime  目录的访问时间戳</p><p>　　　　auto(defaults)/noauto 写在/etc/fstab当中的分区，是否在mount -a时被挂载</p><p>　　　　exec(defatuls)/noexec 在该分区所挂载的目录中的脚本是否可以执行。</p><p>　　　　dev(defaults)/nodev：是否支持在此文件系统上使用设备文件</p><p>　　　　suid(defaults)/nosuid：是否支持suid和sgid权限</p><p>　　　　ro：只读 rw：读写(defaults)</p><p>　　　　nouser(defaults)/user：是否允许普通用户挂载此设备，默认管理员才能挂载</p><p>　　　　acl（centos 7）/^acl（centos 6以下）：启用/禁用此文件系统上的acl功能</p><p>​    defaults：相当于rw, suid, dev, exec, auto, nouser, async </p><p>　　-o remount,选项：重新挂载，修改功能选项（和/etc/fstab选项冲突，则覆盖，不冲突就增加）  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：mount -o remount,ro /dev/sdb1</span><br></pre></td></tr></table></figure><h3 id="umount-卸载"><a href="#umount-卸载" class="headerlink" title="umount 卸载"></a>umount 卸载</h3><ol><li><p>卸载时，若有正在进行的进程，不能卸载</p></li><li><p>查看正在访问指定文件系统的进程：</p></li></ol><p>　　lsof 设备或挂载点都可以</p><p>　　fuser -v 挂载点</p><ol start="3"><li>终止所有在正访问指定的文件系统的进程：</li></ol><p>　　fuser -km 设备或挂载点都可以</p><ol start="4"><li>终止完所有进程就可以卸载： umount DEVICE</li></ol><h3 id="etc-fstab-文件挂载配置文件"><a href="#etc-fstab-文件挂载配置文件" class="headerlink" title="/etc/fstab 文件挂载配置文件"></a>/etc/fstab 文件挂载配置文件</h3><p>（1）/etc/fstab 每行定义一个要挂载的文件系统</p><p>mount -a 自动挂载/etc/fstab文件没有挂载的设备，不管已挂载过的设备</p><p>　　如果想刷新修改过已挂载的设备，<code>mount -o remount /dev/sdX</code>（或挂载点）</p><p>（2）格式（6列）：</p><ul><li>要挂载的设备或伪文件系统：设备名称，LABEL，UUID，伪文件系统名称</li></ul><ul><li>挂载点（扩展为swap）</li></ul><ul><li><p>文件系统类型（auto 寻找默认的），</p><p>  　　普通设备挂载：ext#/xfs 等文件系统类型</p><p>  　　交换分区 swap：swap</p><p>  　　网络挂载地址 linux之间：nfs，windos挂载：cifs</p><p>  　　光盘 iso9660，文件 cifs</p></li><li><p>挂载选项：defaults 有需要的功能可以添加，不能为空</p></li></ul><ul><li>转储频率： 0：（不做备份 ）1：（每天转储） 2：（每隔一天转储）</li></ul><ul><li><p>开机时自检顺序：（非0），允许的数字是0, 1, 和2（如果开机系统自检不过，就无法正常开机）</p><p>  ​    0：不自检</p><p>  ​    1：首先自检；一般只有rootfs才用</p><p>  ​    2：非rootfs使用 </p></li></ul><p>（3）如果设备不小心被破坏，开机自检不过，无法正常启用，该怎么办？</p><p>原理很简单，只需要修复一下文件系统就好了，（如果不能修复，可以去/etc/fstab中把自检改为0）具体操作如下：</p><p>① 手动破坏设备 dd if=/dev/zero of=/dev/sdc1 bs=1 count=2048</p><p>② 开机过程，遇到错误提示</p><p>③ 进入shell 操作，进行修复 </p><p>（4）实验：迁移/home 家目录，从 / 下移到另一个磁盘，如/dev/sda6</p><p>① init 1 进入单用户模式，防止自己在迁移时，其他用户进行操作，导致迁移后缺失东西。</p><p>② 分区 /dev/sda6   fdisk</p><p>③ 文件系统格式化 mkfs.ext4 /dev/sda6</p><p>④ 挂载在临时目录上/mnt ，把/home 下东西cp -a 到/mnt 目录</p><p>⑤ 把现有/home 东西移走，卸载 /mnt ，把/dev/sda6 挂到 /home 下，并写入/etc/fstab，开机自动挂载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=328a3f17-3e4e-426d-9538-c44be3e6465b   /home    ext4    defaults        0  2</span><br></pre></td></tr></table></figure><p>⑥ reboot或init 5 完成/home 搬迁</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;磁盘结构&quot;&gt;&lt;a href=&quot;#磁盘结构&quot; class=&quot;headerlink&quot; title=&quot;磁盘结构&quot;&gt;&lt;/a&gt;磁盘结构&lt;/h1&gt;&lt;h2 id=&quot;设备类型&quot;&gt;&lt;a href=&quot;#设备类型&quot; class=&quot;headerlink&quot; title=&quot;设备类型&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="磁盘" scheme="http://yoursite.com/tags/%E7%A3%81%E7%9B%98/"/>
    
      <category term="文件系统" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="分区" scheme="http://yoursite.com/tags/%E5%88%86%E5%8C%BA/"/>
    
      <category term="mount" scheme="http://yoursite.com/tags/mount/"/>
    
  </entry>
  
  <entry>
    <title>软件包管理</title>
    <link href="http://yoursite.com/2018/04/29/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2018/04/29/软件包管理/</id>
    <published>2018-04-28T16:00:00.000Z</published>
    <updated>2019-01-12T04:38:00.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态和动态链接"><a href="#静态和动态链接" class="headerlink" title="静态和动态链接"></a>静态和动态链接</h1><p>&ensp;&ensp;&ensp;&ensp;链接主要作用是吧各个模块之间互相引用的部分处理好，使得各个模块之间能够正确的链接，分为静态和动态</p><h2 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h2><ol><li><p>​    把程序对应的依赖库复制一份到包 </p></li><li><p>​    以.a为后缀</p></li><li><p>​    嵌入程序包 </p></li><li><p>​        升级难 需重新编译</p></li><li><p>​    占用空间多 迁移容易</p></li></ol><h2 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h2><ol><li>只把依赖加做一个动态链接</li><li>以.so为后缀</li><li>连接指向</li><li>占用空间少  升级方便</li></ol><p>若一个库被删，那么所有依赖此库的命令都受影响（使用相对较多）</p><h1 id="软件包"><a href="#软件包" class="headerlink" title="软件包"></a>软件包</h1><h2 id="包命名和工具"><a href="#包命名和工具" class="headerlink" title="包命名和工具"></a>包命名和工具</h2><ol><li><p>源代码： name-VERSION.tar.gz|bz2|xz</p></li><li><p>rpm包命名方式<br> name-VERSION-release.arch.rpm</p></li></ol><p>例 bash-4.2.46-19.e17.x86_64.rpm</p><ol start="3"><li>包：分类和拆包</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application-VERSION-ARCH.rpm主包</span><br><span class="line">Application-devel-VERSION-ARCH.rpm开发子包</span><br><span class="line">Application-utils-VERSION-ARHC.rpm其它子包</span><br><span class="line">Application-libs-VERSION-ARHC.rpm其它子包</span><br></pre></td></tr></table></figure><ol start="4"><li><p>包之间：可能存在依赖关系，甚至循环依赖</p><p> 解决依赖包管理工具：</p></li></ol><ul><li>yum： rpm包管理器的前端工具</li><li>apt-get： deb包管理器前端工具</li><li>zypper: suse上的rpm前端管理工具</li><li>dnf: Fedora 18+ rpm包管理器前端管理工具 </li></ul><h2 id="库文件"><a href="#库文件" class="headerlink" title="库文件"></a>库文件</h2><p>查看二进制程序所依赖的库文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd /PATH/TO/BINARY_FILE</span><br></pre></td></tr></table></figure><p>管理及查看本机装载的库文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ldconfig加载库文件</span><br><span class="line">/sbin/ldconfig -p显示本机已经缓存的所有可用库文件名及文件路径映射关系</span><br><span class="line"></span><br><span class="line">/etc/ld.so.conf</span><br><span class="line">/etc/ld.so.conf.d/*.conf配置文件</span><br><span class="line"></span><br><span class="line">/etc/ld.so.cache缓存文件</span><br></pre></td></tr></table></figure><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><p>&ensp;&ensp;&ensp;&ensp;功能：将编译好的应用程序的各组成文件打包一个或几个程序包文件，从而方便快捷地实现程序包的安装、卸载、查询、升级和校验等管理操作</p><h3 id="包文件组成-每个包独有"><a href="#包文件组成-每个包独有" class="headerlink" title="包文件组成 (每个包独有)"></a>包文件组成 (每个包独有)</h3><ol><li>RPM包内的文件</li><li>RPM的元数据，如名称，版本，依赖性，描述等</li><li>安装或卸载时运行的脚本</li></ol><h3 id="数据库-公共-：-var-lib-rpm"><a href="#数据库-公共-：-var-lib-rpm" class="headerlink" title="数据库(公共)： /var/lib/rpm"></a>数据库(公共)： /var/lib/rpm</h3><ol><li>程序包名称及版本</li><li>依赖关系</li><li>功能说明</li><li>包安装后生成的各文件路径及校验码信息</li></ol><h2 id="程序包的来源"><a href="#程序包的来源" class="headerlink" title="程序包的来源"></a>程序包的来源</h2><h3 id="管理程序包的方式"><a href="#管理程序包的方式" class="headerlink" title="管理程序包的方式"></a>管理程序包的方式</h3><ol><li>使用包管理器： rpm</li><li>使用前端工具： yum, dnf</li></ol><h3 id="获取程序包的途径"><a href="#获取程序包的途径" class="headerlink" title="获取程序包的途径"></a>获取程序包的途径</h3><ol><li>系统发版的光盘或官方的服务器</li></ol><p>CentOS镜像：</p><p><a href="https://www.centos.org/download/" target="_blank" rel="noopener">https://www.centos.org/download/</a></p><p><a href="http://mirrors.aliyun.com" target="_blank" rel="noopener">http://mirrors.aliyun.com</a></p><p><a href="http://mirrors.sohu.com" target="_blank" rel="noopener">http://mirrors.aliyun.com</a></p><p><a href="http://mirrors.163.com" target="_blank" rel="noopener">http://mirrors.aliyun.com</a></p><ol start="2"><li><p>项目官方站点</p></li><li><p>第三方组织</p></li></ol><p>Fedora-EPEL<br>Extra Packages for Enterprise Linux<br>Rpmforge:RHEL推荐，包很全<br>搜索引擎：<br><a href="">http://pkgs.org</a></p><p><a href="">http://rpmfind.net</a></p><p><a href="">http://rpm.pbone.net</a></p><p><a href="">https://sourceforge.net/</a></p><ol start="4"><li>自己制作</li></ol><p><strong>注意：第三方包建议要检查其合法性包括来源合法性,程序包的完整性</strong> </p><h1 id="RPM包管理器"><a href="#RPM包管理器" class="headerlink" title="RPM包管理器"></a>RPM包管理器</h1><h2 id="包安装"><a href="#包安装" class="headerlink" title="包安装"></a>包安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm &#123;-i|--install&#125; [install-options] PACKAGE_FILE…</span><br></pre></td></tr></table></figure><p>-i    安装选项<br>​    -v    显示过程<br>​    -h    以#显示程序包管理执行进度<br>[install-options]</p><ol><li>–test    测试安装，但不真正执行安装，即dry run模式 操作走了一次但没装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：rpm -i --<span class="built_in">test</span> vsftab-2*</span><br></pre></td></tr></table></figure><ol start="2"><li>–nodeps    忽略依赖关系</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：rpm -ivh httpd* --nodeps 能安装但是后期可能不能用</span><br></pre></td></tr></table></figure><ol start="3"><li>–replacepkgs | replacefiles    若删掉了包中的文件重新装包系统提示已经存在，此时可用此命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：rpm -ivh --replacepkgs tree*</span><br></pre></td></tr></table></figure><p>replacefiles替代文件 即安装两个包，有同一个相同文件同时写入同一路径下</p><p>​    此时系统提示不能安装便可用此选项强制安装并覆盖</p><ol start="4"><li><p>–nosignature: 不检查来源合法性</p></li><li><p>–nodigest：不检查包完整性</p></li><li><p>–noscripts：不执行程序包脚本</p><p> %pre: 安装前脚本； –nopre</p><p> %post: 安装后脚本； –nopost</p><p> %preun: 卸载前脚本； –nopreun</p><p> %postun: 卸载后脚本； –nopostun</p></li></ol><p>rpm -ivh name1 name2… 一次安装多个包</p><p>rpm -V packagesname 查看包属性的变化</p><h2 id="包升级（不建议使用）"><a href="#包升级（不建议使用）" class="headerlink" title="包升级（不建议使用）"></a>包升级（不建议使用）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm &#123;-U|--upgrade&#125; [install-options] PACKAGE_FILE…</span><br><span class="line">rpm &#123;-F|--freshen&#125; [install-options] PACKAGE_FILE…</span><br></pre></td></tr></table></figure><ol><li><p>upgrade：安装有旧版程序包，则“升级”</p><p> 如果不存在旧版程序包，则“安装”</p></li><li><p>freshen：安装有旧版程序包，则“升级”</p><p> 如果不存在旧版程序包，则不执行升级操作</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh PACKAGE_FILE …</span><br><span class="line">rpm -Fvh PACKAGE_FILE …</span><br></pre></td></tr></table></figure><p>​    –oldpackage        降级</p><p>​    –force    强制安装</p><h3 id="升级注意项"><a href="#升级注意项" class="headerlink" title="升级注意项"></a>升级注意项</h3><ol><li><p>不要对内核做升级操作； Linux支持多内核版本并存，因此，对直接安装新版本内核</p></li><li><p>如果原程序包的配置文件安装后曾被修改，升级时，新版本的提供的同一个配置文件并不会直接覆盖老版本的配置文件，而把新版本的文件重命名(FILENAME.rpmnew)后保留 </p></li></ol><h2 id="包查询"><a href="#包查询" class="headerlink" title="包查询"></a>包查询</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm &#123;-q|--query&#125; [select-options][query-options]</span><br></pre></td></tr></table></figure><p>[select-options]</p><ol><li>-a    所有包</li><li>-f    查看指定的文件由哪个程序包安装生成   配合-P使用 后面跟磁盘上的某个文件（也可路径）</li><li>-p rpmfile    针对尚未安装的程序包文件做查询操作   后面跟文件名（包的完整名）而不是包名</li><li>–whatprovides CAPABILITY        查询指定的CAPABILITY由哪个包所提供</li><li>–whatrequires CAPABILITY        查询指定的CAPABILITY（相当于关键字）被哪个包所依赖</li></ol><p>rpm2cpio 包文件|cpio –itv 预览包内文件  相当于把rpm包转化成cpio格式</p><p>rpm2cpio 包文件|cpio –id “*.conf”     释放包内文件</p><p>[query-options]</p><ol><li>–changelog：查询rpm包的信息变化的过程</li><li>-c: 查询程序的配置文件</li><li>-d: 查询程序的文档</li><li>-i: information</li><li>-l: 查看指定的程序包安装后生成的所有文件</li><li>–scripts：程序包自带的脚本</li><li>–provides: 列出指定程序包所提供的CAPABILITY（能力）</li><li>-R: 查询指定的程序包所依赖的CAPABILITY</li></ol><p>例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql tree 查询tree包下的文件</span><br><span class="line">rpm -qR tree 查询tree所依赖的能力</span><br></pre></td></tr></table></figure><h2 id="包卸载"><a href="#包卸载" class="headerlink" title="包卸载"></a>包卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm &#123;-e|--erase&#125;[--allmatches][–-nodeps][–-noscripts][–-notriggers][–-<span class="built_in">test</span>] PACKAGE_NAME …</span><br></pre></td></tr></table></figure><p>​    -e 卸载 后面直接跟包名就可以不用写完整的名字</p><p>​    –allmatches 若一个包有多个版本使用此选项可将全部卸载</p><h2 id="包校验"><a href="#包校验" class="headerlink" title="包校验"></a>包校验</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm &#123;-V|--verify&#125; [select-options][verify-options]检查包的属性变化 后面跟包名</span><br></pre></td></tr></table></figure><p>S file Size differs</p><p>M Mode differs (includes permissions and file type)</p><p>5 digest (formerly MD5 sum) differs</p><p>D Device major/minor number mismatch</p><p>L readLink(2) path mismatch</p><p>U User ownership differs</p><p>G Group ownership differs</p><p>T mTime differs</p><p>P capabilities differ</p><h3 id="导入所需要公钥"><a href="#导入所需要公钥" class="headerlink" title="导入所需要公钥"></a>导入所需要公钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa <span class="string">"gpg-pubkey*"</span></span><br><span class="line"></span><br><span class="line">rpm -K|checksig rpmfile 检查包的完整性和签名（若显示not ok）则此文件存在一定的风险建议不装</span><br><span class="line">若执行-K检查命令则必先执行以下命令</span><br><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line">或 rpm --import /run/media/root/centos\7\x86_64/RPM-GPG-Centos-6</span><br><span class="line"></span><br><span class="line">rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line">或 rpm --import /run/media/root/centos\7\x86_64/RPM-GPG-KEY-centos-7</span><br></pre></td></tr></table></figure><h2 id="rpm数据库"><a href="#rpm数据库" class="headerlink" title="rpm数据库"></a>rpm数据库</h2><ol><li>数据库重建</li></ol><p>​    /var/lib/rpm</p><ol start="2"><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm &#123;--initdb|--rebuilddb&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​    initdb: 初始化</p><p>如果事先不存在数据库，则新建之;否则，不执行任何操作</p><p>​    rebuilddb：重建已安装的包头的数据库索引目录 </p><h1 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h1><p>&ensp;&ensp;&ensp;&ensp;yum(Yellow dog Updater,Modified)主要的功能是方便添加、删除和更新rpm软件包。可以解决软件包依存问题，更便于管理大量的系统更新问题。它可以同时配置多个仓库或叫资源库(repository)，就是存放更新和依存的软件包的地方。</p><h2 id="yum的由来"><a href="#yum的由来" class="headerlink" title="yum的由来"></a>yum的由来</h2><p>&ensp;&ensp;&ensp;&ensp;为了解决程序间的依赖关系，RedHat曾推出了一款名为update的工具。这款工具虽然达到了目的，但用户体验并不是很好。后来一个基于RedHat的二次发行版yellowdog，由此也推出了一个工具：yellowdog update modifier，简写为yum. 由于比update好用，于是便流行开来。后来导致RedHat也弃update不用而使用yum</p><h2 id="yum的特性"><a href="#yum的特性" class="headerlink" title="yum的特性"></a>yum的特性</h2><p>&ensp;&ensp;&ensp;&ensp;yum相对于rpm来说：rpm为基础包管理器，yum则是rpm的前端工具。yum无法独立存在系统,不允许有两个yum命令同时运行，如果有两个，第二次运行时会报错。这是为了防止yum之间的冲突</p><h2 id="yum的配置文件"><a href="#yum的配置文件" class="headerlink" title="yum的配置文件"></a>yum的配置文件</h2><p>/etc/yum.conf：为所有仓库提供公共配置</p><p>/etc/yum.repos.d/*.repo：为仓库的指向提供配置</p><p>yum repository: yum repo，存储了众多rpm包，以及包的相关的元数据文件（放置于特定目录repodata下）<br>文件服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://</span><br><span class="line">https://</span><br><span class="line">ftp://</span><br><span class="line">file://</span><br></pre></td></tr></table></figure><p>yum客户端配置文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.conf：为所有仓库提供公共配置</span><br><span class="line">[main]语句块名称</span><br><span class="line">cachedir=/var/cache/yum/<span class="variable">$basearch</span>/<span class="variable">$releasever</span> <span class="comment">#缓存文件夹</span></span><br><span class="line">keepcache=0  <span class="comment">#1表示rpm包保存 0表示不保存</span></span><br><span class="line">debuglevel=2  <span class="comment">#调试一般不用管</span></span><br><span class="line">logfile=/var/<span class="built_in">log</span>/yum.log  <span class="comment">#yum的日志</span></span><br><span class="line">exactarch=1</span><br><span class="line">obsoletes=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">plugins=1</span><br><span class="line">installonly_limit=5  <span class="comment">#同时可装5个包</span></span><br><span class="line">bugtracker_url=http://bugs.centos.org/set_project.php?project_id=19&amp;ref=http://bugs.centos.org/bug_report_page.php?category=yum</span><br><span class="line">distroverpkg=centos-release</span><br></pre></td></tr></table></figure></p><p>/etc/yum.repos.d/*.repo：为仓库的指向提供配置 后缀必须为.repo</p><p>仓库指向的定义：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[repositoryID] <span class="comment">#第一行用一个单词不允许出现空格名字可以随意</span></span><br><span class="line">name=Some name <span class="keyword">for</span> this repository   <span class="comment">#描述语句</span></span><br><span class="line">baseurl=url://path/to/repository/第二行路径     <span class="comment">#repodata的父目录就是路径</span></span><br><span class="line">enabled=&#123;1|0&#125;   <span class="comment">#0表示禁用1表示启用</span></span><br><span class="line">gpgcheck=&#123;1|0&#125;  <span class="comment">#第三行是否检查包的完整性0表示不检查</span></span><br><span class="line">gpgkey=URL</span><br><span class="line">enablegroups=&#123;1|0&#125;</span><br><span class="line">failovermethod=&#123;roundrobin|priority&#125;</span><br><span class="line"><span class="comment">#    roundrobin：意为随机挑选，默认值</span></span><br><span class="line"><span class="comment">#    priority:按顺序访问</span></span><br><span class="line">cost= 默认为1000</span><br></pre></td></tr></table></figure></p><h2 id="yum源"><a href="#yum源" class="headerlink" title="yum源"></a>yum源</h2><p><a href="http://mirrors.aliyun.com/repo/" target="_blank" rel="noopener">阿里云repo文件</a></p><p>CentOS系统的yum源</p><p><a href="https://mirrors.aliyun.com/centos/7/os/x86_64/" target="_blank" rel="noopener">阿里云</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/centos/7/os/x86_64/" target="_blank" rel="noopener">清华大学</a></p><p>EPEL的yum源</p><p><a href="https://mirrors.aliyun.com/epel/$releasever/x86_64" target="_blank" rel="noopener">阿里云</a></p><h2 id="yum-命令"><a href="#yum-命令" class="headerlink" title="yum 命令"></a>yum 命令</h2><p>显示仓库列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist [all|enabled|disabled]</span><br></pre></td></tr></table></figure></p><p>显示程序包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum list</span><br><span class="line">yum list [all | glob_exp1] [glob_exp2] […]</span><br><span class="line">yum list &#123;available|installed|updates&#125; [glob_exp1] […]</span><br></pre></td></tr></table></figure></p><p>安装程序包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install package1 [package2] […]</span><br><span class="line">yum reinstall package1 [package2] […] (重新安装)</span><br></pre></td></tr></table></figure></p><p>升级程序包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum update [package1] [package2] […]</span><br><span class="line">yum downgrade package1 [package2] […] (降级)</span><br></pre></td></tr></table></figure></p><p>检查可用升级<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum check-update</span><br></pre></td></tr></table></figure></p><p>卸载程序包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove | erase package1 [package2] […]</span><br></pre></td></tr></table></figure></p><p>查看程序包information<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum info […]</span><br></pre></td></tr></table></figure></p><p>查看指定的特性(可以是某文件)是由哪个程序包所提供<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum provides | whatprovides feature1 [feature2] […]</span><br></pre></td></tr></table></figure></p><p>清理本地缓存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">清除/var/cache/yum/<span class="variable">$basearch</span>/<span class="variable">$releasever</span>缓存</span><br><span class="line">yum clean [ packages | metadata | expire-cache | rpmdb | plugins | all ]</span><br></pre></td></tr></table></figure></p><p>构建缓存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure></p><p>搜索:以指定的关键字搜索程序包名及summary信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search string1 [string2] […]</span><br></pre></td></tr></table></figure></p><p>查看指定包所依赖的capabilities<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum deplist package1 [package2] […]</span><br></pre></td></tr></table></figure></p><p>查看yum事务历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="built_in">history</span> [info|list|packages-list|packages-info|</span><br><span class="line">summary|addon-info|redo|undo|</span><br><span class="line">rollback|new|sync|stats]</span><br><span class="line">yum <span class="built_in">history</span></span><br><span class="line">yum <span class="built_in">history</span> info 6</span><br><span class="line">yum <span class="built_in">history</span> undo 6</span><br></pre></td></tr></table></figure></p><p>日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/yum.log</span><br></pre></td></tr></table></figure></p><p>安装及升级本地程序包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum localinstall rpmfile1 [rpmfile2] […]</span><br><span class="line">(用install替代)</span><br><span class="line">yum localupdate rpmfile1 [rpmfile2] […]</span><br><span class="line">(用update替代)</span><br></pre></td></tr></table></figure></p><p>包组管理的相关命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall group1 [group2] […]</span><br><span class="line">yum groupupdate group1 [group2] […]</span><br><span class="line">yum grouplist [hidden] [groupwildcard] […]</span><br><span class="line">yum groupremove group1 [group2] […]</span><br><span class="line">yum groupinfo group1 […]</span><br></pre></td></tr></table></figure></p><p>yum的命令行选项：</p><p>–nogpgcheck：禁止进行gpg check</p><p>-y: 自动回答为“yes”</p><p>-q：静默模式</p><p>–disablerepo=repoidglob：临时禁用此处指定的repo</p><p>–enablerepo=repoidglob：临时启用此处指定的repo</p><p>–noplugins：禁用所有插件</p><h2 id="系统光盘作为本地yum仓库"><a href="#系统光盘作为本地yum仓库" class="headerlink" title="系统光盘作为本地yum仓库"></a>系统光盘作为本地yum仓库</h2><p>(1) 挂载光盘至某目录，例如/mnt/cdrom<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/cdrom /mnt/cdrom</span><br></pre></td></tr></table></figure></p><p>(2) 创建配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=base.repo</span><br><span class="line">baseurl=file:///mnt/cdrom</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;静态和动态链接&quot;&gt;&lt;a href=&quot;#静态和动态链接&quot; class=&quot;headerlink&quot; title=&quot;静态和动态链接&quot;&gt;&lt;/a&gt;静态和动态链接&lt;/h1&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;链接主要作用是吧各个模块之间互相引用的部分处理好，使
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="rpm" scheme="http://yoursite.com/tags/rpm/"/>
    
      <category term="yum" scheme="http://yoursite.com/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>文本三剑客之grep</title>
    <link href="http://yoursite.com/2018/03/31/%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2%E4%B9%8Bgrep/"/>
    <id>http://yoursite.com/2018/03/31/文本三剑客之grep/</id>
    <published>2018-03-30T16:00:00.000Z</published>
    <updated>2019-01-12T04:32:08.936Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;grep: Global search REgular expression and Print out the line,是一款文本过滤工具。<br>&ensp;&ensp;&ensp;&ensp;作用：文本搜索工具，根据用户指定的“模式”对目标文本逐行进行匹配检查；打印匹配到的行。<br>&ensp;&ensp;&ensp;&ensp;模式：由正则表达式字符及文本字符所编写的过滤条件。<br>&ensp;&ensp;&ensp;&ensp;正则表达式REGEXP： Regular Expressions，由一类特殊字符及文本字符所编写的模式，其中有些字符（元字符）不表示字符字面意义，而表示控制或通配的功能。  </p><p>正则表达式分两类：  </p><ul><li>基本正则表达式： BRE</li><li>扩展正则表达式： ERE<br>grep工具支持基本正则表达式，egrep工具支持扩展的正则表达式，并且grep -E = egrep.</li></ul><h1 id="grep语法"><a href="#grep语法" class="headerlink" title="grep语法"></a><strong><em>grep语法</em></strong></h1><p>grep [OPTIONS] PATTERN [FILE…]   </p><ul><li>-v: 显示不被pattern匹配到的行  </li><li>-i: 忽略字符大小写  </li><li>-n： 显示匹配的行号  </li><li>-c: 统计匹配的行数  </li><li>-o: 仅显示匹配到的字符串    </li><li>-q: 静默模式，不输出任何信息  </li><li>-A #: after, 后#行  </li><li>-B #: before, 前#行  </li><li>-C #： context, 前后各#行</li><li>-e：实现多个选项间的逻辑or关系</li><li>-w：匹配整个单词</li><li>-E：使用ERE</li><li>-F：相当于fgrep，不支持正则表达式</li><li>-f file: 根据模式文件处理</li></ul><h1 id="基本正则表达式元字符"><a href="#基本正则表达式元字符" class="headerlink" title="基本正则表达式元字符"></a>基本正则表达式元字符</h1><h2 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a><strong><em>字符匹配</em></strong></h2><ul><li><p>.  &ensp; &ensp;&ensp;&ensp;匹配任意单个字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#grep "r..t" /etc/passwd </span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br></pre></td></tr></table></figure></li><li><p>[] &ensp; &ensp;&ensp;匹配指定范围内的任意单个字符，示例:[wang] [0-9] [a-z] [a-zA-Z]</p></li><li>[^] &ensp;&ensp;匹配指定范围外的任意单个字符</li><li>[:alnum:] 字母和数字</li><li>[:alpha:] 代表任何英文大小写字符，亦即 A-Z, a-z</li><li>[:lower:] 小写字母,亦即 a-z  </li><li>[:upper:] 大写字母,亦即 A-Z</li><li>[:blank:] 空白字符（空格和制表符）</li><li>[:space:] 水平和垂直的空白字符（比[:blank:]包含的范围广）</li><li>[:cntrl:] 不可打印的控制字符（退格、删除、警铃…）</li><li>[:digit:] 十进制数字   </li><li>[:xdigit:] 十六进制数字</li><li>[:graph:] 可打印的非空白字符</li><li>[:print:] 可打印字符</li><li>[:punct:] 标点符号<br>例  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#ifconfig ens33 | grep netmask | grep "[[:digit:]]."</span></span><br><span class="line">        inet 192.168.183.132  netmask 255.255.255.0  broadcast 192.168.183.255</span><br><span class="line">等价于</span><br><span class="line">[root@localhost data]<span class="comment">#ifconfig ens33 | grep netmask | grep "[0-9]."      </span></span><br><span class="line">        inet 192.168.183.132  netmask 255.255.255.0  broadcast 192.168.183.255</span><br></pre></td></tr></table></figure></li></ul><h2 id="次数匹配"><a href="#次数匹配" class="headerlink" title="次数匹配"></a><strong><em>次数匹配</em></strong></h2><p><code>用在要指定次数的字符后面，用于指定前面的字符要出现的次数</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*  匹配前面的字符任意次，包括0次  </span><br><span class="line">贪婪模式：尽可能长的匹配.默认正则表达式为贪婪模式  </span><br><span class="line">.* 任意长度的任意字符  </span><br><span class="line">\? 匹配其前面的字符0或1次  </span><br><span class="line">\+ 匹配其前面的字符至少1次  </span><br><span class="line">\&#123;n\&#125; 匹配前面的字符n次  </span><br><span class="line">\&#123;m,n\&#125; 匹配前面的字符至少m次，至多n次  </span><br><span class="line">\&#123;,n\&#125; 匹配前面的字符至多n次  </span><br><span class="line">\&#123;n,\&#125; 匹配前面的字符至少n次正则表达式</span><br></pre></td></tr></table></figure></p><p>例:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#ifconfig ens33 | grep "[0-9]\&#123;1,3\&#125;"    </span></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.183.132  netmask 255.255.255.0  broadcast 192.168.183.255</span><br><span class="line">        inet6 fe80::bf41:5d04:86fa:37c9  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:30:79:38  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 7676  bytes 850492 (830.5 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 6678  bytes 2198697 (2.0 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">只显示ifconfig ens33 的ip</span><br><span class="line"></span><br><span class="line">[root@localhost data]<span class="comment">#ifconfig ens33 | grep -o  "[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;"</span></span><br><span class="line">192.168.183.132</span><br><span class="line">255.255.255.0</span><br><span class="line">192.168.183.255</span><br></pre></td></tr></table></figure></p><h2 id="位置锚定"><a href="#位置锚定" class="headerlink" title="位置锚定"></a><strong><em>位置锚定</em></strong></h2><p><code>定位出现的位置</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* ^ 行首锚定，用于模式的最左侧  </span><br><span class="line">* $ 行尾锚定，用于模式的最右侧  </span><br><span class="line">* ^PATTERN$ 用于模式匹配整行  </span><br><span class="line">* ^$ 空行  </span><br><span class="line">* ^[[:space:]]*$ 空白行</span><br><span class="line">* \&lt; 或 \b 词首锚定，用于单词模式的左侧  </span><br><span class="line">* \&gt; 或 \b 词尾锚定，用于单词模式的右侧  </span><br><span class="line">* \&lt;PATTERN\&gt; 匹配整个单词正则表达式</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例:只显示/etc/fstab非空的行</span><br><span class="line"></span><br><span class="line">[root@localhost data]<span class="comment">#cat /etc/fstab  | grep  -v "^#" | grep -v "^$"</span></span><br><span class="line">UUID=d33ffb51-004a-4c4d-ac00-c40b9e2c2920 /                       xfs     defaults        0 0</span><br><span class="line">UUID=7d1b5c8d-8054-4496-befe-267963e07605 /boot                   xfs     defaults        0 0</span><br><span class="line">UUID=7556e4a8-128e-457f-99f7-3f1ccf517952 /data                   xfs     defaults        0 0</span><br><span class="line">UUID=152e9015-e93a-44f9-8c7d-65fe67fb5201 swap                    swap    defaults        0 0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">显示以root为单词词首的行</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment">#grep "\&lt;root" /etc/passwd</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="_分组_"></a><strong>_分组_</strong></h2><p><code>\(\) 将一个或多个字符捆绑在一起，当作一个整体处理，如： \(root\)\+</code>  </p><ul><li>分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量中，这些<br>变量的命名方式为: \1, \2, \3, …  </li><li><p>\1 表示从左侧起第一个左括号以及与之匹配右括号之间的模式所匹配到的字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\(string1\+\(string2\)*\)</span><br><span class="line">\1 ： string1\+\(string2\)*</span><br><span class="line">\2 ： string2</span><br></pre></td></tr></table></figure></li><li><p>后向引用：引用前面的分组括号中的模式所匹配字符(结果)， 而非模式本身</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#cat f1</span></span><br><span class="line">123ab123xxy123</span><br><span class="line">234xxx567</span><br><span class="line">[root@localhost ~]<span class="comment">#cat f1 | grep "\([0-9]\)\&#123;3\&#125;.*\1"</span></span><br><span class="line">123ab123xxy123</span><br></pre></td></tr></table></figure></li><li><p>或者：\|<br>示例： a\|b: a或b C\|cat: C或cat \(C\|c\)at:Cat或cat</p></li></ul><h1 id="扩展的正则表达式"><a href="#扩展的正则表达式" class="headerlink" title="扩展的正则表达式"></a>扩展的正则表达式</h1><p>egrep [OPTIONS] PATTERN [FILE…]</p><h2 id="字符匹配-1"><a href="#字符匹配-1" class="headerlink" title="字符匹配"></a><strong><em>字符匹配</em></strong></h2><ul><li>. 任意单个字符  </li><li>[] 指定范围的字符  </li><li>[^] 不在指定范围的字符<br>基本和正则表达式相同</li></ul><h2 id="次数匹配-1"><a href="#次数匹配-1" class="headerlink" title="次数匹配"></a><strong><em>次数匹配</em></strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*  匹配前面的字符任意次，包括0次  </span><br><span class="line">.* 任意长度的任意字符  </span><br><span class="line">?  匹配其前面的字符0或1次  </span><br><span class="line">+  匹配其前面的字符至少1次  </span><br><span class="line">&#123;n&#125;   匹配前面的字符n次  </span><br><span class="line">&#123;m,n&#125; 匹配前面的字符至少m次，至多n次  </span><br><span class="line">&#123;,n&#125;  匹配前面的字符至多n次  </span><br><span class="line">&#123;n,&#125;  匹配前面的字符至少n次正则表达式</span><br></pre></td></tr></table></figure><h2 id="位置锚定-1"><a href="#位置锚定-1" class="headerlink" title="位置锚定"></a><strong><em>位置锚定</em></strong></h2><p>扩展正则表达式的位置锚定和基本正则表达式相同。</p><h2 id="分组-1"><a href="#分组-1" class="headerlink" title="_分组_"></a><strong>_分组_</strong></h2><p>( )的内容不需要用<code>\</code>转义</p><ul><li>或者：|<br>示例： a|b: a或b C|cat: C或cat (C|c)at:Cat或cat</li></ul><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li>利用df和grep，取出磁盘各分区利用率，并从大到小排序</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df | grep /dev/sd | grep -o <span class="string">"[0-9]\+%"</span> | grep -o <span class="string">"[0-9]\+"</span> |sort -nr</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df | grep  -E /dev/sd | grep -oE <span class="string">"[0-9]+%"</span> | grep -Eo <span class="string">"[0-9]+"</span> |sort -nr</span><br></pre></td></tr></table></figure><ol start="2"><li>显示ifconfig命令结果中所有IPv4地址</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 | grep -o <span class="string">"\&lt;\(\([0-1][0-9]\?\&#123;2\&#125;\|2[0-4][0-9]\|25[0-5]\)\.\)\&#123;3\&#125;\([0-1][0-9]\?\&#123;2\&#125;\|2[0-4][0-9]\|25[0-5]\)\&gt;"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 | egrep -o <span class="string">"\&lt;(([0-1][0-9]?&#123;2&#125;|2[0-4][0-9]|25[0-5])\.)&#123;3&#125;([0-1][0-9]?&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;"</span></span><br></pre></td></tr></table></figure><ol start="3"><li>找出/etc/passwd用户名和shell同名的行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"^\([[:alnum:]]\&#123;1,\&#125;\):.*\1$"</span> /etc/passwd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E <span class="string">"^([[:alnum:]]&#123;1,&#125;):.*\1$"</span> /etc/passwd</span><br></pre></td></tr></table></figure><ol start="4"><li>手机号</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -o <span class="string">"1[34578][0-9]\&#123;9\&#125;"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -Eo <span class="string">"1[34578][0-9]&#123;9&#125;"</span></span><br></pre></td></tr></table></figure><ol start="5"><li>使用egrep取出/etc/rc.d/init.d/functions中其基名  </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> /etc/rc.d/init.d/<span class="built_in">functions</span>/ | grep -o  <span class="string">"[^/]\+/\?$"</span> | grep -o <span class="string">".*[^/]"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> /etc/rc.d/init.d/<span class="built_in">functions</span>/ | egrep -o  <span class="string">"[^/]+/?$"</span> | egrep -o <span class="string">".*[^/]"</span></span><br></pre></td></tr></table></figure><ol start="6"><li>显示CentOS7的/etc/grub2.cfg文件中，至少以一个空白字符开头的且后面有非空白字符的行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"^[[:space:]]\+[^[:space:]]"</span> /etc/grub2.cfg</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E <span class="string">"^[[:space:]]+[^[:space:]]"</span> /etc/grub2.cfg</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;grep: Global search REgular expression and Print out the line,是一款文本过滤工具。&lt;br&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;作用：文本搜索工具，根据用
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="文本工具" scheme="http://yoursite.com/tags/%E6%96%87%E6%9C%AC%E5%B7%A5%E5%85%B7/"/>
    
      <category term="grep" scheme="http://yoursite.com/tags/grep/"/>
    
      <category term="正则" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>浅议linux中的硬链接和软链接</title>
    <link href="http://yoursite.com/2018/02/10/%E6%B5%85%E8%AE%AElinux%E4%B8%AD%E7%9A%84%E7%A1%AC%E9%93%BE%E6%8E%A5%E5%92%8C%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
    <id>http://yoursite.com/2018/02/10/浅议linux中的硬链接和软链接/</id>
    <published>2018-02-09T16:00:00.000Z</published>
    <updated>2019-01-12T05:07:16.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链接文件的概念"><a href="#链接文件的概念" class="headerlink" title="链接文件的概念"></a>链接文件的概念</h1><p>&ensp;&ensp;&ensp;&ensp;Linux中的链接文件就相当于是Windows中的快捷方式，通过链接文件可以访问到链接指向的源文件。但是Linux下的链接文件和Windows中的快捷方式还是有一定的区别。Linux中有两种链接文件分别为硬链接和软链接（也称为符号链接）。在介绍链接文件之前先要介绍一下Linux文件系统中的inode。</p><h1 id="节点的概念"><a href="#节点的概念" class="headerlink" title="节点的概念"></a>节点的概念</h1><p>&ensp;&ensp;&ensp;&ensp;我们都知道文件数据都是储存在硬盘的”块”区域中。那么很显然，我们还必须找一块区域储存文件的元数据信息，比如文件的创建者、文件的创建时间、文件的大小等等，这种存储文件元数据信息的区域就叫做inode，中文译名为”索引节点”</p><p>Inode（索引节点）包含有关文件的信息（元数据），具体有如下内容：</p><ul><li>文件类型，权限，UID，GID  </li><li>链接数（指向这个文件名路径名称个数）  </li><li>该文件的大小和不同的时间戳  </li><li>指向磁盘上文件的数据块指针  </li><li>有关文件的其他数据  </li></ul><p>我们可以使用stat命令来查看某个文件的inode的信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#stat /data/f1</span></span><br><span class="line">  File: ‘/data/f1’</span><br><span class="line">  Size: 0               Blocks: 0          IO Block: 4096   regular empty file</span><br><span class="line">Device: 803h/2051d      Inode: 67          Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Context: unconfined_u:object_r:etc_runtime_t:s0</span><br><span class="line">Access: 2018-09-29 10:34:06.156131723 +0800</span><br><span class="line">Modify: 2018-09-29 10:34:06.156131723 +0800</span><br><span class="line">Change: 2018-09-29 10:34:06.156131723 +0800</span><br><span class="line"> Birth: -</span><br></pre></td></tr></table></figure></p><p><code>注意：文件名是不存在inode中的！！!</code>  </p><p>查看每个硬盘分区的inode总数和使用的数量，可以用<code>df -i</code> 来查看:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#df -i</span></span><br><span class="line">Filesystem       Inodes  IUsed    IFree IUse% Mounted on</span><br><span class="line">/dev/sda2      26214400 122731 26091669    1% /</span><br><span class="line">devtmpfs         229181    397   228784    1% /dev</span><br><span class="line">tmpfs            233163      1   233162    1% /dev/shm</span><br><span class="line">tmpfs            233163    881   232282    1% /run</span><br><span class="line">tmpfs            233163     16   233147    1% /sys/fs/cgroup</span><br><span class="line">/dev/sda1        524288    327   523961    1% /boot</span><br><span class="line">/dev/sda3      15728640      4 15728636    1% /data</span><br><span class="line">tmpfs            233163      9   233154    1% /run/user/42</span><br><span class="line">tmpfs            233163      1   233162    1% /run/user/0</span><br></pre></td></tr></table></figure></p><p>空间满了和inode用光了都报<code>No space left on device</code></p><p>下图就是磁盘空间占满了提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#dd if=/dev/zero of=/boot/bigfile bs=1M count=860</span></span><br><span class="line">dd: error writing ‘/boot/bigfile’: No space left on device</span><br><span class="line">850+0 records <span class="keyword">in</span></span><br><span class="line">849+0 records out</span><br><span class="line">890306560 bytes (890 MB) copied, 2.25818 s, 394 MB/s</span><br><span class="line"></span><br><span class="line">[root@localhost data]<span class="comment">#df -h /dev/sda1</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sda1      1014M 1014M  336K 100% /boot</span><br><span class="line"></span><br><span class="line">[root@localhost data]<span class="comment">#df -i /dev/sda1 </span></span><br><span class="line">Filesystem     Inodes IUsed IFree IUse% Mounted on</span><br><span class="line">/dev/sda1        1184   328   856   28% /boot</span><br></pre></td></tr></table></figure></p><p>下图就是inode用光的提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost dir1]<span class="comment">#df -i /dev/sda1</span></span><br><span class="line">Filesystem     Inodes  IUsed IFree IUse% Mounted on</span><br><span class="line">/dev/sda1      524288 524288     0  100% /boot</span><br><span class="line"></span><br><span class="line">也会报</span><br><span class="line">touch: cannot touch ‘f524284’: No space left on device</span><br><span class="line">touch: cannot touch ‘f524285’: No space left on device</span><br><span class="line">touch: cannot touch ‘f524286’: No space left on device</span><br></pre></td></tr></table></figure></p><p>&ensp;&ensp;每个inode都有一个号码，操作系统用inode号码来识别不同的文件。对于系统来说，文件名只是inode号码便于识别的别称和绰号。表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：</p><p>首先，系统找到这个文件名对应的inode号码；</p><p>其次，通过inode号码，获取inode信息；</p><p>最后，根据inode信息，找到文件所在的block，读出数据。</p><p>使用<code>ls -i</code>命令，可以看出文件名对应的inode号码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#ls -i /data/f1</span></span><br><span class="line">67 /data/f1</span><br></pre></td></tr></table></figure></p><h1 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h1><p>&ensp;&ensp;&ensp;&ensp;一般情况下，文件名和inode号码是”一一对应”关系，每个inode号码对应一个文件名。但是，Linux系统允许多个文件名指向同一个inode号码。这意味着，可以用不同的文件名访问同样的内容；对文件内容进行修改，会影响到所有文件名;删除一个文件名，不影响另一个文件名的访问。这种情况就被称为:硬链接”(hard link)。可以通过ln命令来创建硬链接：<br>&ensp;&ensp;&ensp;&ensp;ln&ensp; 源文件&ensp; 目标文件   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#ls</span></span><br><span class="line">2.txt  f1</span><br><span class="line">[root@localhost data]<span class="comment">#ln 2.txt 22.txt</span></span><br><span class="line">[root@localhost data]<span class="comment">#ls</span></span><br><span class="line">22.txt  2.txt  f1</span><br><span class="line">[root@localhost data]<span class="comment">#ll -i</span></span><br><span class="line">total 8</span><br><span class="line">68 -rw-r--r--. 2 root root 22 Sep 25 15:41 22.txt</span><br><span class="line">68 -rw-r--r--. 2 root root 22 Sep 25 15:41 2.txt</span><br><span class="line">67 -rw-r--r--. 1 root root  0 Sep 25 14:16 f1</span><br></pre></td></tr></table></figure><ul><li><p>创建文件时链接数递增  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#ll -i f1</span></span><br><span class="line">67 -rw-r--r--. 1 root root 0 Sep 29 10:34 f1</span><br><span class="line">[root@localhost data]<span class="comment">#ln f1 f11</span></span><br><span class="line">[root@localhost data]<span class="comment">#ll -i f1 f11</span></span><br><span class="line">67 -rw-r--r--. 2 root root 0 Sep 29 10:34 f1</span><br><span class="line">67 -rw-r--r--. 2 root root 0 Sep 29 10:34 f11</span><br></pre></td></tr></table></figure></li><li><p>不能跨越驱动器或分区  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#ln /data/f2 /root/f22</span></span><br><span class="line">ln: failed to create hard link ‘/root/f22’ =&gt; ‘/data/f2’: Invalid cross-device link</span><br></pre></td></tr></table></figure></li><li><p>不支持文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#ln dir1 dir11</span></span><br><span class="line">ln: ‘dir1’: hard link not allowed <span class="keyword">for</span> directory</span><br></pre></td></tr></table></figure></li></ul><h1 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h1><p>&ensp;&ensp;&ensp;&ensp;除了硬链接以外，还有一种特殊情况。文件A和文件B的incode号码虽然不一样，但是文件A的内容就是文件B的路径。读取文件A时系统会自动将访问者导向文件B。因此，无论打开哪一个文件，最终读取的都是文件B。这时文件A就称为文件B的”软链接”(soft link)或者”符号链接”(symbolic link)可以通过ln -s命令来创建软链接：<br>&ensp;&ensp;&ensp;&ensp;ln -s &ensp;源文件或目录&ensp; 目标文件或目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost data]<span class="comment">#ll</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--. 2 root root 22 Sep 25 15:41 22.txt</span><br><span class="line">-rw-r--r--. 2 root root 22 Sep 25 15:41 2.txt</span><br><span class="line">-rw-r--r--. 1 root root  0 Sep 25 14:16 f1</span><br><span class="line">[root@localhost data]<span class="comment">#ln -s 2.txt 2.txt-link</span></span><br><span class="line">[root@localhost data]<span class="comment">#ll</span></span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--. 2 root root 22 Sep 25 15:41 22.txt</span><br><span class="line">-rw-r--r--. 2 root root 22 Sep 25 15:41 2.txt</span><br><span class="line">lrwxrwxrwx. 1 root root  5 Sep 25 16:01 2.txt-link -&gt; 2.txt</span><br><span class="line">[root@localhost data]<span class="comment">#cat 2.txt</span></span><br><span class="line">学习使我快乐！</span><br><span class="line">[root@localhost data]<span class="comment">#cat 2.txt-link</span></span><br><span class="line">学习使我快乐！</span><br></pre></td></tr></table></figure><p>指向的是另一个文件的路径<br>其大小为指向的路径字符串的长度<br>不增加或减少目标文件inode的引用计数</p><h1 id="硬链接和软链接的区别"><a href="#硬链接和软链接的区别" class="headerlink" title="硬链接和软链接的区别"></a>硬链接和软链接的区别</h1><ol><li>是不是同一个文件? <strong><em>这是根本的原因</em></strong> </li></ol><ul><li>硬链接本质上是一个文件，只是有多个名字。</li><li>软链接不是同一个文件</li></ul><ol start="2"><li>能不能跨分区？</li></ol><ul><li>硬链接不能跨分区</li><li>软链接可以跨分区</li></ul><ol start="3"><li>链接数是否增长？  </li></ol><ul><li>硬链接的链接数会增加</li><li>软链接的链接数不会增加</li></ul><ol start="4"><li>inode Number 是否相同</li></ol><ul><li>硬链接的inode number完全一样</li><li>软链接的inode number不一样</li></ul><ol start="5"><li>原始文件删除，链接文件可否访问？  </li></ol><ul><li>硬链接：原始文件与链接文件是平级关系，原始文件删除，链接文件可以继续访问。</li><li>软链接：原始文件删除，软链接就找不到路径，无法访问</li></ul><ol start="6"><li>大小是否一样  </li></ol><ul><li>硬链接的大小就是存储原始文件的大小</li><li>软链接的大小就是它指向路径的大小</li></ul><ol start="7"><li>支持目录  </li></ol><ul><li>硬链接不支持目录</li><li>软链接支持目录</li></ul><ol start="8"><li>相对路径 </li></ol><ul><li>硬链接：相对路径是相对当前目录的路径</li><li>软链接：相对路径是相对软链接的路径</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;链接文件的概念&quot;&gt;&lt;a href=&quot;#链接文件的概念&quot; class=&quot;headerlink&quot; title=&quot;链接文件的概念&quot;&gt;&lt;/a&gt;链接文件的概念&lt;/h1&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Linux中的链接文件就相当于是Windows中的快
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="Inode" scheme="http://yoursite.com/tags/Inode/"/>
    
      <category term="链接" scheme="http://yoursite.com/tags/%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>标准IO和管道</title>
    <link href="http://yoursite.com/2018/01/06/%E7%AE%A1%E9%81%93%E5%92%8C%E6%A0%87%E5%87%86IO/"/>
    <id>http://yoursite.com/2018/01/06/管道和标准IO/</id>
    <published>2018-01-05T16:00:00.000Z</published>
    <updated>2019-01-12T04:52:57.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准输入和输出"><a href="#标准输入和输出" class="headerlink" title="标准输入和输出"></a>标准输入和输出</h1><h2 id="程序：指令-数据"><a href="#程序：指令-数据" class="headerlink" title="程序：指令+数据"></a>程序：指令+数据</h2><ul><li>读入数据：Input  </li><li>输出数据：Output  <h2 id="打开的文件都有一个fd-file-descriptor-文件描述符"><a href="#打开的文件都有一个fd-file-descriptor-文件描述符" class="headerlink" title="打开的文件都有一个fd: file descriptor (文件描述符)"></a>打开的文件都有一个fd: file descriptor (文件描述符)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ll /proc/$$/fd</span></span><br><span class="line">total 0</span><br><span class="line">lrwx------ 1 root root 64 Oct 28 14:43 0 -&gt; /dev/pts/2</span><br><span class="line">lrwx------ 1 root root 64 Oct 28 14:43 1 -&gt; /dev/pts/2</span><br><span class="line">lrwx------ 1 root root 64 Oct 28 14:43 2 -&gt; /dev/pts/2</span><br><span class="line">lrwx------ 1 root root 64 Oct 28 19:33 255 -&gt; /dev/pts/2</span><br></pre></td></tr></table></figure></li></ul><h2 id="Linux给程序提供三种I-O设备"><a href="#Linux给程序提供三种I-O设备" class="headerlink" title="Linux给程序提供三种I/O设备"></a>Linux给程序提供三种I/O设备</h2><p>标准输入（STDIN） －0 默认接受来自键盘的输入<br>标准输出（STDOUT）－1 默认输出到终端窗口<br>标准错误（STDERR）－2 默认输出到终端窗口  </p><h1 id="I-O重定向"><a href="#I-O重定向" class="headerlink" title="I/O重定向"></a>I/O重定向</h1><p>改变文件保存的默认位置  </p><h2 id="标准输出和错误输出重定向"><a href="#标准输出和错误输出重定向" class="headerlink" title="标准输出和错误输出重定向"></a>标准输出和错误输出重定向</h2><p>格式: 命令 操作符号 文件名  </p><p>支持的操作符号包括:<br>> 把STDOUT重定向到文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#ls /data</span></span><br><span class="line">lost+found</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ls /data &gt; f1.txt   #f1为一空文件</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f1.txt</span></span><br><span class="line">lost+found</span><br></pre></td></tr></table></figure></p><p>2&gt; 把STDERR重定向到文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#ls /error</span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ls /error 2&gt; f2.txt</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f2.txt </span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br></pre></td></tr></table></figure></p><p>&amp;&gt; 把所有输出重定向到文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#ls /data /error &amp;&gt;f3.txt</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f3.txt </span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br><span class="line">/data:</span><br><span class="line">lost+found</span><br></pre></td></tr></table></figure></p><p>> 文件内容会被覆盖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#cat f1.txt </span></span><br><span class="line">lost+found</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#echo 123</span></span><br><span class="line">123</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#echo 123 &gt;f1.txt</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f1.txt </span></span><br><span class="line">123</span><br></pre></td></tr></table></figure></p><p>>&gt; 原有内容基础上，追加内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#ls /data &gt;f1.txt </span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#echo 123 &gt;&gt;f1.txt </span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f1.txt </span></span><br><span class="line">lost+found</span><br><span class="line">123</span><br></pre></td></tr></table></figure></p><p>2&gt; 覆盖重定向错误输出数据流<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#cat f2.txt </span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cdm</span></span><br><span class="line">-bash: cdm: <span class="built_in">command</span> not found</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cdm 2&gt; f2.txt </span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f2.txt </span></span><br><span class="line">-bash: cdm: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure></p><p>2&gt;&gt; 追加重定向错误输出数据流<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#ls /error 2&gt;&gt; f2.txt</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f2.txt </span></span><br><span class="line">-bash: cdm: <span class="built_in">command</span> not found</span><br><span class="line">ls: cannot access /error: No such file or directory</span><br></pre></td></tr></table></figure></p><p>set –C 禁止将内容覆盖已有文件,但可追加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#cat f1.txt </span></span><br><span class="line">lost+found</span><br><span class="line">123</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#set -C</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#echo 345 &gt; f1.txt </span></span><br><span class="line">-bash: f1.txt: cannot overwrite existing file</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#echo 345 &gt;&gt; f1.txt </span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f1.txt </span></span><br><span class="line">lost+found</span><br><span class="line">123</span><br><span class="line">345</span><br></pre></td></tr></table></figure></p><blockquote><p>| file 强制覆盖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#echo 345 &gt;|f1.txt </span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f1.txt </span></span><br><span class="line">345</span><br></pre></td></tr></table></figure></p></blockquote><p>set +C 允许覆盖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#set +C</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#echo 123&gt;f1.txt</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f1.txt </span></span><br><span class="line">123</span><br></pre></td></tr></table></figure></p><p>标准输出和错误输出各自定向至不同位置<br>COMMAND &gt; /path/to/file.out 2&gt; /path/to/error.out<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS6 ~]<span class="comment">#ls /data /error &gt;f1.txt 2&gt;f2.txt</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f1.txt </span></span><br><span class="line">/data:</span><br><span class="line">lost+found</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat f2.txt </span></span><br><span class="line">ls: cannot access /error: No such file or directory</span><br></pre></td></tr></table></figure></p><p>合并标准输出和错误输出为同一个数据流进行重定向<br> &amp;&gt; 覆盖重定向<br> &amp;&gt;&gt; 追加重定向<br> COMMAND &gt; /path/to/file.out 2&gt;&amp;1 （顺序很重要）<br> COMMAND &gt;&gt; /path/to/file.out 2&gt;&amp;1   </p><p> ()：合并多个程序的STDOUT<br>( cal 2007 ; cal 2008 ) &gt; all.txt</p><h2 id="重定向的实验："><a href="#重定向的实验：" class="headerlink" title="重定向的实验："></a>重定向的实验：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">ll a.txt b.txt 将输出一条标准输出和一条标准错误。</span><br><span class="line">如下：</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ll a.txt</span></span><br><span class="line">-rw-r--r--. 1 root root 2 Oct 28 09:04 a.txt    <span class="comment">#这为内容A</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#ll b.txt</span></span><br><span class="line">ls: cannot access b.txt: No such file or directory   <span class="comment">#这为内容B</span></span><br><span class="line"></span><br><span class="line">下面讨论各种变形的输出结果和原因：</span><br><span class="line">1、[root@CentOS6 ~]<span class="comment">#ll a.txt b.txt 1&gt;file 2&gt;&amp;1</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat file</span></span><br><span class="line">ls: cannot access b.txt: No such file or directory</span><br><span class="line">-rw-r--r--. 1 root root 2 Oct 28 09:04 a.txt </span><br><span class="line">file内容A和B 屏幕内容无 （因为标准输出定向到文件，标准错误定向到标准输出，所以也定向到文件）</span><br><span class="line"></span><br><span class="line">2、[root@CentOS6 ~]<span class="comment">#ll a.txt b.txt 2&gt;&amp;1 1&gt;file</span></span><br><span class="line">ls: cannot access b.txt: No such file or directory</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat file </span></span><br><span class="line">-rw-r--r--. 1 root root 2 Oct 28 09:04 a.txt</span><br><span class="line">file内容A 屏幕输出B （因为标准错误重定向到了标准输出即屏幕上输出，标准输出定向到文件）</span><br><span class="line"></span><br><span class="line">3、[root@CentOS6 ~]<span class="comment">#ll a.txt b.txt 2&gt;file 1&gt;&amp;2</span></span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat file </span></span><br><span class="line">ls: cannot access b.txt: No such file or directory</span><br><span class="line">-rw-r--r--. 1 root root 2 Oct 28 09:04 a.txt </span><br><span class="line">file内容A和B 屏幕内容无（因为标准错误定向到文件，标准输出定向到标准错误，所以也定向到文件）</span><br><span class="line"></span><br><span class="line">4、[root@CentOS6 ~]<span class="comment">#ll a.txt b.txt 1&gt;&amp;2 2&gt;file</span></span><br><span class="line">-rw-r--r--. 1 root root 2 Oct 28 09:04 a.txt</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat file </span></span><br><span class="line">ls: cannot access b.txt: No such file or directory </span><br><span class="line">file内容A 屏幕输出B（因为标准输出定向到了标准错误即屏幕，标准错误定向到文件）</span><br><span class="line"></span><br><span class="line">5、[root@CentOS6 ~]<span class="comment">#ll a.txt b.txt 1&gt;file 1&gt;&amp;2</span></span><br><span class="line">ls: cannot access b.txt: No such file or directory</span><br><span class="line">-rw-r--r--. 1 root root 2 Oct 28 09:04 a.txt</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat file </span></span><br><span class="line">[root@CentOS6 ~]<span class="comment"># </span></span><br><span class="line">file内容无 屏幕内容A和B （因为标准输出定向到文件，标准输出又定向的标准错误即屏幕，覆盖了1&gt;file，所以file内容无）</span><br><span class="line"></span><br><span class="line">6、[root@CentOS6 ~]<span class="comment">#ll a.txt b.txt 2&gt;file 2&gt;&amp;1</span></span><br><span class="line">ls: cannot access b.txt: No such file or directory</span><br><span class="line">-rw-r--r--. 1 root root 2 Oct 28 09:04 a.txt</span><br><span class="line">[root@CentOS6 ~]<span class="comment">#cat file </span></span><br><span class="line">[root@CentOS6 ~]<span class="comment"># </span></span><br><span class="line">file内容无 屏幕内容A和B （因为标准错误定向到文件，标准错误又定向到标准输出即屏幕，覆盖了2&gt;file，所以file内容无）</span><br></pre></td></tr></table></figure><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><p>使用 &lt; 来重定向标准输入  </p><ul><li><p>某些命令能够接受从文件中导入的STDIN  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tr <span class="string">'a-z'</span> <span class="string">'A-Z'</span>&lt; /etc/issue   <span class="comment"># 该命令会把/etc/issue中的小写字符都转换成写写字符</span></span><br><span class="line">tr -d <span class="string">'abc'</span> &lt; /etc/fstab 删除fstab文件中的所有abc中任意字符</span><br></pre></td></tr></table></figure></li><li><p>键盘输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; file</span><br><span class="line">mage</span><br><span class="line">wangxiaochun</span><br><span class="line">按ctrl+d离开</span><br></pre></td></tr></table></figure></li><li><p>可以使用文件来代替键盘的输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat &gt; filea &lt; fileb     <span class="comment">#把fileb的文件内容重定向输入到filea中</span></span><br></pre></td></tr></table></figure></li><li><p>把多行发送给STDIN<br>使用“&lt;&lt;终止词”命令从键盘把多行重导向给STDIN,直到 终止词 位置的所有文本都发送给STDIN<br>有时被称为就地文本（heretext）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mail -s <span class="string">"Please Call"</span> &lt;&lt;END</span><br><span class="line">&gt; Hi,</span><br><span class="line">&gt;</span><br><span class="line">&gt; Please give me a call when you get <span class="keyword">in</span>. We may need</span><br><span class="line">&gt; to <span class="keyword">do</span> some maintenance on server1.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Details when you<span class="string">'re on-site</span></span><br><span class="line"><span class="string">&gt; END</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="tr命令"><a href="#tr命令" class="headerlink" title="tr命令"></a>tr命令</h1><p>转换和删除字符</p><p>语法： tr [OPTION]… SET1 [SET2]<br>选项：<br>​        -c 或 ——complerment：取代所有不属于第一字符集的字符；<br>​        -d 或 ——delete：删除所有属于第一字符集的字符；<br>​        -s 或 –squeeze-repeats：把连续重复的字符以单独一个字符表示；<br>​        -t 或 –truncate-set1：先删除第一字符集较第二字符集多出的字符。  </p><p>[:alnum:]：字母和数字<br>[:alpha:]：字母<br>[:cntrl:]：控制（非打印）字符<br>[:digit:]：数字<br>[:graph:]：图形字符<br>[:lower:]：小写字母<br>[:print:]：可打印字符<br>[:punct:]：标点符号<br>[:space:]：空白字符<br>[:upper:]：大写字母<br>[:xdigit:]：十六进制字符</p><p>实例：<br>​        # echo “TANK” |tr A-Z a-z   #大写字母转小写<br>​        # echo “hello 123 world 456” | tr -d ‘0-9’  #删除字符串中的数字<br>​        # cat text | tr ‘\t’ ‘ ‘      #将制表符转换成空格<br>​        # echo “aa.,a 1 b#$bb 2 c*/cc 3 ddd 4” | tr -dc ‘0-9 \n’  # 删除除数字外的字符<br>​        # tr ‘[:lower:]’ ‘[:upper:]’     #将小写字符转换成大写字符</p><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p>连接程序，实现将前一个命令的输出直接定向后一个程序当作输入数据流<br>管道左边的命令必须要有标准输出的功能，管道右边的命令一道要有标准输入功能的否者没有意义。  </p><p>管道（使用符号“|”表示）用来连接命令<br>命令1 | 命令2 | 命令3 | …  </p><blockquote><p>将命令1的STDOUT发送给命令2的STDIN，命令2的STDOUT发送到命令3的STDIN<br>STDERR默认不能通过管道转发，可利用2&gt;&amp;1 或 |&amp; 实现<br>最后一个命令会在当前shell进程的子shell进程中执行用来<br>组合多种工具的功能<br>ls | tr ‘a-z’ ‘A-Z<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">less ：一页一页地查看输入  </span><br><span class="line">ls -l /etc | less</span><br><span class="line">mail： 通过电子邮件发送输入  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"test email"</span> | mail -s <span class="string">"test"</span> user@example.com  </span><br><span class="line">lpr：把输入发送给打印机  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"test print"</span> | lpr -P printer_name</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="重定向到多个目标（tee）"><a href="#重定向到多个目标（tee）" class="headerlink" title="重定向到多个目标（tee）"></a>重定向到多个目标（tee）</h1><p>命令1 | tee [-a ] 文件名 | 命令2<br>把命令1的STDOUT保存在文件中，做为命令2的输入<br>-a 追加</p><ul><li>使用：<blockquote><p>保存不同阶段的输出<br>复杂管道的故障排除<br>同时查看和记录输出  </p></blockquote></li></ul><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><p>将/etc/issue文件中的内容转换为大写后保存至/tmp/issue.out文件中  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue | tr <span class="string">"[a-z]"</span> <span class="string">"[A-Z]"</span> &gt;/tmp/issue.out</span><br></pre></td></tr></table></figure></li><li><p>将当前系统登录用户的信息转换为大写后保存至/tmp/who.out文件中 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who | tr <span class="string">"[a-z]"</span> <span class="string">"[A-Z]"</span> &gt;/tmp/who.out</span><br></pre></td></tr></table></figure></li><li><p>一个linux用户给root发邮件，要求邮件标题为”help”，邮件正文如下：<br>Hello, I am 用户名,The system version is here,pleasehelp me to check it ,thanks! 操作系统版本信息  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mail -s <span class="string">"root"</span> &lt;&lt;EOF</span><br><span class="line">&gt; hello,i am <span class="variable">$user</span></span><br><span class="line">&gt; The system version is here,please <span class="built_in">help</span> me to check it,thanks!</span><br><span class="line">&gt;cat /etc/centos-release</span><br><span class="line">&gt;EOF</span><br></pre></td></tr></table></figure></li><li><p>将/root/下文件列表，显示成一行，并文件名之间用空格隔开  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /root | tr <span class="string">"\n"</span> <span class="string">" "</span></span><br></pre></td></tr></table></figure></li><li><p>计算1+2+3+..+99+100的总和  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> &#123;1..100&#125; | tr -s <span class="string">" "</span> <span class="string">"+"</span> | bc</span><br></pre></td></tr></table></figure></li><li><p>删除Windows文本文件中的‘^M’字符  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tr -d <span class="string">"\15"</span> win.txt</span><br></pre></td></tr></table></figure></li><li><p>处理字符串“xt.,l 1 jr#!$mn2 c*/fe3 uz4”，只保留其中的数字和空格 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"xt.,l 1 jr#bcmn2 c*/fe3 uz4"</span> | tr -d <span class="string">"[[:alpha:]]"</span> | tr -d <span class="string">"[[:punct:]]"</span> </span><br><span class="line">或者</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"xt.,l 1 jr#bcmn2 c*/fe3 uz4"</span> |tr -dc <span class="string">"[:digit:][:space:]"</span></span><br></pre></td></tr></table></figure></li><li><p>将PATH变量每个目录显示在独立的一行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span> |tr -s <span class="string">":"</span> <span class="string">"\n"</span></span><br></pre></td></tr></table></figure></li><li><p>将指定文件中0-9分别替代成a-j  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先创建文件touch f1 </span><br><span class="line">给f1 vim 输入0-9 </span><br><span class="line">cat f1 | tr <span class="string">"[0-9]"</span> <span class="string">"[a-j]"</span></span><br></pre></td></tr></table></figure></li><li><p>将文件/etc/centos-release中每个单词（由字母组成）显示在独立一行，并无空行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/centos-release | tr -s <span class="string">" "</span> <span class="string">"\n"</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标准输入和输出&quot;&gt;&lt;a href=&quot;#标准输入和输出&quot; class=&quot;headerlink&quot; title=&quot;标准输入和输出&quot;&gt;&lt;/a&gt;标准输入和输出&lt;/h1&gt;&lt;h2 id=&quot;程序：指令-数据&quot;&gt;&lt;a href=&quot;#程序：指令-数据&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="IO" scheme="http://yoursite.com/tags/IO/"/>
    
      <category term="管道" scheme="http://yoursite.com/tags/%E7%AE%A1%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>Hello Linux basics</title>
    <link href="http://yoursite.com/2017/12/16/Hello%20Linux%20basics/"/>
    <id>http://yoursite.com/2017/12/16/Hello Linux basics/</id>
    <published>2017-12-15T16:00:00.000Z</published>
    <updated>2019-01-12T04:56:32.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机硬件组成"><a href="#计算机硬件组成" class="headerlink" title="计算机硬件组成"></a>计算机硬件组成</h1><p>&ensp;&ensp;&ensp;&ensp;根据冯·诺依曼体系结构，我们知道现代计算机硬件由控制器、运算器、存储器、输入设备和输出设备五大部分组成。<br>&ensp;&ensp;&ensp;&ensp;控制器：控制器是整个计算机的中枢神经，其功能是对程序规定的控制信息进行解释，并根据具体要求进行控制、调度程序、数据、地址，协调计 算机各个部分工作，协调计算机各部分工作及内存、IO设备等的访问<br>&ensp;&ensp;&ensp;&ensp;运算器：对数据进行各种算数运算和逻辑运算也就是对数据进行加工，在现代计算机系统中将控制器和运算器合并在一起组成CPU。<br>&ensp;&ensp;&ensp;&ensp;存储器：存储器是存储程序、数据和各种信号、命令等信息，并在需要的时候提供这些信息；在现代计算机系统中就是内存。<br>&ensp;&ensp;&ensp;&ensp;输入设备:就是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息输入到计算机；比如键盘、鼠标等<br>&ensp;&ensp;&ensp;&ensp;输出设备：就是将程序、原始数据、文字、字符、控制命令或现场采集的数据等信息进行输出；比如显示器、打印机等</p><h2 id="Linux发行版"><a href="#Linux发行版" class="headerlink" title="Linux发行版"></a>Linux发行版</h2><p> <strong><em>slackware:</em></strong>  </p><ul><li>SUSE Linux Enterprise Server (SLES)  </li><li><p>OpenSuse桌面</p><p><strong><em>debian:</em></strong></p></li><li>ubuntu</li><li><p>mint  </p><p><strong><em>redhat:</em></strong> </p></li><li>RedHat Enterprise Linux:<br>红帽推出的收费的技术支持和更新的linux发行版，适用于企业服务器版Linux，稳定、安全。  </li><li>CentOS:centos可以说是社区维护的RHEL克隆版本，免费使用。   </li><li>Fedora:由社区维护的适用于个人桌面的Linux发行版  </li></ul><p><strong><em>ArchLinux:</em></strong> 轻量简洁<br><strong><em>Gentoo:</em></strong> 极致性能，不提供传统意义的安装程序<br><strong><em>LFS:</em></strong> Linux From scratch 自制Linux<br><strong><em>Android:</em></strong> kernel+busybox（工具集）+java虚拟机  </p><h1 id="Linux的哲学思想"><a href="#Linux的哲学思想" class="headerlink" title="Linux的哲学思想"></a>Linux的哲学思想</h1><ul><li>一切都是一个文件（包括硬件)  </li><li>小型，单一用途的程序  </li><li>链接程序，共同完成复杂的任务  </li><li>避免令人困惑的用户界面  </li><li>配置数据存储在文本中<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a><strong><em>echo</em></strong></h2><code>主要是用于显示信息的</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 data]<span class="comment">#man echo</span></span><br><span class="line">ECHO(1)        User Commands        ECHO(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       <span class="built_in">echo</span> - display a line of text</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="built_in">echo</span> [SHORT-OPTION]... [STRING]...</span><br><span class="line">       <span class="built_in">echo</span> LONG-OPTION</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Echo  the STRING(s) to standard out‐</span><br><span class="line">       put.</span><br><span class="line"></span><br><span class="line">       -n     <span class="keyword">do</span> not  output  the  trailing</span><br><span class="line">              newline</span><br><span class="line"></span><br><span class="line">       -e     <span class="built_in">enable</span>    interpretation   of</span><br><span class="line">              backslash escapes</span><br><span class="line"></span><br><span class="line">       -E     <span class="built_in">disable</span>   interpretation   of</span><br><span class="line">              backslash escapes (default)</span><br><span class="line"></span><br><span class="line">       --<span class="built_in">help</span> display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">       --version</span><br></pre></td></tr></table></figure></li></ul><p>下面说明一些重要参数：</p><ul><li>-E  （默认）不支持\解释功能  </li><li>-n   不自动换行  </li><li>-e   启用\字符的解释功能</li></ul><p><code>启用命令选项-e，若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出</code>  </p><ul><li>\a     发出警告声</li><li>\b     退格键  </li><li>\c     最后不加上换行符号  </li><li>\n     换行且光标移至行首  </li><li>\r     回车，即光标移至行首，但不换行  </li><li>\t     插入tab  </li><li>\ \    插入\字符  </li><li>\0nnn  插入nnn（八进制）所代表的ASCII字符  </li><li>\xHH   插入HH（十六进制）所代表的ASCII数字（man 7 ascii）</li></ul><h2 id="date"><a href="#date" class="headerlink" title="date"></a><strong><em>date</em></strong></h2><p><code>主要是显示操作系统的时间</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 data]<span class="comment">#date --help</span></span><br><span class="line">Usage: date [OPTION]... [+FORMAT]</span><br><span class="line">  or:  date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br><span class="line">Display the current time <span class="keyword">in</span> the given FORMAT, or <span class="built_in">set</span> the system date</span><br></pre></td></tr></table></figure></p><p>下面说明一些重要参数：</p><ol><li><p>-d   显示字符串所指的日期与时间,如果不指定，默认为当前系统时间。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 data]<span class="comment">#date</span></span><br><span class="line">Sun Sep 23 15:12:28 CST 2018</span><br></pre></td></tr></table></figure></li><li><p>-s   根据字符串指定的日期、时间设定为当前的系统时间。</p></li><li>-d @ 把秒转化成具体的年月日，从1970年1月1号00：00:00算起<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 data]<span class="comment">#date -d @1537687300</span></span><br><span class="line">Sun Sep 23 15:21:40 CST 2018</span><br></pre></td></tr></table></figure></li></ol><p>如果需要以指定的格式显示日期或者日期，可以使用date “+”开头的字符串指定其格式，最常用的格式如下:<br>%n : 下一行<br>%t : 跳格<br>%H : 小时(00-23)<br>%M : 分钟(00-59)<br>%p : 显示本地 AM 或 PM<br>%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)<br>%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数<br>%S : 秒(00-60)<br>%T : 直接显示时间 (24 小时制)<br>%X : 相当于 %H:%M:%S<br>%Z : 显示时区<br>%d : 日 (01-31)<br>%D : 直接显示日期 (mm/dd/yy))<br>%m : 月份 (01-12)<br>%Y : 完整年份 (0000-9999)<br>%F : full date;相当于年月日<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 data]<span class="comment">#date +"%F %T"</span></span><br><span class="line">2018-09-23 15:33:21</span><br></pre></td></tr></table></figure></p><h2 id="history"><a href="#history" class="headerlink" title="history"></a><strong><em>history</em></strong></h2><p><code>主要显示历史命令记录，或者下达历史纪录中的指令</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 data]<span class="comment">#help history</span></span><br><span class="line"><span class="built_in">history</span>: <span class="built_in">history</span> [-c] [-d offset] [n] or <span class="built_in">history</span> -anrw [filename] or <span class="built_in">history</span> -ps arg [arg...]</span><br><span class="line">    Display or manipulate the <span class="built_in">history</span> list.</span><br><span class="line">    </span><br><span class="line">    Display the <span class="built_in">history</span> list with line numbers, prefixing each modified</span><br><span class="line">    entry with a `*<span class="string">'.  An argument of N lists only the last N entries.</span></span><br></pre></td></tr></table></figure></p><p>其中一些重要的参数：<br>n 　数字,表示要列出最近的 n 条历史<br>-c ：清空命令历史<br>-a ：追加本次会话新执行的命令历史列表至历史文件<br>-r ：读历史文件附加到历史列表<br>-w ：保存历史列表到指定的历史文件<br>-n: 读历史文件中未读过的行到历史列表<br>-p: 展开历史参数成多行，但不存在历史列表中<br>-s: 展开历史参数成一行，附加在历史列表后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]<span class="comment">#cat .bash_history </span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="built_in">history</span></span><br><span class="line">uname -r</span><br><span class="line">cat /etc/centos-release</span><br><span class="line"><span class="built_in">history</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><p>上图可以查看文件中的历史</p><h1 id="Bash的快捷键"><a href="#Bash的快捷键" class="headerlink" title="Bash的快捷键"></a>Bash的快捷键</h1><ul><li>Ctrl + l  清屏，相当于clear命令</li><li>Ctrl + o  执行当前命令，并重新显示本命令</li><li>Ctrl + s  阻止屏幕输出，锁定</li><li>Ctrl + q  允许屏幕输出</li><li>Ctrl + c  终止命令</li><li>Ctrl + z  挂起命令</li><li>Ctrl + a  光标移到命令行首，相当于Home</li><li>Ctrl + e  光标移到命令行尾，相当于End</li><li>Ctrl + f  光标向右移动一个字符，相当于右方向键</li><li>Ctrl + b  光标向左移动一个字符，相当于左方向键</li><li>Alt + f  光标向右移动一个单词尾</li><li>Alt + b  光标向左移动一个单词首</li><li>Ctrl + x x光标在命令行首和光标之间移动</li><li>Ctrl + u 从光标处删除至命令行首</li><li>Ctrl + k 从光标处删除至命令行尾</li><li>Alt + r  删除当前整行</li><li>Ctrl + w 从光标处向左删除至单词首</li><li>Alt + d  从光标处向右删除至单词尾</li><li>Ctrl + d 删除光标处的一个字符</li><li>Ctrl + h 删除光标前的一个字符</li><li>Ctrl + y 将删除的字符粘贴至光标后</li><li>Alt + c  从光标处开始向右更改为首字母大写的单词</li><li>Alt + u  从光标处开始，将右边一个单词更改为大写</li><li>Alt + l  从光标处开始，将右边一个单词更改为小写</li><li>Ctrl + t 交换光标处和之前的字符位置</li><li>Alt + t  交换光标处和之前的单词位置</li><li>Alt + N  提示输入指定字符后，重复显示该字符N次</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机硬件组成&quot;&gt;&lt;a href=&quot;#计算机硬件组成&quot; class=&quot;headerlink&quot; title=&quot;计算机硬件组成&quot;&gt;&lt;/a&gt;计算机硬件组成&lt;/h1&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;根据冯·诺依曼体系结构，我们知道现代计算机硬件由控制
      
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="命令" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>
